{"version":3,"sources":["../../src/useForm/index.ts","../../src/useStepsForm/index.ts","../../src/useModalForm/index.ts"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport get from \"lodash-es/get\";\nimport has from \"lodash-es/has\";\n\nimport {\n    useForm as useHookForm,\n    UseFormProps as UseHookFormProps,\n    UseFormReturn,\n    FieldValues,\n    UseFormHandleSubmit,\n    Path,\n} from \"react-hook-form\";\nimport {\n    BaseRecord,\n    HttpError,\n    useForm as useFormCore,\n    useWarnAboutChange,\n    UseFormProps as UseFormCoreProps,\n    UseFormReturnType as UseFormReturnTypeCore,\n    useTranslate,\n    useRefineContext,\n    flattenObjectKeys,\n} from \"@refinedev/core\";\n\nexport type UseFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturn<TVariables, TContext> & {\n    refineCore: UseFormReturnTypeCore<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >;\n    saveButtonProps: {\n        disabled: boolean;\n        onClick: (e: React.BaseSyntheticEvent) => void;\n    };\n};\n\nexport type UseFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = {\n    /**\n     * Configuration object for the core of the [useForm](/docs/api-reference/core/hooks/useForm/)\n     * @type [`UseFormCoreProps<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>`](/docs/api-reference/core/hooks/useForm/#properties)\n     */\n    refineCoreProps?: UseFormCoreProps<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >;\n    /**\n     * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n     * @default `false*`\n     */\n    warnWhenUnsavedChanges?: boolean;\n    /**\n     * Disables server-side validation\n     * @default false\n     * @see {@link https://refine.dev/docs/advanced-tutorials/forms/server-side-form-validation/}\n     */\n    disableServerSideValidation?: boolean;\n} & UseHookFormProps<TVariables, TContext>;\n\nexport const useForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    refineCoreProps,\n    warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n    disableServerSideValidation: disableServerSideValidationProp = false,\n    ...rest\n}: UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const { options } = useRefineContext();\n    const disableServerSideValidation =\n        options?.disableServerSideValidation || disableServerSideValidationProp;\n\n    const translate = useTranslate();\n\n    const {\n        warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine,\n        setWarnWhen,\n    } = useWarnAboutChange();\n    const warnWhenUnsavedChanges =\n        warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n    const useHookFormResult = useHookForm<TVariables, TContext>({\n        ...rest,\n    });\n\n    const {\n        watch,\n        setValue,\n        getValues,\n        handleSubmit: handleSubmitReactHookForm,\n        setError,\n    } = useHookFormResult;\n\n    const useFormCoreResult = useFormCore<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        ...refineCoreProps,\n        onMutationError: (error, _variables, _context) => {\n            if (disableServerSideValidation) {\n                refineCoreProps?.onMutationError?.(error, _variables, _context);\n                return;\n            }\n\n            const errors = error?.errors;\n\n            for (const key in errors) {\n                // when the key is not registered in the form, react-hook-form not working\n                const isKeyInVariables = Object.keys(\n                    flattenObjectKeys(_variables),\n                ).includes(key);\n\n                if (!isKeyInVariables) {\n                    continue;\n                }\n\n                const fieldError = errors[key];\n\n                let newError = \"\";\n\n                if (Array.isArray(fieldError)) {\n                    newError = fieldError.join(\" \");\n                }\n\n                if (typeof fieldError === \"string\") {\n                    newError = fieldError;\n                }\n\n                if (typeof fieldError === \"boolean\" && fieldError) {\n                    newError = \"Field is not valid.\";\n                }\n\n                if (typeof fieldError === \"object\" && \"key\" in fieldError) {\n                    const translatedMessage = translate(\n                        fieldError.key,\n                        fieldError.message,\n                    );\n\n                    newError = translatedMessage;\n                }\n\n                setError(key as Path<TVariables>, {\n                    message: newError,\n                });\n            }\n\n            refineCoreProps?.onMutationError?.(error, _variables, _context);\n        },\n    });\n\n    const { queryResult, onFinish, formLoading, onFinishAutoSave } =\n        useFormCoreResult;\n\n    useEffect(() => {\n        const data = queryResult?.data?.data;\n        if (!data) return;\n\n        /**\n         * get registered fields from react-hook-form\n         */\n        const registeredFields = Object.keys(flattenObjectKeys(getValues()));\n\n        /**\n         * set values from query result as default values\n         */\n        registeredFields.forEach((path) => {\n            const hasValue = has(data, path);\n            const dataValue = get(data, path);\n\n            /**\n             * set value if the path exists in the query result even if the value is null\n             */\n            if (hasValue) {\n                setValue(path as Path<TVariables>, dataValue);\n            }\n        });\n    }, [queryResult?.data, setValue, getValues]);\n\n    useEffect(() => {\n        const subscription = watch((values: any, { type }: { type?: any }) => {\n            if (type === \"change\") {\n                onValuesChange(values);\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [watch]);\n\n    const onValuesChange = (changeValues: TVariables) => {\n        if (warnWhenUnsavedChanges) {\n            setWarnWhen(true);\n        }\n\n        if (refineCoreProps?.autoSave) {\n            setWarnWhen(false);\n\n            const onFinishProps = refineCoreProps.autoSave?.onFinish;\n\n            if (onFinishProps) {\n                return onFinishAutoSave(onFinishProps(changeValues));\n            }\n\n            return onFinishAutoSave(changeValues);\n        }\n\n        return changeValues;\n    };\n\n    const handleSubmit: UseFormHandleSubmit<TVariables> =\n        (onValid, onInvalid) => async (e) => {\n            setWarnWhen(false);\n            return handleSubmitReactHookForm(onValid, onInvalid)(e);\n        };\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: (e: React.BaseSyntheticEvent) => {\n            handleSubmit(onFinish, () => false)(e);\n        },\n    };\n\n    return {\n        ...useHookFormResult,\n        handleSubmit,\n        refineCore: useFormCoreResult,\n        saveButtonProps,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { FieldValues, Path } from \"react-hook-form\";\nimport { BaseRecord, HttpError } from \"@refinedev/core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    steps: {\n        currentStep: number;\n        gotoStep: (step: number) => void;\n    };\n};\n\nexport type UseStepsFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    /**\n     * @description Configuration object for the steps.\n     * `defaultStep`: Allows you to set the initial step.\n     * \n     * `isBackValidate`: Whether to validation the current step when going back.\n     * @type `{\n      defaultStep?: number;\n      isBackValidate?: boolean;\n      }`\n     * @default `defaultStep = 0` `isBackValidate = false`\n     */\n    stepsProps?: {\n        defaultStep?: number;\n        isBackValidate?: boolean;\n    };\n};\n\nexport const useStepsForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    stepsProps,\n    ...rest\n}: UseStepsFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseStepsFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const { defaultStep = 0, isBackValidate = false } = stepsProps ?? {};\n    const [current, setCurrent] = useState(defaultStep);\n\n    const useHookFormResult = useForm<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TContext,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        ...rest,\n    });\n\n    const {\n        trigger,\n        getValues,\n        setValue,\n        formState: { dirtyFields },\n        refineCore: { queryResult },\n    } = useHookFormResult;\n\n    useEffect(() => {\n        const data = queryResult?.data?.data;\n        if (!data) return;\n\n        const registeredFields = Object.keys(getValues());\n        Object.entries(data).forEach(([key, value]) => {\n            const name = key as Path<TVariables>;\n\n            if (registeredFields.includes(name)) {\n                if (!dirtyFields[name]) {\n                    setValue(name, value);\n                }\n            }\n        });\n    }, [queryResult?.data, current, setValue, getValues]);\n\n    const go = (step: number) => {\n        let targetStep = step;\n\n        if (step < 0) {\n            targetStep = 0;\n        }\n\n        setCurrent(targetStep);\n    };\n\n    const gotoStep = async (step: number) => {\n        if (step === current) {\n            return;\n        }\n\n        if (step < current && !isBackValidate) {\n            go(step);\n            return;\n        }\n\n        const isValid = await trigger();\n        if (isValid) {\n            go(step);\n        }\n    };\n\n    return {\n        ...useHookFormResult,\n        steps: {\n            currentStep: current,\n            gotoStep,\n        },\n    };\n};\n","import { useCallback } from \"react\";\nimport {\n    BaseKey,\n    BaseRecord,\n    FormWithSyncWithLocationParams,\n    HttpError,\n    useGo,\n    useModal,\n    useParsed,\n    useResource,\n    useUserFriendlyName,\n    useTranslate,\n    useWarnAboutChange,\n    useInvalidate,\n} from \"@refinedev/core\";\nimport { FieldValues } from \"react-hook-form\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\nimport React from \"react\";\n\nexport type UseModalFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    modal: {\n        submit: (values: TVariables) => void;\n        close: () => void;\n        show: (id?: BaseKey) => void;\n        visible: boolean;\n        title: string;\n    };\n};\n\nexport type UseModalFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> & {\n    /**\n     * @description Configuration object for the modal.\n     * `defaultVisible`: Initial visibility state of the modal.\n     * \n     * `autoSubmitClose`: Whether the form should be submitted when the modal is closed.\n     * \n     * `autoResetForm`: Whether the form should be reset when the form is submitted.\n     * @type `{\n      defaultVisible?: boolean;\n      autoSubmitClose?: boolean;\n      autoResetForm?: boolean;\n      }`\n     * @default `defaultVisible = false` `autoSubmitClose = true` `autoResetForm = true`\n     */\n    modalProps?: {\n        defaultVisible?: boolean;\n        autoSubmitClose?: boolean;\n        autoResetForm?: boolean;\n    };\n} & FormWithSyncWithLocationParams;\n\nexport const useModalForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    modalProps,\n    refineCoreProps,\n    syncWithLocation,\n    ...rest\n}: UseModalFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseModalFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const invalidate = useInvalidate();\n    const [initiallySynced, setInitiallySynced] = React.useState(false);\n\n    const translate = useTranslate();\n\n    const { resource: resourceProp, action: actionProp } =\n        refineCoreProps ?? {};\n\n    const {\n        resource,\n        action: actionFromParams,\n        identifier,\n    } = useResource(resourceProp);\n\n    const parsed = useParsed();\n    const go = useGo();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const action = actionProp ?? actionFromParams ?? \"\";\n\n    const syncingId = !(\n        typeof syncWithLocation === \"object\" &&\n        syncWithLocation?.syncId === false\n    );\n\n    const syncWithLocationKey =\n        typeof syncWithLocation === \"object\" && \"key\" in syncWithLocation\n            ? syncWithLocation.key\n            : resource && action && syncWithLocation\n            ? `modal-${identifier}-${action}`\n            : undefined;\n\n    const {\n        defaultVisible = false,\n        autoSubmitClose = true,\n        autoResetForm = true,\n    } = modalProps ?? {};\n\n    const useHookFormResult = useForm<\n        TQueryFnData,\n        TError,\n        TVariables,\n        TContext,\n        TData,\n        TResponse,\n        TResponseError\n    >({\n        refineCoreProps: {\n            ...refineCoreProps,\n            meta: {\n                ...(syncWithLocationKey\n                    ? { [syncWithLocationKey]: undefined }\n                    : {}),\n                ...refineCoreProps?.meta,\n            },\n        },\n        ...rest,\n    });\n\n    const {\n        reset,\n        refineCore: { onFinish, id, setId, autoSaveProps },\n        saveButtonProps,\n        handleSubmit,\n    } = useHookFormResult;\n\n    const { visible, show, close } = useModal({\n        defaultVisible,\n    });\n\n    React.useEffect(() => {\n        if (initiallySynced === false && syncWithLocationKey) {\n            const openStatus = parsed?.params?.[syncWithLocationKey]?.open;\n            if (typeof openStatus === \"boolean\") {\n                if (openStatus) {\n                    show();\n                }\n            } else if (typeof openStatus === \"string\") {\n                if (openStatus === \"true\") {\n                    show();\n                }\n            }\n\n            if (syncingId) {\n                const idFromParams = parsed?.params?.[syncWithLocationKey]?.id;\n                if (idFromParams) {\n                    setId?.(idFromParams);\n                }\n            }\n\n            setInitiallySynced(true);\n        }\n    }, [syncWithLocationKey, parsed, syncingId, setId]);\n\n    React.useEffect(() => {\n        if (initiallySynced === true) {\n            if (visible && syncWithLocationKey) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: {\n                            ...parsed?.params?.[syncWithLocationKey],\n                            open: true,\n                            ...(syncingId && id && { id }),\n                        },\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            } else if (syncWithLocationKey && !visible) {\n                go({\n                    query: {\n                        [syncWithLocationKey]: undefined,\n                    },\n                    options: { keepQuery: true },\n                    type: \"replace\",\n                });\n            }\n        }\n    }, [id, visible, show, syncWithLocationKey, syncingId]);\n\n    const submit = async (values: TVariables) => {\n        await onFinish(values);\n\n        if (autoSubmitClose) {\n            close();\n        }\n\n        if (autoResetForm) {\n            reset();\n        }\n    };\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const handleClose = useCallback(() => {\n        if (\n            autoSaveProps.status === \"success\" &&\n            refineCoreProps?.autoSave?.invalidateOnClose\n        ) {\n            invalidate({\n                id,\n                invalidates: refineCoreProps.invalidates || [\n                    \"list\",\n                    \"many\",\n                    \"detail\",\n                ],\n                dataProviderName: refineCoreProps.dataProviderName,\n                resource: identifier,\n            });\n        }\n\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setId?.(undefined);\n        close();\n    }, [warnWhen, autoSaveProps.status]);\n\n    const handleShow = useCallback(\n        (showId?: BaseKey) => {\n            if (typeof showId !== \"undefined\") {\n                setId?.(showId);\n            }\n            const needsIdToOpen = action === \"edit\" || action === \"clone\";\n            const hasId =\n                typeof showId !== \"undefined\" || typeof id !== \"undefined\";\n            if (needsIdToOpen ? hasId : true) {\n                show();\n            }\n        },\n        [id],\n    );\n\n    const title = translate(\n        `${identifier}.titles.${actionProp}`,\n        undefined,\n        `${getUserFriendlyName(\n            `${actionProp} ${\n                resource?.meta?.label ??\n                resource?.options?.label ??\n                resource?.label ??\n                identifier\n            }`,\n            \"singular\",\n        )}`,\n    );\n\n    return {\n        modal: {\n            submit,\n            close: handleClose,\n            show: handleShow,\n            visible,\n            title,\n        },\n        ...useHookFormResult,\n        saveButtonProps: {\n            ...saveButtonProps,\n            onClick: (e) => handleSubmit(submit)(e),\n        },\n    };\n};\n"],"mappings":"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","names":["useEffect","get","has","useHookForm","useFormCore","useWarnAboutChange","useTranslate","useRefineContext","flattenObjectKeys","useForm","__name","refineCoreProps","warnWhenUnsavedChangesProp","disableServerSideValidationProp","rest","options","useRefineContext","disableServerSideValidation","translate","useTranslate","warnWhenUnsavedChangesRefine","setWarnWhen","useWarnAboutChange","warnWhenUnsavedChanges","useHookFormResult","useHookForm","watch","setValue","getValues","handleSubmitReactHookForm","setError","useFormCoreResult","useFormCore","error","_variables","_context","_a","_b","errors","key","flattenObjectKeys","fieldError","newError","queryResult","onFinish","formLoading","onFinishAutoSave","useEffect","data","path","hasValue","has","dataValue","get","subscription","values","type","onValuesChange","changeValues","onFinishProps","handleSubmit","onValid","onInvalid","e","useEffect","useState","useStepsForm","__name","stepsProps","rest","defaultStep","isBackValidate","current","setCurrent","useState","useHookFormResult","useForm","trigger","getValues","setValue","dirtyFields","queryResult","useEffect","_a","data","registeredFields","key","value","name","go","step","targetStep","useCallback","useGo","useModal","useParsed","useResource","useUserFriendlyName","useTranslate","useWarnAboutChange","useInvalidate","React","useModalForm","__name","modalProps","refineCoreProps","syncWithLocation","rest","_a","_b","invalidate","useInvalidate","initiallySynced","setInitiallySynced","React","translate","useTranslate","resourceProp","actionProp","resource","actionFromParams","identifier","useResource","parsed","useParsed","go","useGo","getUserFriendlyName","useUserFriendlyName","action","syncingId","syncWithLocationKey","defaultVisible","autoSubmitClose","autoResetForm","useHookFormResult","useForm","reset","onFinish","id","setId","autoSaveProps","saveButtonProps","handleSubmit","visible","show","close","useModal","_c","_d","openStatus","idFromParams","submit","values","warnWhen","setWarnWhen","useWarnAboutChange","handleClose","useCallback","handleShow","showId","title","e"]}