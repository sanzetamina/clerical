{"version":3,"sources":["../../src/inferencers/mantine/index.tsx","../../src/inferencers/mantine/show.tsx","../../src/create-inferencer/index.tsx","../../src/utilities/get-fieldable-keys/index.ts","../../src/utilities/pick-data-provider/index.tsx","../../src/utilities/pick-inferred-field/index.ts","../../src/utilities/prettier-format/index.ts","../../src/utilities/pretty-spaces/index.ts","../../src/field-inferencers/relation.ts","../../src/utilities/remove-relation-suffix/index.ts","../../src/utilities/pretty-string/index.ts","../../src/utilities/translate-pretty-string/index.ts","../../src/utilities/to-singular/index.ts","../../src/utilities/to-plural/index.ts","../../src/utilities/replace-exports/index.ts","../../src/utilities/replace-imports/index.ts","../../src/utilities/resource-from-inferred/index.ts","../../src/utilities/component-name/index.ts","../../src/utilities/jsx/index.ts","../../src/utilities/prepare-live-code/index.ts","../../src/utilities/remove-hidden-code/index.ts","../../src/utilities/accessor/index.ts","../../src/utilities/print-imports/index.ts","../../src/utilities/is-id-key/index.ts","../../src/utilities/get-option-label/index.ts","../../src/utilities/no-op/index.ts","../../src/utilities/get-variable-name/index.ts","../../src/utilities/get-meta-props/index.ts","../../src/utilities/id-quote-wrapper/index.ts","../../src/compose-inferencers/index.ts","../../src/compose-transformers/index.ts","../../src/field-inferencers/array.ts","../../src/field-inferencers/boolean.ts","../../src/field-inferencers/date.ts","../../src/field-inferencers/email.ts","../../src/field-inferencers/image.ts","../../src/field-inferencers/nullish.ts","../../src/field-inferencers/number.ts","../../src/field-inferencers/object.ts","../../src/field-inferencers/richtext.ts","../../src/field-inferencers/text.ts","../../src/field-inferencers/url.ts","../../src/field-inferencers/index.ts","../../src/field-transformers/basic-to-relation.ts","../../src/field-transformers/image-by-key.ts","../../src/field-transformers/relation-by-resource.ts","../../src/field-transformers/relation-to-fieldable.ts","../../src/field-transformers/index.ts","../../src/components/live/index.tsx","../../src/components/shared-code-viewer/index.tsx","../../src/use-infer-fetch/index.tsx","../../src/use-relation-fetch/index.ts","../../src/inferencers/mantine/error.tsx","../../src/inferencers/mantine/loading.tsx","../../src/inferencers/mantine/list.tsx","../../src/inferencers/mantine/create.tsx","../../src/inferencers/mantine/edit.tsx"],"sourcesContent":["import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport { ShowInferencer } from \"./show\";\nimport { ListInferencer } from \"./list\";\nimport { CreateInferencer } from \"./create\";\nimport { EditInferencer } from \"./edit\";\n\nimport type { InferencerComponentProps } from \"../../types\";\n\nconst MantineInferencer: React.FC<InferencerComponentProps> = ({\n    action: actionFromProps,\n    id: idFromProps,\n    ...props\n}) => {\n    const { action, id } = useResource();\n\n    switch (actionFromProps ?? action) {\n        case \"show\":\n            return <ShowInferencer {...props} id={idFromProps ?? id} />;\n        case \"create\":\n            return <CreateInferencer {...props} id={idFromProps ?? id} />;\n        case \"edit\":\n            return <EditInferencer {...props} id={idFromProps ?? id} />;\n        default:\n            return <ListInferencer {...props} id={idFromProps ?? id} />;\n    }\n};\n\nexport { MantineInferencer };\nexport {\n    ShowInferencer as MantineShowInferencer,\n    renderer as MantineShowRenderer,\n} from \"./show\";\nexport {\n    EditInferencer as MantineEditInferencer,\n    renderer as MantineEditRenderer,\n} from \"./edit\";\nexport {\n    ListInferencer as MantineListInferencer,\n    renderer as MantineListRenderer,\n} from \"./list\";\nexport {\n    CreateInferencer as MantineCreateInferencer,\n    renderer as MantineCreateRenderer,\n} from \"./create\";\nexport * from \"../../types\";\n","import {\n    Show,\n    TagField,\n    TextField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n    NumberField,\n} from \"@refinedev/mantine\";\nimport { Title, Group, Image } from \"@mantine/core\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    accessor,\n    printImports,\n    toSingular,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for show page in Mantine\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"show\",\n    );\n    const recordName = \"record\";\n    const imports: Array<[element: string, module: string]> = [\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"useShow\", \"@refinedev/core\"],\n        [\"Show\", \"@refinedev/mantine\"],\n        [\"Title\", \"@mantine/core\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                if (field.multiple) {\n                    imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                    let ids = accessor(recordName, field.key);\n\n                    if (field.accessor) {\n                        ids = `${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )})`;\n                    }\n\n                    return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName} && !!${ids}?.length,\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getMany\",\n                    )}\n                });\n                `;\n                }\n                imports.push([\"useOne\", \"@refinedev/core\"]);\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                        recordName,\n                        field.key,\n                        field.accessor,\n                        false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = getVariableName(field.key, \"Data\");\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (field.multiple) {\n                const variableDataLength =\n                    accessor(recordName, field.key) + \"?.length\";\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} && ${variableDataLength} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `Not Handled.`;\n                                } else {\n                                    const mapItemName = toSingular(\n                                        field.resource?.name,\n                                    );\n                                    const val = accessor(\n                                        mapItemName,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                    );\n                                    return `\n                                    {record?.${field.key}?.length ? <Group spacing=\"xs\">\n                                        {${variableName}?.data?.map((${mapItemName}: any) => <TagField key={${val}} value={${val}} />)}\n                                    </Group> : <></>}\n                                    `;\n                                }\n                            } else {\n                                return `Not Handled.`;\n                            }\n                        } else {\n                            return `not-handled - relation with multiple but no resource`;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n            }\n\n            if (field.fieldable) {\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n                `;\n            }\n\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                {${variableIsLoading} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `{${accessor(\n                                        `${variableName}?.data`,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                        ' + \" \" + ',\n                                    )}}`;\n                                } else {\n                                    return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                                }\n                            } else {\n                                return `{${variableName}?.data}`;\n                            }\n                        } else {\n                            return `{${variableName}?.data?.id}`;\n                        }\n                    })()}\n                    </>\n                )}\n                \n                `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (field.type === \"text\") {\n            imports.push([\"TextField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <TagField value={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"Image\", \"@mantine/core\"]);\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <Image sx={{ maxWidth: 200 }} src={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Image sx={{ maxWidth: 200 }} src={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n                `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push([\"EmailField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <TagField value={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <EmailField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push([\"UrlField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <TagField value={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <UrlField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any, index: number) => (\n                        <TagField value={${val}} key={index} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <BooleanField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" && \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <DateField value={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <DateField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + ' ' + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/mantine\"]);\n\n            return jsx`\n                <Title mt=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <MarkdownField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )}} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberField\", \"@refinedev/mantine\"]);\n\n            if (field.multiple) {\n                imports.push(\n                    [\"TagField\", \"@refinedev/mantine\"],\n                    [\"Group\", \"@mantine/core\"],\n                );\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <Group spacing=\"xs\">\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <TagField value={${val}} key={${val}} />\n                    ))}\n                </Group>\n            `;\n            }\n            return jsx`\n                <Title my=\"xs\" order={5}>${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                    noQuotes: true,\n                })}</Title>\n                <NumberField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )} ?? \"\"} />\n            `;\n        }\n        return undefined;\n    };\n\n    const wrapper = (code?: string) => {\n        if (code) {\n            return jsx`\n                ${code}\n            `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n                return wrapper(textFields(field));\n            case \"number\":\n                return wrapper(numberFields(field));\n            case \"richtext\":\n                return wrapper(richtextFields(field));\n            case \"email\":\n                return wrapper(emailFields(field));\n            case \"image\":\n                return wrapper(imageFields(field));\n            case \"date\":\n                return wrapper(dateFields(field));\n            case \"boolean\":\n                return wrapper(booleanFields(field));\n            case \"url\":\n                return wrapper(urlFields(field));\n            case \"relation\":\n                return wrapper(renderRelationFields(field));\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { queryResult } = useShow(${\n            isCustomPage\n                ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${idQuoteWrapper(id)},\n                    ${getMetaProps(\n                        resource?.identifier ?? resource?.name,\n                        meta,\n                        \"getOne\",\n                    )}\n                }`\n                : getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )\n                ? `{ ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      \"getOne\",\n                  )} }`\n                : \"\"\n        });\n        const { data, isLoading } = queryResult;\n    \n        const ${recordName} = data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Show isLoading={isLoading}>\n                ${renderedFields.join(\"\")}\n            </Show>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n    type: \"show\",\n    additionalScope: [\n        [\n            \"@refinedev/mantine\",\n            \"RefineMantine\",\n            {\n                Show,\n                TagField,\n                TextField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n                NumberField,\n            },\n        ],\n        [\"@mantine/core\", \"MantineCore\", { Title, Group, Image }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport {\n    CreateInferencer,\n    InferencerComponentProps,\n    InferencerResultComponent,\n    InferField,\n} from \"../types\";\n\nimport { composeInferencers } from \"../compose-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../components\";\nimport { useInferFetch } from \"../use-infer-fetch\";\nimport { useRelationFetch } from \"../use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        hideCodeViewerInProduction,\n        meta,\n        id,\n    }: {\n        resourceName?: string;\n        hideCodeViewerInProduction?: boolean;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        meta?: InferencerComponentProps[\"meta\"];\n        id?: string | number;\n    }) => {\n        const { resource, resources } = useResource(resourceName);\n        const { i18nProvider } = useContext(TranslationContext);\n\n        const { resource: resourceFromURL } = useResource();\n\n        const {\n            data: record,\n            datas: records,\n            loading: recordLoading,\n            initial: isInitialLoad,\n            error: inferError,\n        } = useInferFetch(type, resourceName ?? resource?.name, id, meta);\n\n        const inferSingleField = (\n            key: string,\n            value: any,\n            record: Record<string, unknown>,\n        ) => {\n            const inferResult = infer(key, value, record, infer, type);\n\n            if (inferResult) {\n                if (resource) {\n                    const transformed = transform(\n                        [inferResult] as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields?.[0];\n                }\n            }\n\n            return undefined;\n        };\n\n        const inferSingleRecord = (record: Record<string, unknown>) => {\n            const inferred = Object.keys(record)\n                .map((key) => {\n                    const value = record[key];\n\n                    const inferResult = inferSingleField(key, value, record);\n\n                    return inferResult;\n                })\n                .filter(Boolean);\n\n            return inferred as InferField[];\n        };\n\n        const inferMultipleRecords = (records: Record<string, unknown>[]) => {\n            // infer each record\n            // get the most common one for each field\n            // also get the first occurence of the each most common field/key and construct a fresh record from them.\n            // return the fresh record and the inferred fields\n\n            const inferred = records.map((record) => inferSingleRecord(record));\n\n            const allUniqueKeys = records\n                .flatMap((record) => Object.keys(record))\n                .filter((key, index, self) => self.indexOf(key) === index);\n\n            const mostCommonRecord: Record<string, unknown> = {};\n\n            const mostCommonFields = allUniqueKeys.map((key) => {\n                const fields = inferred.map((fields) =>\n                    fields.find((field) => field.key === key),\n                );\n\n                const mostCommonField = fields.reduce(\n                    (acc, field, index) => {\n                        if (!field) {\n                            return acc;\n                        }\n\n                        const count = fields.filter(\n                            (f) =>\n                                f?.key === field.key && f?.type === field.type,\n                        ).length;\n\n                        if (count > acc.count) {\n                            mostCommonRecord[key] = records[index][key];\n\n                            return {\n                                count,\n                                field,\n                            };\n                        }\n\n                        return acc;\n                    },\n                    { count: 0, field: undefined } as {\n                        count: number;\n                        field: undefined | InferField;\n                    },\n                );\n\n                return mostCommonField.field;\n            });\n\n            const response = {\n                commonRecord: mostCommonRecord,\n                inferredFields: mostCommonFields,\n            };\n\n            return response;\n        };\n\n        const [rawResults, recordInUse]: [\n            InferField[],\n            Record<string, unknown> | undefined,\n        ] = React.useMemo(() => {\n            if (records && (type === \"list\" || type === \"create\")) {\n                const inferred = inferMultipleRecords(records);\n\n                return [\n                    inferred.inferredFields as InferField[],\n                    inferred.commonRecord,\n                ];\n            }\n            if (record) {\n                const inferred = Object.keys(record)\n                    .map((key) => {\n                        const value = record[key];\n\n                        const inferResult = infer(\n                            key,\n                            value,\n                            record,\n                            infer,\n                            type,\n                        );\n\n                        return inferResult;\n                    })\n                    .filter(Boolean);\n\n                if (resource) {\n                    const transformed = transform(\n                        inferred as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                        type,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return [customTransformedFields, record];\n                }\n\n                return [[], record];\n            }\n\n            return [[], undefined];\n        }, [record, records, resources, resource, fieldTransformer]);\n\n        const {\n            fields: results,\n            loading: relationLoading,\n            // initial: relationInitial,\n        } = useRelationFetch({\n            record: recordInUse,\n            fields: rawResults,\n            infer,\n            meta,\n        });\n\n        const clearedFields = React.useMemo(() => {\n            const cleanFields: InferField[] = [];\n\n            results.forEach((f, idx, arr) => {\n                if (f.resource) {\n                    if (\n                        cleanFields.findIndex(\n                            (el) => el.resource?.name === f.resource?.name,\n                        ) > -1\n                    ) {\n                        return;\n                    }\n                    const duplicates = arr.filter((field, index) => {\n                        if (index !== idx) {\n                            const currentFieldHasResource = f.resource;\n                            const fieldHasResource = field.resource;\n                            const hasAnyIdentifier =\n                                field.resource?.identifier ||\n                                f.resource?.identifier;\n                            const isSameResource = hasAnyIdentifier\n                                ? field.resource?.identifier ===\n                                  f.resource?.identifier\n                                : field.resource?.name === f.resource?.name;\n\n                            return (\n                                currentFieldHasResource &&\n                                fieldHasResource &&\n                                isSameResource\n                            );\n                        } else {\n                            return false;\n                        }\n                    });\n                    if (duplicates.length > 0) {\n                        if (type === \"create\" || type === \"edit\") {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== true &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        } else {\n                            let toPush: InferField | undefined = undefined;\n\n                            [f, ...duplicates].find((el) => {\n                                if (\n                                    el.fieldable !== false &&\n                                    toPush === undefined\n                                ) {\n                                    toPush = el;\n                                }\n                            });\n\n                            if (toPush) {\n                                cleanFields.push(toPush);\n                            } else {\n                                cleanFields.push(f);\n                            }\n                        }\n                    } else {\n                        cleanFields.push(f);\n                    }\n                } else {\n                    cleanFields.push(f);\n                }\n            });\n\n            return cleanFields;\n        }, [results, type]);\n\n        const code = React.useMemo(() => {\n            if (\n                !recordLoading &&\n                !relationLoading &&\n                !isInitialLoad &&\n                resource\n            ) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: clearedFields,\n                    infer,\n                    meta,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                    i18n: !!i18nProvider,\n                });\n            }\n            return \"\";\n        }, [\n            resource,\n            resources,\n            clearedFields,\n            recordLoading,\n            relationLoading,\n        ]);\n\n        const hiddenCodeViewer =\n            process.env.NODE_ENV !== \"development\" &&\n            hideCodeViewerInProduction;\n\n        return (\n            <>\n                {LoadingComponent && (recordLoading || relationLoading) && (\n                    <LoadingComponent />\n                )}\n                {!recordLoading && !relationLoading && (\n                    <>\n                        <LiveComponent\n                            fetchError={\n                                !recordLoading && inferError\n                                    ? inferError\n                                    : !recordLoading &&\n                                      !isInitialLoad &&\n                                      !record\n                            }\n                            code={prepareLiveCode(\n                                code,\n                                componentName(\n                                    resource?.meta?.label ??\n                                        resource?.options?.label ??\n                                        resource?.label ??\n                                        resource?.name ??\n                                        \"Resource\",\n                                    type,\n                                ),\n                            )}\n                            errorComponent={ErrorComponent}\n                            additionalScope={additionalScope}\n                        />\n                        {typeof CodeViewerComponent !== \"undefined\" &&\n                        !hiddenCodeViewer ? (\n                            <CodeViewerComponent\n                                code={removeHiddenCode(code)}\n                                loading={recordLoading || relationLoading}\n                            />\n                        ) : null}\n                    </>\n                )}\n            </>\n        );\n    };\n\n    const InferencerComponent: InferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        meta,\n        hideCodeViewerInProduction,\n        id,\n    }) => {\n        const { resource: resourceItem } = useResource(resource ?? name);\n\n        const key = `${\n            resourceItem?.identifier ?? resourceItem?.name\n        }-${type}-${id}`;\n\n        return (\n            <Inferencer\n                hideCodeViewerInProduction={hideCodeViewerInProduction}\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                meta={meta ?? {}}\n                key={key}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n    key: string,\n    data: Record<string, unknown>,\n): string | string[] | undefined => {\n    const fieldableProperties = [\n        \"name\",\n        \"label\",\n        \"title\",\n        \"count\",\n        \"content\",\n        \"username\",\n        \"nickname\",\n        \"login\",\n        \"firstName\",\n        \"lastName\",\n        \"url\",\n    ];\n\n    if (urlLikeKeyRegexp.test(key)) {\n        fieldableProperties.unshift(\"url\");\n    }\n\n    const firstAvailable = fieldableProperties.find(\n        (fkey) => fkey in data && !!data[fkey],\n    );\n\n    if (firstAvailable) {\n        if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n            return [\"firstName\", \"lastName\"];\n        }\n\n        return firstAvailable;\n    }\n\n    return undefined;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { pickNotDeprecated } from \"@refinedev/core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n    return resource?.options?.dataProviderName;\n};\n","import { InferField } from \"../../types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n    inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n    // filter out null and false values and sort by priority then return the first one\n    // priority is a number, the higher the number the higher the priority\n    // if there is no priority, it will be 0\n    const field = (\n        [...inferredFields].filter(Boolean) as Array<InferField>\n    ).sort((a, b) => (b.priority || 0) - (a.priority || 0))[0];\n\n    if (!field) {\n        return null;\n    }\n\n    return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n    try {\n        const formatted = prettier.format(code, {\n            parser: \"typescript\",\n            plugins: [tsParser],\n            arrowParens: \"always\",\n            trailingComma: \"all\",\n            semi: true,\n            tabWidth: 4,\n            printWidth: 80,\n        });\n\n        return formatted;\n    } catch (error) {\n        console.warn(\"Formatting error in inferencer\", error);\n        return code;\n    }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n    return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n    const isRelation = relationRegexp.test(key);\n    const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n        return {\n            key,\n            relation: true,\n            multiple: isBasicArray ? true : false,\n            type: \"relation\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { relationRegexp } from \"../../field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n    return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n    const clean = removeRelationSuffix(str);\n    // Convert camelCase to camel Case\n    const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n    // Convert snake_case to snake case\n    const snakeCase = camelCase.replace(/_/g, \" \");\n    // Convert kebab-case to kebab case\n    const kebabCase = snakeCase.replace(/-/g, \" \");\n    // Capitalize the string\n    const capitalized = kebabCase\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n    return capitalized;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { prettyString } from \"../pretty-string\";\nimport { InferField } from \"../../types\";\n\nexport const translatePrettyString = (payload: {\n    resource: IResourceItem;\n    field: InferField;\n    i18n?: boolean;\n    noQuotes?: boolean;\n    noBraces?: boolean;\n}) => {\n    const { resource, field, i18n } = payload;\n\n    if (i18n) {\n        const translate = `translate(\"${resource.name}.fields.${field.key}\")`;\n\n        if (payload.noBraces) {\n            return `${translate}`;\n        }\n        return `{${translate}}`;\n    }\n\n    const prettedString = prettyString(field.key);\n    if (payload.noQuotes) {\n        return prettedString;\n    }\n\n    return `\"${prettedString}\"`;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n    return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n    return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n    // remove export statements from the code but keep the variables\n    const newCode = code.replace(\n        /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n        \"$1 $2 = \",\n    );\n\n    // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n    const lines = newCode.split(\"\\n\");\n    const newLines = lines.filter(\n        (line) => !line.trim().startsWith(\"export default\"),\n    );\n\n    return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n    content: string,\n    modules: Record<string, string> = {},\n): string => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports = new Set();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    for (const match of matches) {\n        const [, defaultImport, namedImports, namespaceImport, packageName] =\n            match;\n\n        if (packageName in modules) {\n            const importName = modules[packageName];\n\n            /**\n             * React and its exports are already available in the scope of the code.\n             * Restructuring them in import statements will cause errors.\n             * To avoid that, we are not replacing the import statements for React.\n             * This way, generated code can have \"react\" imports without any errors.\n             */\n            if (packageName === \"react\") {\n                continue;\n            }\n\n            if (defaultImport) {\n                imports.add(\n                    `const { default: ${defaultImport} } = ${importName};`,\n                );\n            }\n\n            if (namedImports) {\n                imports.add(\n                    `const${namedImports.replace(\n                        nameChangeRegex,\n                        `$1: $3$4`,\n                    )} = ${importName};`,\n                );\n            }\n\n            if (namespaceImport) {\n                imports.add(`const ${namespaceImport} = ${importName};`);\n            }\n        }\n    }\n\n    return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport { IResourceItem } from \"@refinedev/core\";\n\nimport { InferField } from \"../../types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n    field: InferField | false | null,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    if (!field) {\n        return undefined;\n    }\n\n    const resource = resources.find((el) => {\n        const stripped = removeRelationSuffix(field.key);\n\n        return (\n            el.name === stripped ||\n            el.name ===\n                (pluralize.isPlural(stripped)\n                    ? stripped\n                    : pluralize.plural(stripped)) ||\n            el.name ===\n                (pluralize.isSingular(stripped)\n                    ? stripped\n                    : pluralize.singular(stripped))\n        );\n    });\n\n    return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n    resourceName: string,\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    fallbackResourceName = \"Inferred\",\n) => {\n    // replace all non-alphanumeric characters with a space\n    const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n    // convert to singular\n    const singular = pluralize.singular(sanitized);\n    // prettify the string without spaces\n    const prettified = prettyString(singular).replace(/ /g, \"\");\n    // if prettified is empty, return the fallbackResourceName\n    const resourceComponentName = prettified || fallbackResourceName;\n    // get pretty type name\n    const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n    // if resourceName is not starting with an alphabetical character, return Type + resourceName\n    // e.g. \"123users\" => \"List123Users\"\n    if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n        return `${prettyType}${resourceComponentName}`;\n    }\n    // e.g. \"users\" => \"UserList\"\n    return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n    if (!expression) {\n        return \"\";\n    }\n\n    if (Array.isArray(expression)) {\n        return expression.join(\"\");\n    }\n\n    if (typeof expression === \"string\") {\n        return expression;\n    }\n\n    if (typeof expression === \"object\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"function\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"number\") {\n        return String(expression);\n    }\n\n    if (typeof expression === \"boolean\" && expression) {\n        return \"true\";\n    }\n\n    return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n    strings: TemplateStringsArray,\n    ...expressions: unknown[]\n) => {\n    const parsed = strings.reduce(\n        (result, currentString, i) =>\n            `${result}${currentString}${handleExpression(expressions[i])}`,\n        \"\",\n    );\n\n    return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n    return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n    // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n    // these blocks can present multiple times in the code\n\n    return code?.replace(\n        /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n        \"\",\n    );\n};\n","import { InferField } from \"../../types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n    return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n    let base = `${variableName}`;\n\n    if (key) {\n        base += \"?.\";\n        if (shouldDotAccess(key)) {\n            base += key;\n        } else {\n            base += `['${key}']`;\n        }\n    }\n\n    if (accessor) {\n        base += `?.`;\n        if (shouldDotAccess(accessor)) {\n            base += accessor;\n        } else {\n            base += `['${accessor}']`;\n        }\n    }\n\n    return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n    const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n    return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n    joiner: string | false = ' + \" \" + ',\n): string => {\n    if (Array.isArray(accessor)) {\n        if (joiner) {\n            return accessorMultiple(variable, key, accessor).join(joiner);\n        } else {\n            return accessorSingle(variable, key, accessor[0]);\n        }\n    } else {\n        return accessorSingle(variable, key, accessor);\n    }\n};\n\nexport const dotAccessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n) => {\n    let str = variable;\n\n    if (key) {\n        str += `.${key}`;\n    }\n\n    if (accessor) {\n        if (Array.isArray(accessor)) {\n            str += `.${accessor[0]}`;\n        } else {\n            str += `.${accessor}`;\n        }\n    }\n\n    return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n","import { ImportElement } from \"../../types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n    const byModule = imports.reduce((acc, [element, module, isDefault]) => {\n        if (!acc[module]) {\n            acc[module] = [] as Array<\n                string | [variable: string, isDefault?: boolean]\n            >;\n        }\n\n        if (!acc[module].includes(element)) {\n            if (isDefault) {\n                acc[module].push([element, true]);\n            } else {\n                acc[module].push(element);\n            }\n        }\n\n        return acc;\n    }, {} as Record<string, Array<string | [variable: string, isDefault?: boolean]>>);\n\n    const lines = Object.entries(byModule).map(([module, elements]) => {\n        const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n        const named = elements.filter((e) => typeof e === \"string\");\n        const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n        const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n        return `import ${defaultStr}${\n            defaultStr && namedStr ? \", \" : \"\"\n        }${namedStr} from \"${module}\";`;\n    });\n\n    return lines;\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","import { InferField } from \"../../types\";\n\nexport const getOptionLabel = (field: InferField) => {\n    if (field.relationInfer && field.relationInfer.accessor) {\n        if (Array.isArray(field.relationInfer.accessor)) {\n            return `optionLabel: \"${field.relationInfer.accessor[0]}\",`;\n        }\n        if (field.relationInfer.accessor !== \"title\") {\n            return `optionLabel: \"${field.relationInfer.accessor}\",`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n    // if fieldKey is number, return with prefix\n    // e.g. (12345, Data) => \"data12345\"\n    if (Number.isInteger(Number(fieldKey))) {\n        const lowerCaseFirstLetter =\n            suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n        return lowerCaseFirstLetter + fieldKey;\n    }\n\n    // if fieldKey is start with numbers, replace the numbers with empty string\n    // e.g. 123users => \"users\"\n    const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n    // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n    // e.g. \"users/account\" => \"users-account\"\n    const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n        /[^a-zA-Z0-9]/g,\n        \"-\",\n    );\n\n    // Convert to PascalCase\n    const prettyPluralVariableName = prettyString(\n        fieldKeyWithoutInvalidCharacters,\n    ).replace(/ /g, \"\");\n\n    const variableName = `${\n        prettyPluralVariableName.charAt(0).toLowerCase() +\n        prettyPluralVariableName.slice(1)\n    }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n    return variableName;\n};\n","import { InferencerComponentProps } from \"../../types\";\n\ntype Action = keyof NonNullable<InferencerComponentProps[\"meta\"]>[string];\n\nexport const getMetaProps = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    action?: Action,\n) => {\n    if (meta && action && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n        const metaValue = metaValues?.[action] ?? metaValues?.default;\n        if (metaValue) {\n            return `meta: ${JSON.stringify(metaValue)},`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n\nexport const pickMeta = (\n    identifier?: string,\n    meta?: InferencerComponentProps[\"meta\"],\n    actions?: Action[],\n) => {\n    if (meta && actions && identifier) {\n        const metaValues = identifier ? meta[identifier] : {};\n\n        const actionsToCheck = [...actions, \"default\"] as Action[];\n\n        const metaValue = actionsToCheck.reduce((acc, action) => {\n            return acc ?? metaValues?.[action];\n        }, undefined as Record<string, unknown> | undefined);\n\n        if (metaValue) {\n            return metaValue;\n        }\n    }\n    return undefined;\n};\n","/**\n * If the `id` is a string, it will be wrapped in quotes.\n */\nexport const idQuoteWrapper = (\n    id: string | number | undefined,\n): string | number | undefined => {\n    if (id === undefined) return id;\n    if (typeof id === \"string\") return `\"${id}\"`;\n\n    return id;\n};\n","import { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        value,\n        record,\n        infer = fieldInferencer,\n        type,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, value, record, infer, type),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n        type,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer, type);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import { FieldInferencer, InferType } from \"../types\";\n\nexport const arrayInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isArray = Array.isArray(value);\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if (isArray) {\n        if (!isBasicArray) {\n            const inferredInnerType = infer(key, value[0], record, infer, type);\n            if (inferredInnerType) {\n                return {\n                    ...inferredInnerType,\n                    key,\n                    multiple: true,\n                    priority: 1,\n                };\n            } else {\n                return false;\n            }\n        }\n        const basicType = infer(key, value[0], record, infer, type) || {\n            type: \"string\" as InferType,\n        };\n\n        return {\n            key,\n            multiple: true,\n            priority: 1,\n            type: basicType?.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n    const isBoolean = typeof value === \"boolean\";\n\n    if (isBoolean) {\n        return {\n            key,\n            type: \"boolean\",\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from \"../types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nconst dateSeparators = [\"/\", \":\", \"-\", \".\"];\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n    const isDateField =\n        dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n\n    const isValidDateString =\n        typeof value === \"string\" && dayjs(value).isValid();\n\n    const hasDateSeparator =\n        typeof value === \"string\" &&\n        dateSeparators.some((s) => value.includes(s));\n\n    if (hasDateSeparator && (isDateField || isValidDateString)) {\n        return {\n            key,\n            type: \"date\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst emailRegexp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n    const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n    if (isValidEmail) {\n        return {\n            key,\n            type: \"email\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n    const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n    if (isImageURI) {\n        return {\n            key,\n            type: \"image\",\n            priority: 2,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n    const isUndefined = typeof value === \"undefined\";\n    const isNull = value === null;\n\n    if (isUndefined || isNull) {\n        return null;\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n    const isNonEmptyString = typeof value === \"string\" && value.length > 0;\n    const isNotNaN = !isNaN(value as number);\n\n    const isNumericString = isNonEmptyString && isNotNaN;\n    const isNumber = typeof value === \"number\";\n\n    const isNumeric = isNumericString || isNumber;\n\n    if (isNumeric) {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"../utilities\";\nimport { FieldInferencer } from \"../types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer,\n    type,\n) => {\n    const isNotNull = value !== null;\n    const isNotArray = !Array.isArray(value);\n    const isObject = typeof value === \"object\";\n\n    if (isNotNull && isNotArray && isObject) {\n        const onlyHasId =\n            Object.keys(value).length === 1 &&\n            idPropertyRegexp.test(Object.keys(value)[0]);\n\n        const hasId = Object.keys(value).some((k) => idPropertyRegexp.test(k));\n\n        if (onlyHasId) {\n            return {\n                key,\n                type: \"relation\",\n                relation: true,\n                accessor: \"id\",\n                priority: 1,\n            };\n        }\n\n        const fieldableKeys = getFieldableKeys(\n            key,\n            value as Record<string, unknown>,\n        );\n\n        const hasFieldableKeys = fieldableKeys\n            ? fieldableKeys.length > 0\n            : false;\n\n        if (hasFieldableKeys && fieldableKeys) {\n            const innerFieldKey =\n                fieldableKeys && Array.isArray(fieldableKeys)\n                    ? fieldableKeys[0]\n                    : fieldableKeys;\n\n            const innerFieldType = infer(\n                innerFieldKey,\n                (value as Record<string, unknown>)[innerFieldKey],\n                value as Record<string, unknown>,\n                infer,\n                type,\n            );\n\n            if (innerFieldType) {\n                const accessor = Array.isArray(fieldableKeys)\n                    ? fieldableKeys.map((el) => {\n                          if (innerFieldType.accessor) {\n                              return `${el}.${\n                                  Array.isArray(innerFieldType.accessor)\n                                      ? innerFieldType.accessor[0]\n                                      : innerFieldType.accessor\n                              }`;\n                          } else {\n                              return el;\n                          }\n                      })\n                    : innerFieldType.accessor\n                    ? Array.isArray(innerFieldType.accessor)\n                        ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n                        : `${fieldableKeys}.${innerFieldType.accessor}`\n                    : fieldableKeys;\n\n                if (\n                    innerFieldType?.type === \"text\" &&\n                    (type === \"create\" || type === \"edit\") &&\n                    hasId\n                ) {\n                    return {\n                        key,\n                        type: \"relation\",\n                        relation: true,\n                        accessor: \"id\",\n                        priority: 1,\n                    };\n                }\n\n                return {\n                    ...innerFieldType,\n                    fieldable: true,\n                    key,\n                    accessor: accessor,\n                    priority: 1,\n                };\n            }\n        }\n\n        return {\n            key,\n            fieldable: false,\n            type: \"object\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n    const isText = typeof value === \"string\";\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"../types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    imageInfer,\n    nullishInfer,\n    numberInfer,\n    objectInfer,\n    relationInfer,\n    richtextInfer,\n    textInfer,\n    urlInfer,\n];\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"../utilities\";\nimport { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    // resource,\n    // record,\n    // infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer, type);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import React from \"react\";\nimport * as RefineCore from \"@refinedev/core\";\n\nimport { LivePreview, LiveProvider, ContextProps } from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"../../utilities\";\nimport { AdditionalScopeType, LiveComponentProps } from \"../../types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n    [\"react\", \"React\", React],\n    [\"@refinedev/core\", \"RefineCore\", RefineCore],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n    {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n    fetchError,\n    code,\n    additionalScope,\n    errorComponent: ErrorComponent,\n}) => {\n    const sanitized =\n        (code &&\n            replaceExports(\n                replaceImports(\n                    code,\n                    [...defaultScope, ...(additionalScope ?? [])].reduce(\n                        (\n                            acc,\n                            [\n                                packageName,\n                                variableName,\n                                _module,\n                                ignoreReplacement,\n                            ],\n                        ) => {\n                            if (ignoreReplacement) {\n                                return acc;\n                            }\n                            return {\n                                ...acc,\n                                [packageName]: variableName,\n                            };\n                        },\n                        {},\n                    ),\n                ),\n            )) ??\n        \"\";\n\n    const scope = React.useMemo(() => {\n        return {\n            React,\n            ...React,\n            ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n                (acc, [_packageName, variableName, packageContent]) => {\n                    return {\n                        ...acc,\n                        [variableName]: packageContent,\n                    };\n                },\n                {},\n            ),\n        };\n    }, [additionalScope]);\n\n    const ErrorComponentWithError = React.useMemo(() => {\n        const LiveErrorComponent = () => {\n            const { error } = React.useContext(InferencerLiveContext);\n\n            if (ErrorComponent) {\n                return (\n                    <ErrorComponent\n                        error={\n                            error\n                                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                                : typeof fetchError === \"string\"\n                                ? fetchError\n                                : fetchError\n                                ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                                : undefined\n                        }\n                    />\n                );\n            }\n\n            return null;\n        };\n\n        return LiveErrorComponent;\n    }, [ErrorComponent, fetchError]);\n\n    return (\n        <LiveProvider\n            Context={InferencerLiveContext}\n            code={sanitized}\n            scope={scope}\n            noInline\n        >\n            {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n            <ErrorComponentWithError />\n        </LiveProvider>\n    );\n};\n","import React, { SVGProps } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\nimport { CreateInferencerConfig } from \"../../types\";\nimport { prettierFormat } from \"../../utilities\";\n\nexport const SharedCodeViewer: CreateInferencerConfig[\"codeViewerComponent\"] =\n    ({ code: rawCode, loading }) => {\n        const code = React.useMemo(() => {\n            return prettierFormat(rawCode ?? \"\");\n        }, [rawCode]);\n\n        const [settled, setSettled] = React.useState(false);\n        const [isModalVisible, setIsModalVisible] = React.useState(false);\n        const [isVisible, setIsVisible] = React.useState(false);\n        const [isColumn, setIsColumn] = React.useState(false);\n        const [isModalButtonHover, setIsModalButtonHover] =\n            React.useState(false);\n\n        // Settled Check\n        React.useEffect(() => {\n            if (!loading) {\n                const timeout = setTimeout(() => {\n                    setSettled(true);\n                }, 300);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }\n\n            return () => undefined;\n        }, [loading]);\n\n        // Visibility Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 449px)\");\n                if (mediaQuery.matches) {\n                    setIsVisible(false);\n                } else {\n                    setIsVisible(true);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsVisible(false);\n                    } else {\n                        setIsVisible(true);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        // Flex Direction Check\n        React.useEffect(() => {\n            if (typeof window !== \"undefined\") {\n                const mediaQuery = window.matchMedia(\"(max-width: 1280px)\");\n                if (mediaQuery.matches) {\n                    setIsColumn(true);\n                } else {\n                    setIsColumn(false);\n                }\n\n                const handleResize = () => {\n                    if (mediaQuery.matches) {\n                        setIsColumn(true);\n                    } else {\n                        setIsColumn(false);\n                    }\n                };\n\n                window.addEventListener(\"resize\", handleResize);\n\n                return () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                };\n            }\n\n            return () => undefined;\n        }, []);\n\n        if (code && !loading) {\n            return (\n                <>\n                    {isVisible && (\n                        <div\n                            className=\"refine-inferencer--code-viewer\"\n                            style={{\n                                position: \"sticky\",\n                                bottom: \"24px\",\n                                paddingTop: \"24px\",\n                                left: 0,\n                                right: 0,\n                                width: \"100%\",\n                                zIndex: 10,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                transition: \"all 0.2s ease\",\n                                opacity: settled && !isModalVisible ? 1 : 0,\n                                transform:\n                                    settled && !isModalVisible\n                                        ? \"translateY(0)\"\n                                        : \"translateY(100px)\",\n                            }}\n                        >\n                            <div\n                                style={{\n                                    width: \"calc(100% - calc(64px * 2))\",\n                                    maxWidth: \"1080px\",\n                                    padding: \"20px\",\n                                    backgroundColor: \"#1A1A1A\",\n                                    boxShadow:\n                                        \"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)\",\n                                    borderRadius: \"16px\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"space-between\",\n                                    flexDirection: isColumn ? \"column\" : \"row\",\n                                    gap: \"12px\",\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        alignItems: \"flex-start\",\n                                        gap: \"8px\",\n                                    }}\n                                >\n                                    <div>\n                                        <InfoIcon />\n                                    </div>\n                                    <div\n                                        style={{\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            color: \"#ffffff\",\n                                        }}\n                                    >\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            Most of the page code is\n                                            auto-generated by the{\" \"}\n                                            <span\n                                                style={{\n                                                    textDecoration: \"underline\",\n                                                }}\n                                            >\n                                                Inferencer\n                                            </span>{\" \"}\n                                            feature, based on your backend data\n                                            structure.\n                                        </p>\n                                        <p\n                                            style={{\n                                                padding: 0,\n                                                margin: 0,\n                                            }}\n                                        >\n                                            While this is an excellent way to\n                                            experiment with refine,{\" \"}\n                                            <span style={{ fontWeight: 600 }}>\n                                                it&apos;s not intended to be\n                                                used on production.\n                                            </span>\n                                        </p>\n                                    </div>\n                                </div>\n                                <div>\n                                    <button\n                                        onPointerEnter={() =>\n                                            setIsModalButtonHover(true)\n                                        }\n                                        onPointerLeave={() =>\n                                            setIsModalButtonHover(false)\n                                        }\n                                        onClick={() => setIsModalVisible(true)}\n                                        style={{\n                                            appearance: \"none\",\n                                            border: \"none\",\n                                            padding: \"10px 16px\",\n                                            borderRadius: \"4px\",\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            background: \"#0080FF\",\n                                            color: \"#ffffff\",\n                                            fontSize: \"14px\",\n                                            lineHeight: \"20px\",\n                                            fontWeight: 600,\n                                            gap: \"8px\",\n                                            cursor: \"pointer\",\n                                            transition: \"all 0.2s ease\",\n                                            transform: isModalButtonHover\n                                                ? \"scale(1.025)\"\n                                                : undefined,\n                                            filter: isModalButtonHover\n                                                ? \"brightness(1.1)\"\n                                                : undefined,\n                                        }}\n                                    >\n                                        <OpenIcon\n                                            style={{\n                                                flexShrink: 0,\n                                            }}\n                                        />\n                                        <span>\n                                            Show the auto-generated code\n                                        </span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <CodeModal\n                        visible={isModalVisible}\n                        onClose={() => setIsModalVisible(false)}\n                        code={code}\n                    />\n                </>\n            );\n        }\n\n        return null;\n    };\n\nconst CodeModal = ({\n    visible,\n    onClose,\n    code = \"\",\n}: {\n    visible: boolean;\n    onClose: () => void;\n    code?: string;\n}) => {\n    const modalRef = React.useRef<HTMLDivElement>(null);\n\n    const [isCopied, setIsCopied] = React.useState(false);\n    const [isCopyHover, setIsCopyHover] = React.useState(false);\n    const [isCloseHover, setIsCloseHover] = React.useState(false);\n    const [isLearnMoreHover, setIsLearnMoreHover] = React.useState(false);\n\n    // On Outside Click\n    React.useEffect(() => {\n        if (typeof document !== \"undefined\") {\n            const onOutsideClick = (event: PointerEvent) => {\n                if (\n                    modalRef.current &&\n                    !modalRef.current.contains(event.target as Node)\n                ) {\n                    onClose();\n                }\n            };\n\n            document.addEventListener(\"pointerdown\", onOutsideClick);\n\n            return () => {\n                document.removeEventListener(\"pointerdown\", onOutsideClick);\n            };\n        }\n\n        return () => undefined;\n    }, [onClose]);\n\n    // onCopy Handler\n    const onCopy = () => {\n        if (typeof navigator !== \"undefined\") {\n            navigator.clipboard.writeText(code);\n            setIsCopied(true);\n            setTimeout(() => {\n                setIsCopied(false);\n            }, 1000);\n        }\n    };\n\n    const title = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                style={{\n                    fontWeight: 700,\n                    fontSize: \"20px\",\n                    lineHeight: \"32px\",\n                    color: \"#0D0D0D\",\n                }}\n            >\n                Auto-generated code by Inferencer\n            </div>\n            <button\n                onClick={onClose}\n                onPointerEnter={() => setIsCloseHover(true)}\n                onPointerLeave={() => setIsCloseHover(false)}\n                style={{\n                    flexShrink: 0,\n                    appearance: \"none\",\n                    border: \"none\",\n                    background: \"none\",\n                    padding: 0,\n                    margin: 0,\n                    outline: \"none\",\n                    borderRadius: \"50px\",\n                    width: \"32px\",\n                    height: \"32px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.15s ease\",\n                    transform: isCloseHover ? \"scale(1.05)\" : undefined,\n                    filter: isCloseHover ? \"brightness(0.8)\" : undefined,\n                }}\n            >\n                <CloseIcon />\n            </button>\n        </div>\n    );\n\n    const highlight = (\n        <div\n            style={{\n                fontSize: \"13px\",\n                borderRadius: \"8px\",\n                flex: \"1\",\n                overflow: \"scroll\",\n                background: \"#1E1E1E\",\n            }}\n        >\n            <Highlight\n                {...defaultProps}\n                theme={theme}\n                code={code}\n                language=\"tsx\"\n            >\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={className}\n                        style={{\n                            ...style,\n                            padding: \"14px 14px 14px 14px\",\n                            margin: \"0\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    >\n                        {tokens.map((line, i) => (\n                            <div\n                                key={i}\n                                {...getLineProps({\n                                    line,\n                                    key: i,\n                                })}\n                            >\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({\n                                            token,\n                                            key,\n                                        })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        </div>\n    );\n\n    const buttons = (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-end\",\n                gap: \"16px\",\n            }}\n        >\n            <button\n                onPointerEnter={() => setIsCopyHover(true)}\n                onPointerLeave={() => setIsCopyHover(false)}\n                onClick={onCopy}\n                style={{\n                    appearance: \"none\",\n                    height: \"40px\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"#0080FF\",\n                    color: \"#ffffff\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    position: \"relative\",\n                    overflow: \"hidden\",\n                    transition: \"filter 0.2s ease\",\n                    transform: isCopyHover ? \"scale(1.025)\" : \"scale(1)\",\n                    filter: isCopyHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <ClipboardIcon\n                    style={{\n                        flexShrink: 0,\n                        marginTop: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }}\n                />\n                <span>Copy Generated Code</span>\n                <div\n                    style={{\n                        position: \"absolute\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        top: 0,\n                        left: 0,\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        background: \"#0080FF\",\n                        transition: \"all 0.2s ease\",\n                        transform: isCopied\n                            ? \"translateY(0)\"\n                            : \"translateY(40px)\",\n                    }}\n                >\n                    <ClipboardIcon\n                        style={{\n                            flexShrink: 0,\n                            marginTop: \"-2px\",\n                            marginBottom: \"-2px\",\n                        }}\n                    />\n                    <span>Copied!</span>\n                </div>\n            </button>\n            <a\n                onPointerEnter={() => setIsLearnMoreHover(true)}\n                onPointerLeave={() => setIsLearnMoreHover(false)}\n                href=\"https://refine.dev/docs/packages/documentation/inferencer\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                style={{\n                    appearance: \"none\",\n                    textDecoration: \"none\",\n                    border: \"none\",\n                    padding: \"10px 16px\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: \"rgba(0, 128, 255, 0.1)\",\n                    color: \"#0080FF\",\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                    fontWeight: 600,\n                    gap: \"8px\",\n                    cursor: \"pointer\",\n                    transition: \"all 0.2s ease\",\n                    transform: isLearnMoreHover ? \"scale(1.025)\" : undefined,\n                    filter: isLearnMoreHover ? \"brightness(1.1)\" : undefined,\n                }}\n            >\n                <OpenIcon\n                    style={{\n                        flexShrink: 0,\n                    }}\n                />\n                <span>Learn more about inferencer</span>\n            </a>\n        </div>\n    );\n\n    return (\n        <div\n            className=\"refine-inferencer--code-viewer-modal\"\n            style={{\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                zIndex: 9999,\n                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n                transition: \"all 0.2s ease\",\n                opacity: visible ? 1 : 0,\n                pointerEvents: visible ? \"all\" : \"none\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            <div\n                ref={modalRef}\n                style={{\n                    transform: visible\n                        ? \"scale(1) translateY(0px)\"\n                        : \"scale(0) translateY(-200px)\",\n                    transition: \"all 0.25s cubic-bezier(.35,1.29,.81,1.08)\",\n                    transitionDelay: \"0.25\",\n                    width: \"calc(100% - calc(32px * 2))\",\n                    height: \"calc(100% - calc(32px * 2))\",\n                    backgroundColor: \"#fff\",\n                    maxWidth: \"640px\",\n                    maxHeight: \"720px\",\n                    borderRadius: \"8px\",\n                    padding: \"16px\",\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        gap: \"16px\",\n                    }}\n                >\n                    {title}\n                    {highlight}\n                    {buttons}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst InfoIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#0080FF\"\n            fillRule=\"evenodd\"\n            d=\"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst OpenIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={16}\n        height={16}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            d=\"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z\"\n        />\n        <path\n            fill=\"currentColor\"\n            d=\"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z\"\n        />\n    </svg>\n);\n\nconst CloseIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={32}\n        height={32}\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"#A6A6A6\"\n            fillRule=\"evenodd\"\n            d=\"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z\"\n            clipRule=\"evenodd\"\n        />\n    </svg>\n);\n\nconst ClipboardIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={20}\n        height={20}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        {...props}\n    >\n        <path\n            fill=\"currentColor\"\n            fillRule=\"evenodd\"\n            d=\"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z\"\n            clipRule=\"evenodd\"\n        />\n        <path fill=\"currentColor\" d=\"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z\" />\n    </svg>\n);\n","import React from \"react\";\nimport { useDataProvider, useResource, BaseKey } from \"@refinedev/core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"../utilities\";\nimport { InferencerComponentProps } from \"../types\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    resourceNameOrRouteName?: string,\n    idFromProps?: string | number,\n    meta?: InferencerComponentProps[\"meta\"],\n) => {\n    const {\n        resource,\n        id: idFromURL,\n        resources,\n    } = useResource(resourceNameOrRouteName);\n\n    const id = idFromProps ?? idFromURL;\n\n    const dataProvider = useDataProvider();\n\n    const [error, setError] = React.useState<string | undefined>(undefined);\n\n    const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n        undefined,\n    );\n    const [datas, setDatas] = React.useState<\n        Array<Record<string, unknown>> | undefined\n    >(undefined);\n    const [initial, setInitial] = React.useState<boolean>(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (recordItemId: BaseKey | undefined) => {\n            const dataProviderName =\n                dataProviderFromResource(resource) ??\n                pickDataProvider(resource?.name, undefined, resources);\n            const dp = dataProvider(dataProviderName);\n\n            setLoading(true);\n            setError(undefined);\n\n            try {\n                if (type === \"list\" || type === \"create\") {\n                    if (resource) {\n                        const response = await dp.getList({\n                            resource: resource?.name,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getList\"],\n                            ),\n                        });\n                        const r = response.data?.[0];\n\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setDatas(response.data);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n                if ((type === \"edit\" || type === \"show\") && recordItemId) {\n                    if (resource) {\n                        const response = await dp.getOne({\n                            resource: resource?.name,\n                            id: recordItemId,\n                            meta: pickMeta(\n                                resource?.identifier ?? resource?.name,\n                                meta,\n                                [\"getOne\"],\n                            ),\n                        });\n                        const r = response.data;\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n            } catch (error) {\n                console.warn(\n                    \"An error occured while fetching the resource data. Please check the error message below:\",\n                    error,\n                );\n                setError(\n                    `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resource?.name}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                );\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n        },\n        [type, dataProvider, resource, resources],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (!loading && !data) {\n            resolver(id);\n        }\n    }, [resolver, id]);\n\n    return {\n        data,\n        datas,\n        loading,\n        initial,\n        error,\n    };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@refinedev/core\";\n\nimport {\n    dataProviderFromResource,\n    removeRelationSuffix,\n    toPlural,\n    toSingular,\n} from \"../utilities\";\nimport {\n    FieldInferencer,\n    InferField,\n    InferencerComponentProps,\n    ResourceInferenceAttempt,\n} from \"../types\";\nimport { get } from \"lodash-es\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\ntype UseRelationFetchProps = {\n    record?: Record<string, unknown>;\n    fields?: (InferField | null | false)[];\n    infer: FieldInferencer;\n    meta?: InferencerComponentProps[\"meta\"];\n};\n\nexport const useRelationFetch = ({\n    record,\n    fields,\n    infer,\n    meta,\n}: UseRelationFetchProps) => {\n    const dataProvider = useDataProvider();\n\n    const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n    const [initial, setInitial] = React.useState(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (allFields: (InferField | false | null)[]) => {\n            console.groupCollapsed(\n                \"@refinedev/inferencer is trying to detect relations\",\n            );\n            const attempts: Array<ResourceInferenceAttempt> = [];\n            setLoading(true);\n            try {\n                const promises = allFields.map(async (field) => {\n                    if (field && (field.relation || field.canRelation)) {\n                        if (record) {\n                            if (field.relationInfer) {\n                                return field;\n                            }\n                            const dataProviderName = dataProviderFromResource(\n                                field.resource,\n                            );\n                            const dp = dataProvider(dataProviderName);\n\n                            const isMultiple = field.multiple;\n\n                            const requestId = Array.isArray(field.accessor)\n                                ? undefined\n                                : field.multiple\n                                ? (record[field.key] as Array<unknown>).map(\n                                      (el) => {\n                                          return field.accessor\n                                              ? get(el, field.accessor)\n                                              : el;\n                                      },\n                                  )[0]\n                                : field.accessor\n                                ? get(record[field.key], field.accessor)\n                                : record[field.key];\n\n                            if (requestId && field.resource) {\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany({\n                                            resource: field.resource.name,\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: field.resource.name,\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                field.resource?.identifier ??\n                                                    field.resource?.name,\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n\n                                    const relationInfer = infer(\n                                        \"__\",\n                                        record,\n                                        {},\n                                        infer,\n                                    );\n\n                                    return {\n                                        ...field,\n                                        relationInfer,\n                                    };\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n                                    return {\n                                        ...field,\n                                        relationInfer: null,\n                                    };\n                                }\n                            }\n\n                            if (requestId) {\n                                let responseData;\n                                let isPlural;\n\n                                try {\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    if (isMultiple && dp.getMany) {\n                                        const { data } = await dp.getMany?.({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            ids: [requestId],\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                [\"getMany\"],\n                                            ),\n                                        });\n                                        record = data?.[0];\n                                    } else {\n                                        const { data } = await dp.getOne({\n                                            resource: toPlural(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            id: requestId,\n                                            meta: pickMeta(\n                                                toPlural(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta,\n                                                isMultiple\n                                                    ? [\"getMany\", \"getOne\"]\n                                                    : [\"getOne\"],\n                                            ),\n                                        });\n                                        record = data;\n                                    }\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    responseData = record;\n                                    isPlural = true;\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    let record:\n                                        | Record<string, unknown>\n                                        | undefined = {};\n\n                                    try {\n                                        if (isMultiple && dp.getMany) {\n                                            const { data } = await dp.getMany({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    [\"getMany\"],\n                                                ),\n                                                ids: [requestId],\n                                            });\n                                            record = data?.[0];\n                                        } else {\n                                            const { data } = await dp.getOne({\n                                                resource: toSingular(\n                                                    removeRelationSuffix(\n                                                        field.key,\n                                                    ),\n                                                ),\n                                                meta: pickMeta(\n                                                    toSingular(\n                                                        removeRelationSuffix(\n                                                            field.key,\n                                                        ),\n                                                    ),\n                                                    meta,\n                                                    isMultiple\n                                                        ? [\"getMany\", \"getOne\"]\n                                                        : [\"getOne\"],\n                                                ),\n                                                id: requestId,\n                                            });\n                                            record = data;\n                                        }\n\n                                        attempts.push({\n                                            status: \"success\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        responseData = record;\n                                        isPlural = false;\n                                    } catch (error) {\n                                        attempts.push({\n                                            status: \"error\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        return {\n                                            ...field,\n                                            relationInfer: null,\n                                        };\n                                    }\n                                }\n\n                                const relationInfer = infer(\n                                    \"__\",\n                                    responseData,\n                                    {},\n                                    infer,\n                                );\n\n                                const resourceNameWithoutRelationSuffix =\n                                    removeRelationSuffix(field.key);\n\n                                return {\n                                    ...field,\n                                    relation: true,\n                                    type: \"relation\",\n                                    resource: {\n                                        name: isPlural\n                                            ? toPlural(\n                                                  resourceNameWithoutRelationSuffix,\n                                              )\n                                            : toSingular(\n                                                  resourceNameWithoutRelationSuffix,\n                                              ),\n                                    },\n                                    fieldable: false,\n                                    canRelation: undefined,\n                                    relationInfer,\n                                };\n                            }\n\n                            return {\n                                ...field,\n                                relationInfer: null,\n                            };\n                        }\n                    }\n                    return field;\n                });\n\n                const results = await Promise.all(promises);\n\n                setUpdatedFields(results.filter((el) => el) as InferField[]);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            } catch (error) {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n            setTimeout(() => {\n                console.log(\n                    `Tried to detect relations with ${\n                        attempts.length\n                    } attempts and succeeded with ${\n                        attempts.filter((el) => el.status === \"success\").length\n                    } attempts.`,\n                );\n                console.groupEnd();\n\n                console.info(\n                    `@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works`,\n                );\n            }, 500);\n        },\n        [dataProvider, record],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (\n            !loading &&\n            fields &&\n            fields.length > 0 &&\n            updatedFields.length === 0\n        ) {\n            resolver(fields);\n        }\n    }, [resolver, loading, fields, resolver]);\n\n    return {\n        fields: updatedFields,\n        loading,\n        initial,\n    };\n};\n","import React from \"react\";\n\nimport { Alert, Center } from \"@mantine/core\";\nimport { IconAlertCircle } from \"@tabler/icons\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n    error,\n}) => {\n    if (error) {\n        return (\n            <Center style={{ minHeight: 300 }}>\n                <Alert title=\"Error\" color=\"red\" icon={<IconAlertCircle />}>\n                    <div dangerouslySetInnerHTML={{ __html: error ?? \"\" }} />\n                </Alert>\n            </Center>\n        );\n    }\n\n    return null;\n};\n","import React from \"react\";\n\nimport { LoadingOverlay } from \"@mantine/core\";\n\nimport { CreateInferencerConfig } from \"../../types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n    () => {\n        return <LoadingOverlay visible />;\n    };\n","import {\n    List,\n    EditButton,\n    ShowButton,\n    DeleteButton,\n    TagField,\n    EmailField,\n    UrlField,\n    BooleanField,\n    DateField,\n    MarkdownField,\n} from \"@refinedev/mantine\";\nimport { useTable } from \"@refinedev/react-table\";\nimport { ScrollArea, Table, Pagination, Group, Image } from \"@mantine/core\";\nimport { flexRender } from \"@tanstack/react-table\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    accessor,\n    printImports,\n    dotAccessor,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    RendererContext,\n} from \"../../types\";\n\nconst getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n\n/**\n * a renderer function for list page in Mantine\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"list\",\n    );\n    const recordName = \"tableData?.data\";\n    const imports: Array<[element: string, module: string]> = [\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"useTable\", \"@refinedev/react-table\"],\n        [\"ColumnDef\", \"@tanstack/react-table\"],\n        [\"flexRender\", \"@tanstack/react-table\"],\n        [\"ScrollArea\", \"@mantine/core\"],\n        [\"List\", \"@refinedev/mantine\"],\n        [\"Table\", \"@mantine/core\"],\n        [\"Pagination\", \"@mantine/core\"],\n        [\"Group\", \"@mantine/core\"],\n        [\"EditButton\", \"@refinedev/mantine\"],\n        [\"ShowButton\", \"@refinedev/mantine\"],\n        [\"DeleteButton\", \"@refinedev/mantine\"],\n    ];\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"GetManyResponse\", \"@refinedev/core\"]);\n                imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                let idsString = \"\";\n\n                if (field.multiple) {\n                    idsString = `[].concat(...(${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []))`;\n                } else {\n                    idsString = `${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []`;\n                }\n\n                return `\n                const { data: ${getVariableName(field.key, \"Data\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getMany\",\n                    )}\n                });\n                `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const relationVariableNames = relationFields\n        ?.map((field) => {\n            if (field && field.resource) {\n                return getVariableName(field.key, \"Data\");\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = `${getVariableName(field.key, \"Data\")}?.data`;\n\n            if (Array.isArray(field.accessor)) {\n                // not handled - not possible case\n                return undefined;\n            }\n\n            const id = `id: \"${field.key}\"`;\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n            const accessorKey = getAccessorKey(field);\n\n            let cell = \"\";\n\n            // if multiple, then map it with tagfield\n            // if not, then just show the value\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mantine\"]);\n                let val = \"item\";\n\n                // for multiple\n                if (field?.relationInfer) {\n                    val = accessor(\n                        \"item\",\n                        undefined,\n                        field.relationInfer.accessor,\n                    );\n                }\n\n                cell = `cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        ${getVariableName(field.key, \"Data\")}: GetManyResponse;\n                    };\n\n                    const ${getVariableName(\n                        field.key,\n                    )} = getValue<any[]>()?.map((item) => {\n                        return meta.${getVariableName(\n                            field.key,\n                            \"Data\",\n                        )}?.data?.find(\n                            (resourceItems) => resourceItems.id === ${accessor(\n                                \"item\",\n                                undefined,\n                                field.accessor,\n                            )}\n                        );\n                    })\n\n                    return (\n                        <Group spacing=\"xs\">\n                            {${getVariableName(\n                                field.key,\n                            )}?.map((item, index) => (\n                                <TagField key={index} value={${val}} />\n                            ))}\n                        </Group>\n                    )\n                }\n            `;\n            } else {\n                if (field?.relationInfer) {\n                    cell = `cell: function render({ getValue, table }) {\n                        const meta = table.options.meta as {\n                            ${getVariableName(\n                                field.key,\n                                \"Data\",\n                            )}: GetManyResponse;\n                        };\n\n                        const ${getVariableName(\n                            field.key,\n                        )} = meta.${variableName}?.find(\n                            (item) => item.id == getValue<any>(),\n                        );\n\n                        return ${accessor(\n                            getVariableName(field.key),\n                            undefined,\n                            field?.relationInfer?.accessor,\n                        )} ?? \"Loading...\";\n                    },`;\n                } else {\n                    cell = \"\";\n                }\n            }\n\n            return `\n                {\n                    ${id},\n                    ${header},\n                    ${accessorKey},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"Image\", \"@mantine/core\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    ${field?.accessor ? \"try {\" : \"\"}\n                        return <Image sx={{ maxWidth: \"100px\" }} src={${accessor(\n                            \"getValue<any>()\",\n                            undefined,\n                            Array.isArray(field.accessor)\n                                ? field.accessor\n                                : undefined,\n                            \" + \",\n                        )}} />\n                    ${\n                        field?.accessor\n                            ? \" } catch (error) { return null; }\"\n                            : \"\"\n                    }\n                   \n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        ${field?.accessor ? \"try {\" : \"\"}\n                            return (\n                                <Group spacing=\"xs\">\n                                    {getValue<any[]>()?.map((item, index) => (\n                                        <Image src={${val}} key={index} sx={{ maxWidth: \"100px\" }} />\n                                    ))}\n                                </Group>\n                            )\n                        ${\n                            field?.accessor\n                                ? \" } catch (error) { return null; }\"\n                                : \"\"\n                        }\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push([\"EmailField\", \"@refinedev/mantine\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <EmailField value={${accessor(\n                        \"getValue<any>()\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                        ' + \" \" + ',\n                    )}} />\n                }\n            `;\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mantine\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<any>()?.map((item, index) => (\n                                    <TagField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push([\"UrlField\", \"@refinedev/mantine\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <UrlField value={${accessor(\n                        \"getValue<any>()\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                        \" + \",\n                    )}} />\n                }\n            `;\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mantine\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <TagField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field?.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@refinedev/mantine\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <BooleanField value={${accessor(\n                        \"getValue<any>()\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                        \" + \",\n                    )}} />\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <BooleanField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/mantine\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <DateField value={${accessor(\n                        \"getValue<any>()\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                        ' + \" \" + ',\n                    )}} />\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <DateField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field?.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/mantine\"]);\n\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <MarkdownField value={(${accessor(\n                        \"getValue<string>()\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                    )})?.slice(0, 80) + \"...\" } />\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<string[]>()?.map((item, index) => (\n                                    <MarkdownField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n\n        return undefined;\n    };\n\n    const basicFields = (field: InferField) => {\n        if (field && (field.type === \"text\" || field.type === \"number\")) {\n            const id = `id: \"${field.key}\"`;\n            const accessorKey = getAccessorKey(field);\n            const header = `header: ${translatePrettyString({\n                resource,\n                field,\n                i18n,\n                noBraces: true,\n            })}`;\n\n            let cell = \"\";\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mantine\"]);\n\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <Group spacing=\"xs\">\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <TagField value={${val}} key={index} />\n                                ))}\n                            </Group>\n                        )\n                    }\n                `;\n            }\n\n            if (!field.multiple && Array.isArray(field.accessor)) {\n                cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <>{${accessor(\n                                \"getValue()\",\n                                field.key,\n                                field.accessor,\n                            )}}</>\n                        );\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const {\n        canEdit,\n        canShow,\n        canDelete: canDeleteProp,\n        meta: resourceMeta,\n    } = resource ?? {};\n\n    const canDelete = canDeleteProp || resourceMeta?.canDelete;\n\n    if (canEdit) {\n        imports.push([\"EditButton\", \"@refinedev/mantine\"]);\n    }\n    if (canShow) {\n        imports.push([\"ShowButton\", \"@refinedev/mantine\"]);\n    }\n    if (canDelete) {\n        imports.push([\"DeleteButton\", \"@refinedev/mantine\"]);\n    }\n\n    const actionColumnTitle = i18n ? `translate(\"table.actions\")` : `\"Actions\"`;\n    const actionButtons =\n        canEdit || canShow || canDelete\n            ? jsx`\n    {\n        id: \"actions\",\n        accessorKey: \"id\",\n        header: ${actionColumnTitle},\n        cell: function render({ getValue }) {\n            return (\n                <Group spacing=\"xs\" noWrap>\n                    ${\n                        canShow\n                            ? jsx`\n                    <ShowButton\n                        hideText\n                        recordItemId={getValue() as string}\n                    />\n                    `\n                            : \"\"\n                    }\n                    ${\n                        canEdit\n                            ? jsx`<EditButton\n                        hideText\n                        recordItemId={getValue() as string}\n                    />`\n                            : \"\"\n                    }\n                    ${\n                        canDelete\n                            ? jsx`\n                    <DeleteButton\n                        hideText\n                        recordItemId={getValue() as string}\n                    />\n                    `\n                            : \"\"\n                    }\n                </Group>\n            );\n        },\n    },\n        `\n            : \"\";\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n                return basicFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    import React from \"react\";\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const columns = React.useMemo<ColumnDef<any>[]>(() => [\n            ${[...renderedFields, actionButtons].filter(Boolean).join(\",\")}\n        ], [${i18n ? \"translate\" : \"\"}]);\n\n        const {\n            getHeaderGroups,\n            getRowModel,\n            setOptions,\n            refineCore: {\n                setCurrent,\n                pageCount,\n                current,\n                tableQueryResult: { data: tableData },\n            },\n        } = useTable({\n            columns,\n            ${\n                isCustomPage\n                    ? `\n            refineCoreProps: {\n                resource: \"${resource.name}\",\n                ${getMetaProps(\n                    resource?.identifier ?? resource?.name,\n                    meta,\n                    \"getList\",\n                )}\n            }\n            `\n                    : getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getList\",\n                      )\n                    ? `refineCoreProps: { ${getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getList\",\n                      )} },`\n                    : \"\"\n            }\n        });\n\n        ${relationHooksCode}\n\n        setOptions((prev) => ({\n            ...prev,\n            meta: {\n                ...prev.meta,\n                ${relationVariableNames.join(\", \")}\n            },\n        }));\n\n        return (\n            <List>\n                <ScrollArea>\n                    <Table highlightOnHover>\n                        <thead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <tr key={headerGroup.id}>\n                                    {headerGroup.headers.map((header) => {\n                                        return (\n                                            <th key={header.id}>\n                                                {!header.isPlaceholder && (\n                                                    flexRender(\n                                                        header.column\n                                                            .columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )\n                                                )}\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            ))}\n                        </thead>\n                        <tbody>\n                            {getRowModel().rows.map((row) => {\n                                return (\n                                    <tr key={row.id}>\n                                        {row.getVisibleCells().map((cell) => {\n                                            return (\n                                                <td key={cell.id}>\n                                                    {flexRender(\n                                                        cell.column.columnDef.cell,\n                                                        cell.getContext(),\n                                                    )}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                </ScrollArea>    \n                <br />\n                <Pagination\n                    position=\"right\"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: InferencerResultComponent = createInferencer({\n    type: \"list\",\n    additionalScope: [\n        [\n            \"@refinedev/mantine\",\n            \"RefineMantine\",\n            {\n                List,\n                EditButton,\n                ShowButton,\n                DeleteButton,\n                TagField,\n                EmailField,\n                UrlField,\n                BooleanField,\n                DateField,\n                MarkdownField,\n            },\n        ],\n        [\"@refinedev/react-table\", \"RefineReactTable\", { useTable }],\n        [\n            \"@mantine/core\",\n            \"MantineCore\",\n            { ScrollArea, Table, Pagination, Group, Image },\n        ],\n        [\"@tanstack/react-table\", \"TanstackReactTable\", { flexRender }],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { Create, useForm, useSelect } from \"@refinedev/mantine\";\nimport {\n    MultiSelect,\n    Select,\n    TextInput,\n    Checkbox,\n    Textarea,\n    NumberInput,\n} from \"@mantine/core\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    printImports,\n    isIDKey,\n    getOptionLabel,\n    dotAccessor,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for create page in Mantine\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"create\",\n    );\n    const imports: Array<\n        [element: string, module: string, isDefaultImport?: boolean]\n    > = [\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Create\", \"@refinedev/mantine\"],\n        [\"useForm\", \"@refinedev/mantine\"],\n    ];\n    let initialValues: Record<string, any> = {};\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/mantine\"]);\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple\n                    ? []\n                    : field.accessor\n                    ? {\n                          [typeof field.accessor === \"string\"\n                              ? field.accessor\n                              : field.accessor[0]]: \"\",\n                      }\n                    : \"\",\n            };\n\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            if (field.multiple) {\n                imports.push([\"MultiSelect\", \"@mantine/core\"]);\n\n                return jsx`\n                    <MultiSelect mt=\"sm\" label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })} {...getInputProps(\"${dotAccessor(\n                    field.key,\n                    undefined,\n                )}\")} {...${variableName}} filterDataOnExactSearchMatch={undefined} />\n                `;\n            }\n\n            imports.push([\"Select\", \"@mantine/core\"]);\n\n            return jsx`\n                <Select mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} {...${variableName}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"email\" ||\n            field.type === \"date\" ||\n            field.type === \"url\"\n        ) {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            imports.push([\"TextInput\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <TextInput mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            return jsx`\n            {/* \n                Dropzone component is not included in \"@refinedev/mantine\" package.\n                To use a <Dropzone> component, you can follow the official documentation for Mantine.\n                \n                Docs: https://mantine.dev/others/dropzone/\n            */}\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Checkbox mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\", { type: 'checkbox' })} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            const textInputRender = textFields(field);\n\n            return `\n                {/* \n                    DatePicker component is not included in \"@refinedev/mantine\" package.\n                    To use a <DatePicker> component, you can follow the official documentation for Mantine.\n                    \n                    Docs: https://mantine.dev/dates/date-picker/\n                */}\n                ${textInputRender ?? \"\"}\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"Textarea\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Textarea mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} autosize {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            imports.push([\"NumberInput\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <NumberInput mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")}/>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const wrapper = (code?: string) => {\n        if (code) {\n            return jsx`\n                ${code}\n        `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"url\":\n            case \"text\":\n            case \"email\":\n                return wrapper(textFields(field));\n            case \"number\":\n                return wrapper(numberFields(field));\n            case \"richtext\":\n                return wrapper(richtextFields(field));\n            case \"image\":\n                return wrapper(imageFields(field));\n            case \"date\":\n                return wrapper(dateFields(field));\n            case \"boolean\":\n                return wrapper(booleanFields(field));\n            case \"relation\":\n                return wrapper(renderRelationFields(field));\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { formLoading } } = useForm({\n            initialValues: ${JSON.stringify(initialValues)},\n            ${\n                isCustomPage\n                    ? `refineCoreProps: {\n                        resource: \"${resource.name}\",\n                        action: \"create\",\n                        ${getMetaProps(\n                            resource.identifier ?? resource.name,\n                            meta,\n                            \"getOne\",\n                        )}\n                    }`\n                    : getMetaProps(\n                          resource.identifier ?? resource.name,\n                          meta,\n                          \"getOne\",\n                      )\n                    ? `refineCoreProps: { ${getMetaProps(\n                          resource.identifier ?? resource.name,\n                          meta,\n                          \"getOne\",\n                      )} }`\n                    : \"\"\n            }\n        });\n    \n        ${relationHooksCode}\n\n        return (\n            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n                ${renderedFields.join(\"\")}\n            </Create>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: InferencerResultComponent = createInferencer({\n    type: \"create\",\n    additionalScope: [\n        [\"@refinedev/mantine\", \"RefineMantine\", { Create, useForm, useSelect }],\n        [\n            \"@mantine/core\",\n            \"MantineCore\",\n            { MultiSelect, Select, TextInput, Checkbox, Textarea, NumberInput },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import { Edit, useForm, useSelect } from \"@refinedev/mantine\";\nimport {\n    MultiSelect,\n    Select,\n    TextInput,\n    Group,\n    Checkbox,\n    Textarea,\n    NumberInput,\n} from \"@mantine/core\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    accessor,\n    printImports,\n    isIDKey,\n    getOptionLabel,\n    dotAccessor,\n    noOp,\n    getVariableName,\n    translatePrettyString,\n    getMetaProps,\n    idQuoteWrapper,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for edit page in Mantine\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    meta,\n    isCustomPage,\n    id,\n    i18n,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"edit\",\n    );\n    const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n    const imports: Array<\n        [element: string, module: string, isDefaultImport?: boolean]\n    > = [\n        [\"IResourceComponentsProps\", \"@refinedev/core\"],\n        [\"Edit\", \"@refinedev/mantine\"],\n        [\"useForm\", \"@refinedev/mantine\"],\n    ];\n    let initialValues: Record<string, any> = {};\n\n    if (i18n) {\n        imports.push([\"useTranslate\", \"@refinedev/core\"]);\n    }\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@refinedev/mantine\"]);\n\n                let val = accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    false,\n                );\n\n                if (field.multiple && field.accessor) {\n                    val = `${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any) => ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                }\n\n                let effect = \"\";\n\n                if (field.multiple && field.accessor) {\n                    effect = `React.useEffect(() => {\n                        setFieldValue(\"${field.key}\", ${val});\n                    }, [${recordName}]);`;\n                }\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                        field?.resource?.identifier ?? field?.resource?.name,\n                        meta,\n                        \"getList\",\n                    )}\n                });\n\n                ${effect}\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple\n                    ? []\n                    : field.accessor\n                    ? {\n                          [typeof field.accessor === \"string\"\n                              ? field.accessor\n                              : field.accessor[0]]: \"\",\n                      }\n                    : \"\",\n            };\n\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            if (field.multiple) {\n                imports.push([\"MultiSelect\", \"@mantine/core\"]);\n\n                return jsx`\n                    <MultiSelect mt=\"sm\" label=${translatePrettyString({\n                        resource,\n                        field,\n                        i18n,\n                    })} {...getInputProps(\"${dotAccessor(\n                    field.key,\n                    undefined,\n                )}\")} {...${variableName}} filterDataOnExactSearchMatch={undefined} />\n                `;\n            }\n\n            imports.push([\"Select\", \"@mantine/core\"]);\n\n            return jsx`\n                <Select mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} {...${variableName}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"email\" ||\n            field.type === \"date\" ||\n            field.type === \"url\"\n        ) {\n            imports.push([\"TextInput\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                return `\n                <Group spacing=\"xs\">\n                    {${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any, index: number) => (\n                        <TextInput mt=\"sm\" key={index} label=${translatePrettyString(\n                            {\n                                resource,\n                                field,\n                                i18n,\n                            },\n                        )} {...getInputProps(\\`${val}\\`)} />\n                    ))}\n                </Group>\n                `;\n            }\n\n            return jsx`\n                <TextInput mt=\"sm\" ${\n                    isIDKey(field.key) ? \"disabled\" : \"\"\n                } label=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            return jsx`\n            {/* \n                Dropzone component is not included in \"@refinedev/mantine\" package.\n                To use a <Dropzone> component, you can follow the official documentation for Mantine.\n                \n                Docs: https://mantine.dev/others/dropzone/\n            */}\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                return `\n                <Group spacing=\"xs\">\n                    {${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any, index: number) => (\n                        <Checkbox mt=\"sm\" key={index} label=${translatePrettyString(\n                            {\n                                resource,\n                                field,\n                                i18n,\n                            },\n                        )} {...getInputProps(\\`${val}\\`, { type: 'checkbox' })} />\n                    ))}\n                </Group>\n                `;\n            }\n\n            return jsx`\n                <Checkbox mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\", { type: 'checkbox' })} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            const textInputRender = textFields(field);\n\n            return `\n                {/* \n                    DatePicker component is not included in \"@refinedev/mantine\" package.\n                    To use a <DatePicker> component, you can follow the official documentation for Mantine.\n                    \n                    Docs: https://mantine.dev/dates/date-picker/\n                */}\n                ${textInputRender}\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"Textarea\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                return `\n                <Group spacing=\"xs\">\n                    {${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any, index: number) => (\n                        <Textarea mt=\"sm\" key={index} label=${translatePrettyString(\n                            {\n                                resource,\n                                field,\n                                i18n,\n                            },\n                        )} {...getInputProps(\\`${val}\\`)} />\n                    ))}\n                </Group>\n                `;\n            }\n\n            return jsx`\n                <Textarea mt=\"sm\" label=${translatePrettyString({\n                    resource,\n                    field,\n                    i18n,\n                })} autosize {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberInput\", \"@mantine/core\"]);\n\n            initialValues = {\n                ...initialValues,\n                [field.key]: field.multiple ? [] : \"\",\n            };\n\n            if (field.multiple) {\n                imports.push([\"Group\", \"@mantine/core\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                return `\n                <Group spacing=\"xs\">\n                    {${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any, index: number) => (\n                        <NumberInput mt=\"sm\" key={index} label=${translatePrettyString(\n                            {\n                                resource,\n                                field,\n                                i18n,\n                            },\n                        )} {...getInputProps(\\`${val}\\`)} />\n                    ))}\n                </Group>\n                `;\n            }\n\n            return jsx`\n                <NumberInput mt=\"sm\" ${\n                    isIDKey(field.key) ? \"disabled\" : \"\"\n                } label=${translatePrettyString({\n                resource,\n                field,\n                i18n,\n            })} {...getInputProps(\"${dotAccessor(\n                field.key,\n                undefined,\n                field.accessor,\n            )}\")}/>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const wrapper = (code?: string) => {\n        if (code) {\n            return jsx`\n                ${code}\n        `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"url\":\n            case \"text\":\n            case \"email\":\n                return wrapper(textFields(field));\n            case \"number\":\n                return wrapper(numberFields(field));\n            case \"richtext\":\n                return wrapper(richtextFields(field));\n            case \"image\":\n                return wrapper(imageFields(field));\n            case \"date\":\n                return wrapper(dateFields(field));\n            case \"boolean\":\n                return wrapper(booleanFields(field));\n            case \"relation\":\n                return wrapper(renderRelationFields(field));\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n    const useTranslateHook = i18n && `const translate = useTranslate();`;\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        ${useTranslateHook}\n        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { queryResult } } = useForm({\n            initialValues: ${JSON.stringify(initialValues)},\n            ${\n                isCustomPage\n                    ? `refineCoreProps: {\n                        resource: \"${resource.name}\",\n                        id: ${idQuoteWrapper(id)},\n                        action: \"edit\",\n                        ${getMetaProps(\n                            resource?.identifier ?? resource?.name,\n                            meta,\n                            \"getOne\",\n                        )}  \n                    }`\n                    : getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getOne\",\n                      )\n                    ? `refineCoreProps: { ${getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          \"getOne\",\n                      )} }\n                      `\n                    : \"\"\n            }\n        });\n    \n        const ${recordName} = queryResult?.data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Edit saveButtonProps={saveButtonProps}>\n                ${renderedFields.join(\"\")}\n            </Edit>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n    type: \"edit\",\n    additionalScope: [\n        [\"@refinedev/mantine\", \"RefineMantine\", { Edit, useForm, useSelect }],\n        [\n            \"@mantine/core\",\n            \"MantineCore\",\n            {\n                MultiSelect,\n                Select,\n                TextInput,\n                Group,\n                Checkbox,\n                Textarea,\n                NumberInput,\n            },\n        ],\n    ],\n    codeViewerComponent: SharedCodeViewer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n"],"mappings":"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","names":["React","useResource","Show","TagField","TextField","EmailField","UrlField","BooleanField","DateField","MarkdownField","NumberField","Title","Group","Image","React","useContext","useResource","TranslationContext","urlLikeKeyRegexp","getFieldableKeys","__name","key","data","fieldableProperties","firstAvailable","fkey","pickNotDeprecated","pickDataProvider","resourceName","dataProviderName","resources","resource","item","meta","pickNotDeprecated","__name","dataProviderFromResource","_a","pickInferredField","__name","inferredFields","field","a","b","prettier","tsParser","prettierFormat","__name","code","prettier","tsParser","error","prettySpaces","__name","content","relationRegexp","relationInfer","__name","key","value","isRelation","isBasicValue","isBasicArray","v","removeRelationSuffix","__name","key","relationRegexp","prettyString","__name","str","removeRelationSuffix","word","translatePrettyString","__name","payload","resource","field","i18n","translate","prettedString","prettyString","pluralize","toSingular","__name","str","pluralize","pluralize","toPlural","__name","str","pluralize","replaceExports","__name","code","line","packageRegex","sideEffectRegex","nameChangeRegex","replaceImports","__name","content","modules","matches","imports","match","defaultImport","namedImports","namespaceImport","packageName","importName","prettySpaces","pluralize","resourceFromInferred","__name","field","resources","el","stripped","removeRelationSuffix","pluralize","pluralize","componentName","__name","resourceName","type","fallbackResourceName","sanitized","singular","pluralize","resourceComponentName","prettyString","prettyType","handleExpression","__name","expression","jsx","strings","expressions","result","currentString","i","prepareLiveCode","__name","code","componentName","removeHiddenCode","__name","code","dotAccessableRegex","shouldDotAccess","__name","property","accessorSingle","variableName","key","accessor","base","accessorMultiple","variable","joiner","dotAccessor","str","printImports","__name","imports","byModule","acc","element","module","isDefault","elements","defaultImport","e","named","defaultStr","namedStr","identifierRegexp","isIDKey","__name","key","getOptionLabel","__name","field","noOp","__name","arg1","getVariableName","__name","fieldKey","suffixOrPrefix","fieldKeyWithoutInvalidCharacters","prettyPluralVariableName","prettyString","getMetaProps","__name","identifier","meta","action","metaValues","metaValue","pickMeta","actions","acc","idQuoteWrapper","__name","id","composeInferencers","__name","inferencers","fieldInferencer","key","value","record","infer","type","inferences","inferencer","pickInferredField","composeTransformers","__name","transformers","fields","resources","resource","record","infer","type","acc","transformer","arrayInfer","__name","key","value","record","infer","type","isArray","isBasicArray","v","inferredInnerType","basicType","booleanInfer","__name","key","value","dayjs","dateSuffixRegexp","dateSeparators","dateInfer","__name","key","value","isDateField","dayjs","isValidDateString","s","emailRegexp","emailInfer","__name","key","value","imageRegexp","imageInfer","__name","key","value","nullishInfer","__name","key","value","numberInfer","__name","key","value","isNonEmptyString","isNotNaN","idPropertyRegexp","objectInfer","__name","key","value","record","infer","type","isNotNull","isNotArray","onlyHasId","hasId","k","fieldableKeys","getFieldableKeys","innerFieldKey","innerFieldType","accessor","el","richtextInfer","__name","key","value","textInfer","__name","key","value","urlRegexp","urlInfer","__name","key","value","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","imageInfer","nullishInfer","numberInfer","objectInfer","relationInfer","richtextInfer","textInfer","urlInfer","basicToRelation","__name","fields","resources","resource","record","field","validUUIdRegex","isValidUUID","value","isNotSelf","imageFieldLikeRegexp","imageByKey","__name","fields","field","relationByResource","__name","fields","resources","field","inferResource","resourceFromInferred","relationToFieldable","__name","fields","resources","resource","record","infer","type","field","value","inferredType","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","React","RefineCore","LivePreview","LiveProvider","defaultScope","React","RefineCore","InferencerLiveContext","LiveComponent","__name","fetchError","code","additionalScope","ErrorComponent","sanitized","replaceExports","replaceImports","acc","packageName","variableName","_module","ignoreReplacement","scope","_packageName","packageContent","ErrorComponentWithError","error","LiveProvider","LivePreview","React","Highlight","defaultProps","theme","SharedCodeViewer","__name","rawCode","loading","code","React","prettierFormat","settled","setSettled","isModalVisible","setIsModalVisible","isVisible","setIsVisible","isColumn","setIsColumn","isModalButtonHover","setIsModalButtonHover","timeout","mediaQuery","handleResize","InfoIcon","OpenIcon","CodeModal","visible","onClose","modalRef","isCopied","setIsCopied","isCopyHover","setIsCopyHover","isCloseHover","setIsCloseHover","isLearnMoreHover","setIsLearnMoreHover","onOutsideClick","event","onCopy","title","CloseIcon","highlight","Highlight","defaultProps","theme","className","style","tokens","getLineProps","getTokenProps","line","i","token","key","ClipboardIcon","props","React","useDataProvider","useResource","useInferFetch","__name","type","resourceNameOrRouteName","idFromProps","meta","resource","idFromURL","resources","useResource","id","dataProvider","useDataProvider","error","setError","React","data","setData","datas","setDatas","initial","setInitial","loading","setLoading","resolver","recordItemId","_a","dataProviderName","dataProviderFromResource","pickDataProvider","dp","response","pickMeta","r","React","useDataProvider","get","useRelationFetch","__name","record","fields","infer","meta","dataProvider","useDataProvider","updatedFields","setUpdatedFields","React","initial","setInitial","loading","setLoading","resolver","allFields","attempts","promises","field","_a","_b","_c","_d","_e","dataProviderName","dataProviderFromResource","dp","isMultiple","requestId","el","get","data","pickMeta","relationInfer","responseData","isPlural","toPlural","removeRelationSuffix","toSingular","resourceNameWithoutRelationSuffix","results","createInferencer","__name","type","additionalScope","customElements","fieldTransformers","renderer","LoadingComponent","ErrorComponent","CodeViewerComponent","infer","composeInferencers","defaultElements","transform","composeTransformers","defaultTransformers","Inferencer","resourceName","fieldTransformer","hideCodeViewerInProduction","meta","id","_a","_b","resource","resources","useResource","i18nProvider","useContext","TranslationContext","resourceFromURL","record","records","recordLoading","isInitialLoad","inferError","useInferFetch","inferSingleField","key","value","inferResult","transformed","customTransformedFields","field","result","inferSingleRecord","inferMultipleRecords","inferred","allUniqueKeys","index","self","mostCommonRecord","mostCommonFields","fields","acc","count","f","rawResults","recordInUse","React","results","relationLoading","useRelationFetch","clearedFields","cleanFields","idx","arr","el","duplicates","_c","_d","_e","_f","currentFieldHasResource","fieldHasResource","isSameResource","toPush","code","hiddenCodeViewer","LiveComponent","prepareLiveCode","componentName","removeHiddenCode","name","resourceItem","React","Alert","Center","IconAlertCircle","ErrorComponent","__name","error","React","Center","Alert","IconAlertCircle","React","LoadingOverlay","LoadingComponent","__name","React","LoadingOverlay","renderer","__name","resource","fields","meta","isCustomPage","id","i18n","COMPONENT_NAME","componentName","recordName","imports","relationHooksCode","field","_a","_b","_c","_d","ids","accessor","getVariableName","getMetaProps","renderRelationFields","variableName","variableIsLoading","variableDataLength","jsx","translatePrettyString","mapItemName","toSingular","val","textFields","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","numberFields","wrapper","code","renderedFields","noOp","useTranslateHook","printImports","idQuoteWrapper","ShowInferencer","createInferencer","Show","TagField","TextField","EmailField","UrlField","BooleanField","DateField","MarkdownField","NumberField","Title","Group","Image","SharedCodeViewer","LoadingComponent","ErrorComponent","List","EditButton","ShowButton","DeleteButton","TagField","EmailField","UrlField","BooleanField","DateField","MarkdownField","useTable","ScrollArea","Table","Pagination","Group","Image","flexRender","getAccessorKey","__name","field","dotAccessor","renderer","resource","fields","meta","isCustomPage","i18n","COMPONENT_NAME","componentName","recordName","imports","relationFields","relationHooksCode","_a","_b","idsString","accessor","getVariableName","getMetaProps","relationVariableNames","renderRelationFields","variableName","id","header","translatePrettyString","accessorKey","cell","val","imageFields","jsx","emailFields","urlFields","booleanFields","dateFields","richtextFields","basicFields","canEdit","canShow","canDeleteProp","resourceMeta","canDelete","actionButtons","renderedFields","noOp","useTranslateHook","printImports","ListInferencer","createInferencer","List","EditButton","ShowButton","DeleteButton","TagField","EmailField","UrlField","BooleanField","DateField","MarkdownField","useTable","ScrollArea","Table","Pagination","Group","Image","flexRender","SharedCodeViewer","LoadingComponent","ErrorComponent","Create","useForm","useSelect","MultiSelect","Select","TextInput","Checkbox","Textarea","NumberInput","renderer","__name","resource","fields","meta","isCustomPage","i18n","COMPONENT_NAME","componentName","imports","initialValues","relationHooksCode","field","_a","_b","getVariableName","getOptionLabel","getMetaProps","renderRelationFields","variableName","jsx","translatePrettyString","dotAccessor","textFields","isIDKey","imageFields","booleanFields","dateFields","richtextFields","numberFields","wrapper","code","renderedFields","noOp","useTranslateHook","printImports","CreateInferencer","createInferencer","Create","useForm","useSelect","MultiSelect","Select","TextInput","Checkbox","Textarea","NumberInput","SharedCodeViewer","LoadingComponent","ErrorComponent","Edit","useForm","useSelect","MultiSelect","Select","TextInput","Group","Checkbox","Textarea","NumberInput","renderer","__name","resource","fields","meta","isCustomPage","id","i18n","COMPONENT_NAME","componentName","recordName","getVariableName","imports","initialValues","relationHooksCode","field","_a","_b","val","accessor","effect","getOptionLabel","getMetaProps","renderRelationFields","variableName","jsx","translatePrettyString","dotAccessor","textFields","isIDKey","imageFields","booleanFields","dateFields","richtextFields","numberFields","wrapper","code","renderedFields","noOp","useTranslateHook","printImports","idQuoteWrapper","EditInferencer","createInferencer","Edit","useForm","useSelect","MultiSelect","Select","TextInput","Group","Checkbox","Textarea","NumberInput","SharedCodeViewer","LoadingComponent","ErrorComponent","MantineInferencer","__name","actionFromProps","idFromProps","props","action","id","useResource","React","ShowInferencer","CreateInferencer","EditInferencer","ListInferencer"]}