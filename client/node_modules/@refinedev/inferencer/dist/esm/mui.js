var Nr=Object.defineProperty;var a=(e,o)=>Nr(e,"name",{value:o,configurable:!0});import we from"react";import{useResource as nn}from"@refinedev/core";import{Show as yt,TagField as gt,TextFieldComponent as ht,EmailField as xt,UrlField as vt,BooleanField as $t,DateField as It,MarkdownField as bt,NumberField as kt}from"@refinedev/mui";import Ct from"@mui/material/Typography";import Ft from"@mui/material/Stack";import X,{useContext as ct}from"react";import{useResource as je,TranslationContext as ut}from"@refinedev/core";var Rr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,Te=a((e,o)=>{let c=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];Rr.test(e)&&c.unshift("url");let i=c.find(s=>s in o&&!!o[s]);if(i)return i==="firstName"&&"lastName"in o?["firstName","lastName"]:i},"getFieldableKeys");import{pickNotDeprecated as Mr}from"@refinedev/core";function Se(e,o,c){if(o)return o;let i=c==null?void 0:c.find(u=>u.name===e),s=Mr(i==null?void 0:i.meta,i==null?void 0:i.options);return s!=null&&s.dataProviderName?s.dataProviderName:"default"}a(Se,"pickDataProvider");var xe=a(e=>{var o;return(o=e==null?void 0:e.options)==null?void 0:o.dataProviderName},"dataProviderFromResource");var Pe=a(e=>{let o=[...e].filter(Boolean).sort((c,i)=>(i.priority||0)-(c.priority||0))[0];return o||null},"pickInferredField");import Er from"prettier/standalone";import Br from"prettier/parser-typescript";var Le=a(e=>{try{return Er.format(e,{parser:"typescript",plugins:[Br],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(o){return console.warn("Formatting error in inferencer",o),e}},"prettierFormat");var Qe=a(e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`),"prettySpaces");var Ne=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ue=a((e,o)=>{let c=Ne.test(e),i=typeof o=="string"||typeof o=="number",s=Array.isArray(o)&&o.every(u=>typeof u=="string"||typeof u=="number");return c&&i||c&&s?{key:e,relation:!0,multiple:!!s,type:"relation",priority:1}:!1},"relationInfer");var G=a(e=>e.replace(Ne,""),"removeRelationSuffix");var ye=a(e=>G(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(g=>g.charAt(0).toUpperCase()+g.slice(1)).join(" "),"prettyString");var b=a(e=>{let{resource:o,field:c,i18n:i}=e;if(i){let u=`translate("${o.name}.fields.${c.key}")`;return e.noBraces?`${u}`:`{${u}}`}let s=ye(c.key);return e.noQuotes?s:`"${s}"`},"translatePrettyString");import Ke from"pluralize";var te=a((e="")=>Ke.isSingular(e)?e:Ke.singular(e),"toSingular");import Ze from"pluralize";var ne=a((e="")=>Ze.isPlural(e)?e:Ze.plural(e),"toPlural");var Re=a(e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(s=>!s.trim().startsWith("export default")).join(`
`),"replaceExports");var Ye=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Dr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Vr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Me=a((e,o={})=>{let c=e.matchAll(Ye),i=new Set;for(let s of c){let[,u,g,l,m]=s;if(m in o){let $=o[m];if(m==="react")continue;u&&i.add(`const { default: ${u} } = ${$};`),g&&i.add(`const${g.replace(Vr,"$1: $3$4")} = ${$};`),l&&i.add(`const ${l} = ${$};`)}}return Qe(`
    ${Array.from(i).join(`
`)}
    ${e.replace(Ye,"").replace(Dr,"")}
    `)},"replaceImports");import Ce from"pluralize";var Ee=a((e,o)=>e?o.find(i=>{let s=G(e.key);return i.name===s||i.name===(Ce.isPlural(s)?s:Ce.plural(s))||i.name===(Ce.isSingular(s)?s:Ce.singular(s))}):void 0,"resourceFromInferred");import Or from"pluralize";var Y=a((e,o,c="Inferred")=>{let i=e.replace(/[^a-zA-Z0-9]/g," "),s=Or.singular(i),g=ye(s).replace(/ /g,"")||c,l=o.charAt(0).toUpperCase()+o.slice(1);return/^[a-zA-Z]/.test(g)?`${g}${l}`:`${l}${g}`},"componentName");var Wr=a(e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"","handleExpression"),k=a((e,...o)=>e.reduce((i,s,u)=>`${i}${s}${Wr(o[u])}`,"").trim(),"jsx");var Be=a((e,o)=>`
    ${e??""}
    
    render(typeof ${o} !== "undefined" ? <${o} /> : <></>);
    `,"prepareLiveCode");var De=a(e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,""),"removeHiddenCode");var Hr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Ve=a(e=>Hr.test(e),"shouldDotAccess");function Oe(e,o,c){let i=`${e}`;return o&&(i+="?.",Ve(o)?i+=o:i+=`['${o}']`),c&&(i+="?.",Ve(c)?i+=c:i+=`['${c}']`),i}a(Oe,"accessorSingle");function jr(e,o,c){return(c??[]).map(s=>Oe(e,o,s))}a(jr,"accessorMultiple");var d=a((e,o,c,i=' + " " + ')=>Array.isArray(c)?i?jr(e,o,c).join(i):Oe(e,o,c[0]):Oe(e,o,c),"accessor"),q=a((e,o,c)=>{let i=e;return o&&(i+=`.${o}`),c&&(Array.isArray(c)?i+=`.${c[0]}`:i+=`.${c}`),i},"dotAccessor");var oe=a(e=>{let o=e.reduce((i,[s,u,g])=>(i[u]||(i[u]=[]),i[u].includes(s)||(g?i[u].push([s,!0]):i[u].push(s)),i),{});return Object.entries(o).map(([i,s])=>{let u=s.find($=>Array.isArray($)&&$[1]),g=s.filter($=>typeof $=="string"),l=u?`${u[0]}`:"",m=g.length?`{ ${g.join(", ")} }`:"";return`import ${l}${l&&m?", ":""}${m} from "${i}";`})},"printImports");var Gr=/^id$/i,ce=a(e=>Gr.test(e),"isIDKey");var ae=a(e=>{},"noOp");var O=a((e,o="")=>{if(Number.isInteger(Number(e)))return o.charAt(0).toLowerCase()+o.slice(1)+e;let i=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),s=ye(i).replace(/ /g,"");return`${s.charAt(0).toLowerCase()+s.slice(1)}${o.charAt(0).toUpperCase()+o.slice(1)}`},"getVariableName");var W=a((e,o,c)=>{if(o&&c&&e){let i=e?o[e]:{},s=(i==null?void 0:i[c])??(i==null?void 0:i.default);return s?`meta: ${JSON.stringify(s)},`:""}return""},"getMetaProps"),ee=a((e,o,c)=>{if(o&&c&&e){let i=e?o[e]:{},u=[...c,"default"].reduce((g,l)=>g??(i==null?void 0:i[l]),void 0);if(u)return u}},"pickMeta");var ve=a(e=>e===void 0?e:typeof e=="string"?`"${e}"`:e,"idQuoteWrapper");var Je=a(e=>{let o=a((c,i,s,u=o,g)=>{let l=e.map($=>$(c,i,s,u,g));return Pe(l)},"fieldInferencer");return o},"composeInferencers");var Xe=a(e=>a((c,i,s,u,g,l)=>e.reduce((m,$)=>$(m,i,s,u,g,l),c),"fieldTransformer"),"composeTransformers");var er=a((e,o,c,i,s)=>{let u=Array.isArray(o),g=Array.isArray(o)&&o.every(l=>typeof l=="string"||typeof l=="number");if(u){if(!g){let m=i(e,o[0],c,i,s);return m?{...m,key:e,multiple:!0,priority:1}:!1}let l=i(e,o[0],c,i,s)||{type:"string"};return{key:e,multiple:!0,priority:1,type:l==null?void 0:l.type}}return!1},"arrayInfer");var rr=a((e,o)=>typeof o=="boolean"?{key:e,type:"boolean"}:!1,"booleanInfer");import tr from"dayjs";var zr=/(_at|_on|At|On|AT|ON)(\[\])?$/,_r=["/",":","-","."],nr=a((e,o)=>{let c=zr.test(e)&&tr(o).isValid(),i=typeof o=="string"&&tr(o).isValid();return typeof o=="string"&&_r.some(u=>o.includes(u))&&(c||i)?{key:e,type:"date",priority:1}:!1},"dateInfer");var qr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,or=a((e,o)=>typeof o=="string"&&qr.test(o)?{key:e,type:"email",priority:1}:!1,"emailInfer");var Qr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,ar=a((e,o)=>typeof o=="string"&&Qr.test(o)?{key:e,type:"image",priority:2}:!1,"imageInfer");var sr=a((e,o)=>typeof o>"u"||o===null?null:!1,"nullishInfer");var ir=a((e,o)=>{let c=typeof o=="string"&&o.length>0,i=!isNaN(o);return c&&i||typeof o=="number"?{key:e,type:"number"}:!1},"numberInfer");var cr=/id$/i,ur=a((e,o,c,i,s)=>{let u=o!==null,g=!Array.isArray(o);if(u&&g&&typeof o=="object"){let m=Object.keys(o).length===1&&cr.test(Object.keys(o)[0]),$=Object.keys(o).some(F=>cr.test(F));if(m)return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let v=Te(e,o);if((v?v.length>0:!1)&&v){let F=v&&Array.isArray(v)?v[0]:v,x=i(F,o[F],o,i,s);if(x){let T=Array.isArray(v)?v.map(p=>x.accessor?`${p}.${Array.isArray(x.accessor)?x.accessor[0]:x.accessor}`:p):x.accessor?Array.isArray(x.accessor)?`${v}.${x.accessor[0]}`:`${v}.${x.accessor}`:v;return(x==null?void 0:x.type)==="text"&&(s==="create"||s==="edit")&&$?{key:e,type:"relation",relation:!0,accessor:"id",priority:1}:{...x,fieldable:!0,key:e,accessor:T,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1},"objectInfer");var pr=a((e,o)=>typeof o=="string"&&o.length>100?{key:e,type:"richtext",priority:1}:!1,"richtextInfer");var lr=a((e,o)=>typeof o=="string"?{key:e,type:"text"}:!1,"textInfer");var Ur=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,mr=a((e,o)=>typeof o=="string"&&Ur.test(o)?{key:e,type:"url",priority:1}:!1,"urlInfer");var dr=[er,rr,nr,or,ar,sr,ir,ur,Ue,pr,lr,mr];var fr=a((e,o,c,i)=>e.map(u=>{if(!u.relation&&(u.type==="text"||u.type==="richtext"||u.type==="number")&&!u.canRelation){let g=/^[a-z0-9-]+$/,l=a(F=>g.test(`${F}`),"isValidUUID"),m=u.key.toLowerCase()!=="id";return!(!u.accessor||typeof u.accessor=="string")||!m?u:(u.multiple?i[u.key]:[i[u.key]]).every(F=>l(u.accessor?F[u.accessor]:F))?{...u,canRelation:!0}:u}return u}),"basicToRelation");var Kr=/(image|photo|avatar|cover|thumbnail|icon)/i,yr=a(e=>e.map(c=>c.type==="url"&&Kr.test(c.key)?{...c,type:"image"}:c),"imageByKey");var gr=a((e,o)=>e.map(i=>{let s=Ee(i,o);return s?{...i,relation:!0,type:"relation",resource:s}:i}),"relationByResource");var hr=a((e,o,c,i,s,u)=>e.map(l=>{if(l.relation&&l.type==="relation"&&!l.resource){let m=l.accessor?i[l.key][l.accessor]:i[l.key],$=s(l.key,m,i,s,u);if($&&$.type!=="relation")return{...l,fieldable:!0,relation:!1,type:$.type,canRelation:!0}}return l}),"relationToFieldable");var xr=[yr,gr,hr,fr];import J from"react";import*as Zr from"@refinedev/core";import{LivePreview as Yr,LiveProvider as Jr}from"@aliemir/react-live";var vr=[["react","React",J],["@refinedev/core","RefineCore",Zr]],We=J.createContext({}),He=a(({fetchError:e,code:o,additionalScope:c,errorComponent:i})=>{let s=(o&&Re(Me(o,[...vr,...c??[]].reduce((l,[m,$,v,R])=>R?l:{...l,[m]:$},{}))))??"",u=J.useMemo(()=>({React:J,...J,...[...vr,...c??[]].reduce((l,[m,$,v])=>({...l,[$]:v}),{})}),[c]),g=J.useMemo(()=>a(()=>{let{error:m}=J.useContext(We);return i?J.createElement(i,{error:m?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${m}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},"LiveErrorComponent"),[i,e]);return J.createElement(Jr,{Context:We,code:s,scope:u,noInline:!0},!e&&J.createElement(Yr,{Context:We}),J.createElement(g,null))},"LiveComponent");import y from"react";import Xr,{defaultProps as et}from"prism-react-renderer";import rt from"prism-react-renderer/themes/vsDark";var ue=a(({code:e,loading:o})=>{let c=y.useMemo(()=>Le(e??""),[e]),[i,s]=y.useState(!1),[u,g]=y.useState(!1),[l,m]=y.useState(!1),[$,v]=y.useState(!1),[R,F]=y.useState(!1);return y.useEffect(()=>{if(!o){let x=setTimeout(()=>{s(!0)},300);return()=>{clearTimeout(x)}}return()=>{}},[o]),y.useEffect(()=>{if(typeof window<"u"){let x=window.matchMedia("(max-width: 449px)");x.matches?m(!1):m(!0);let T=a(()=>{x.matches?m(!1):m(!0)},"handleResize");return window.addEventListener("resize",T),()=>{window.removeEventListener("resize",T)}}return()=>{}},[]),y.useEffect(()=>{if(typeof window<"u"){let x=window.matchMedia("(max-width: 1280px)");x.matches?v(!0):v(!1);let T=a(()=>{x.matches?v(!0):v(!1)},"handleResize");return window.addEventListener("resize",T),()=>{window.removeEventListener("resize",T)}}return()=>{}},[]),c&&!o?y.createElement(y.Fragment,null,l&&y.createElement("div",{className:"refine-inferencer--code-viewer",style:{position:"sticky",bottom:"24px",paddingTop:"24px",left:0,right:0,width:"100%",zIndex:10,display:"flex",justifyContent:"center",transition:"all 0.2s ease",opacity:i&&!u?1:0,transform:i&&!u?"translateY(0)":"translateY(100px)"}},y.createElement("div",{style:{width:"calc(100% - calc(64px * 2))",maxWidth:"1080px",padding:"20px",backgroundColor:"#1A1A1A",boxShadow:"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)",borderRadius:"16px",display:"flex",alignItems:"center",justifyContent:"space-between",flexDirection:$?"column":"row",gap:"12px"}},y.createElement("div",{style:{display:"flex",alignItems:"flex-start",gap:"8px"}},y.createElement("div",null,y.createElement(nt,null)),y.createElement("div",{style:{fontSize:"14px",lineHeight:"20px",color:"#ffffff"}},y.createElement("p",{style:{padding:0,margin:0}},"Most of the page code is auto-generated by the"," ",y.createElement("span",{style:{textDecoration:"underline"}},"Inferencer")," ","feature, based on your backend data structure."),y.createElement("p",{style:{padding:0,margin:0}},"While this is an excellent way to experiment with refine,"," ",y.createElement("span",{style:{fontWeight:600}},"it's not intended to be used on production.")))),y.createElement("div",null,y.createElement("button",{onPointerEnter:()=>F(!0),onPointerLeave:()=>F(!1),onClick:()=>g(!0),style:{appearance:"none",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",color:"#ffffff",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",transition:"all 0.2s ease",transform:R?"scale(1.025)":void 0,filter:R?"brightness(1.1)":void 0}},y.createElement(Ir,{style:{flexShrink:0}}),y.createElement("span",null,"Show the auto-generated code"))))),y.createElement(tt,{visible:u,onClose:()=>g(!1),code:c})):null},"SharedCodeViewer"),tt=a(({visible:e,onClose:o,code:c=""})=>{let i=y.useRef(null),[s,u]=y.useState(!1),[g,l]=y.useState(!1),[m,$]=y.useState(!1),[v,R]=y.useState(!1);y.useEffect(()=>{if(typeof document<"u"){let f=a(n=>{i.current&&!i.current.contains(n.target)&&o()},"onOutsideClick");return document.addEventListener("pointerdown",f),()=>{document.removeEventListener("pointerdown",f)}}return()=>{}},[o]);let F=a(()=>{typeof navigator<"u"&&(navigator.clipboard.writeText(c),u(!0),setTimeout(()=>{u(!1)},1e3))},"onCopy"),x=y.createElement("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},y.createElement("div",{style:{fontWeight:700,fontSize:"20px",lineHeight:"32px",color:"#0D0D0D"}},"Auto-generated code by Inferencer"),y.createElement("button",{onClick:o,onPointerEnter:()=>$(!0),onPointerLeave:()=>$(!1),style:{flexShrink:0,appearance:"none",border:"none",background:"none",padding:0,margin:0,outline:"none",borderRadius:"50px",width:"32px",height:"32px",cursor:"pointer",transition:"all 0.15s ease",transform:m?"scale(1.05)":void 0,filter:m?"brightness(0.8)":void 0}},y.createElement(ot,null))),T=y.createElement("div",{style:{fontSize:"13px",borderRadius:"8px",flex:"1",overflow:"scroll",background:"#1E1E1E"}},y.createElement(Xr,{...et,theme:rt,code:c,language:"tsx"},({className:f,style:n,tokens:I,getLineProps:A,getTokenProps:B})=>y.createElement("pre",{className:f,style:{...n,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},I.map((M,t)=>y.createElement("div",{key:t,...A({line:M,key:t})},M.map((h,E)=>y.createElement("span",{key:E,...B({token:h,key:E})})))))));return y.createElement("div",{className:"refine-inferencer--code-viewer-modal",style:{position:"fixed",top:0,left:0,right:0,bottom:0,zIndex:9999,backgroundColor:"rgba(0, 0, 0, 0.5)",transition:"all 0.2s ease",opacity:e?1:0,pointerEvents:e?"all":"none",display:"flex",justifyContent:"center",alignItems:"center"}},y.createElement("div",{ref:i,style:{transform:e?"scale(1) translateY(0px)":"scale(0) translateY(-200px)",transition:"all 0.25s cubic-bezier(.35,1.29,.81,1.08)",transitionDelay:"0.25",width:"calc(100% - calc(32px * 2))",height:"calc(100% - calc(32px * 2))",backgroundColor:"#fff",maxWidth:"640px",maxHeight:"720px",borderRadius:"8px",padding:"16px"}},y.createElement("div",{style:{display:"flex",flexDirection:"column",height:"100%",width:"100%",gap:"16px"}},x,T,y.createElement("div",{style:{display:"flex",justifyContent:"flex-start",alignItems:"flex-end",gap:"16px"}},y.createElement("button",{onPointerEnter:()=>l(!0),onPointerLeave:()=>l(!1),onClick:F,style:{appearance:"none",height:"40px",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",color:"#ffffff",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",position:"relative",overflow:"hidden",transition:"filter 0.2s ease",transform:g?"scale(1.025)":"scale(1)",filter:g?"brightness(1.1)":void 0}},y.createElement($r,{style:{flexShrink:0,marginTop:"-2px",marginBottom:"-2px"}}),y.createElement("span",null,"Copy Generated Code"),y.createElement("div",{style:{position:"absolute",width:"100%",height:"100%",top:0,left:0,display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",transition:"all 0.2s ease",transform:s?"translateY(0)":"translateY(40px)"}},y.createElement($r,{style:{flexShrink:0,marginTop:"-2px",marginBottom:"-2px"}}),y.createElement("span",null,"Copied!"))),y.createElement("a",{onPointerEnter:()=>R(!0),onPointerLeave:()=>R(!1),href:"https://refine.dev/docs/packages/documentation/inferencer",target:"_blank",rel:"noreferrer",style:{appearance:"none",textDecoration:"none",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"rgba(0, 128, 255, 0.1)",color:"#0080FF",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",transition:"all 0.2s ease",transform:v?"scale(1.025)":void 0,filter:v?"brightness(1.1)":void 0}},y.createElement(Ir,{style:{flexShrink:0}}),y.createElement("span",null,"Learn more about inferencer"))))))},"CodeModal"),nt=a(e=>y.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none",...e},y.createElement("path",{fill:"#0080FF",fillRule:"evenodd",d:"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z",clipRule:"evenodd"})),"InfoIcon"),Ir=a(e=>y.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:16,height:16,fill:"none",...e},y.createElement("path",{fill:"currentColor",d:"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z"}),y.createElement("path",{fill:"currentColor",d:"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z"})),"OpenIcon"),ot=a(e=>y.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:32,height:32,fill:"none",...e},y.createElement("path",{fill:"#A6A6A6",fillRule:"evenodd",d:"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z",clipRule:"evenodd"})),"CloseIcon"),$r=a(e=>y.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:20,height:20,viewBox:"0 0 24 24",fill:"none",...e},y.createElement("path",{fill:"currentColor",fillRule:"evenodd",d:"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z",clipRule:"evenodd"}),y.createElement("path",{fill:"currentColor",d:"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z"})),"ClipboardIcon");import fe from"react";import{useDataProvider as at,useResource as st}from"@refinedev/core";var br=a((e,o,c,i)=>{let{resource:s,id:u,resources:g}=st(o),l=c??u,m=at(),[$,v]=fe.useState(void 0),[R,F]=fe.useState(void 0),[x,T]=fe.useState(void 0),[p,f]=fe.useState(!0),[n,I]=fe.useState(!1),A=fe.useCallback(async B=>{var h;let M=xe(s)??Se(s==null?void 0:s.name,void 0,g),t=m(M);I(!0),v(void 0);try{if((e==="list"||e==="create")&&s){let E=await t.getList({resource:s==null?void 0:s.name,meta:ee((s==null?void 0:s.identifier)??(s==null?void 0:s.name),i,["getList"])}),P=(h=E.data)==null?void 0:h[0];P||v(`<p>No records/data found for resource "${s==null?void 0:s.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),F(P),T(E.data),setTimeout(()=>{I(!1)},500)}if((e==="edit"||e==="show")&&B&&s){let P=(await t.getOne({resource:s==null?void 0:s.name,id:B,meta:ee((s==null?void 0:s.identifier)??(s==null?void 0:s.name),i,["getOne"])})).data;P||v(`<p>No records/data found for resource "${s==null?void 0:s.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),F(P),setTimeout(()=>{I(!1)},500)}}catch(E){console.warn("An error occured while fetching the resource data. Please check the error message below:",E),v(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${s==null?void 0:s.name}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{I(!1)},500)}},[e,m,s,g]);return fe.useEffect(()=>{f(!1),!n&&!R&&A(l)},[A,l]),{data:R,datas:x,loading:n,initial:p,error:$}},"useInferFetch");import $e from"react";import{useDataProvider as it}from"@refinedev/core";import{get as kr}from"lodash-es";var Cr=a(({record:e,fields:o,infer:c,meta:i})=>{let s=it(),[u,g]=$e.useState([]),[l,m]=$e.useState(!0),[$,v]=$e.useState(!1),R=$e.useCallback(async F=>{console.groupCollapsed("@refinedev/inferencer is trying to detect relations");let x=[];v(!0);try{let T=F.map(async f=>{var n,I,A,B,M;if(f&&(f.relation||f.canRelation)&&e){if(f.relationInfer)return f;let t=xe(f.resource),h=s(t),E=f.multiple,P=Array.isArray(f.accessor)?void 0:f.multiple?e[f.key].map(H=>f.accessor?kr(H,f.accessor):H)[0]:f.accessor?kr(e[f.key],f.accessor):e[f.key];if(P&&f.resource)try{let H={};if(E&&h.getMany){let{data:r}=await h.getMany({resource:f.resource.name,ids:[P],meta:ee(((n=f.resource)==null?void 0:n.identifier)??((I=f.resource)==null?void 0:I.name),i,["getMany"])});H=r==null?void 0:r[0]}else{let{data:r}=await h.getOne({resource:f.resource.name,id:P,meta:ee(((A=f.resource)==null?void 0:A.identifier)??((B=f.resource)==null?void 0:B.name),i,E?["getMany","getOne"]:["getOne"])});H=r}x.push({status:"success",resource:f.resource.name,field:f.key});let z=c("__",H,{},c);return{...f,relationInfer:z}}catch{return x.push({status:"error",resource:f.resource.name,field:f.key}),{...f,relationInfer:null}}if(P){let H,z;try{let N={};if(E&&h.getMany){let{data:w}=await((M=h.getMany)==null?void 0:M.call(h,{resource:ne(G(f.key)),ids:[P],meta:ee(ne(G(f.key)),i,["getMany"])}));N=w==null?void 0:w[0]}else{let{data:w}=await h.getOne({resource:ne(G(f.key)),id:P,meta:ee(ne(G(f.key)),i,E?["getMany","getOne"]:["getOne"])});N=w}x.push({status:"success",resource:ne(G(f.key)),field:f.key}),H=N,z=!0}catch{x.push({status:"error",resource:ne(G(f.key)),field:f.key});let w={};try{if(E&&h.getMany){let{data:C}=await h.getMany({resource:te(G(f.key)),meta:ee(te(G(f.key)),i,["getMany"]),ids:[P]});w=C==null?void 0:C[0]}else{let{data:C}=await h.getOne({resource:te(G(f.key)),meta:ee(te(G(f.key)),i,E?["getMany","getOne"]:["getOne"]),id:P});w=C}x.push({status:"success",resource:te(G(f.key)),field:f.key}),H=w,z=!1}catch{return x.push({status:"error",resource:te(G(f.key)),field:f.key}),{...f,relationInfer:null}}}let r=c("__",H,{},c),D=G(f.key);return{...f,relation:!0,type:"relation",resource:{name:z?ne(D):te(D)},fieldable:!1,canRelation:void 0,relationInfer:r}}return{...f,relationInfer:null}}return f}),p=await Promise.all(T);g(p.filter(f=>f)),setTimeout(()=>{v(!1)},500)}catch{setTimeout(()=>{v(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${x.length} attempts and succeeded with ${x.filter(T=>T.status==="success").length} attempts.`),console.groupEnd(),console.info("@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works")},500)},[s,e]);return $e.useEffect(()=>{m(!1),!$&&o&&o.length>0&&u.length===0&&R(o)},[R,$,o,R]),{fields:u,loading:$,initial:l}},"useRelationFetch");var pe=a(({type:e,additionalScope:o=[],customElements:c=[],fieldTransformers:i=[],renderer:s,loadingComponent:u,errorComponent:g,codeViewerComponent:l})=>{let m=Je([...dr,...c]),$=Xe([...xr,...i]),v=a(({resourceName:F,fieldTransformer:x,hideCodeViewerInProduction:T,meta:p,id:f})=>{var be,de;let{resource:n,resources:I}=je(F),{i18nProvider:A}=ct(ut),{resource:B}=je(),{data:M,datas:t,loading:h,initial:E,error:P}=br(e,F??(n==null?void 0:n.name),f,p),H=a((S,L,Q)=>{let K=m(S,L,Q,m,e);if(K&&n){let Z=$([K],I,n,Q,m,e),j=x?Z.flatMap(V=>{let U=x(V);return U?[U]:[]}):Z;return j==null?void 0:j[0]}},"inferSingleField"),z=a(S=>Object.keys(S).map(Q=>{let K=S[Q];return H(Q,K,S)}).filter(Boolean),"inferSingleRecord"),r=a(S=>{let L=S.map(V=>z(V)),Q=S.flatMap(V=>Object.keys(V)).filter((V,U,ge)=>ge.indexOf(V)===U),K={},Z=Q.map(V=>{let U=L.map(se=>se.find(re=>re.key===V));return U.reduce((se,re,ke)=>{if(!re)return se;let he=U.filter(ie=>(ie==null?void 0:ie.key)===re.key&&(ie==null?void 0:ie.type)===re.type).length;return he>se.count?(K[V]=S[ke][V],{count:he,field:re}):se},{count:0,field:void 0}).field});return{commonRecord:K,inferredFields:Z}},"inferMultipleRecords"),[D,N]=X.useMemo(()=>{if(t&&(e==="list"||e==="create")){let S=r(t);return[S.inferredFields,S.commonRecord]}if(M){let S=Object.keys(M).map(L=>{let Q=M[L];return m(L,Q,M,m,e)}).filter(Boolean);if(n){let L=$(S,I,n,M,m,e);return[x?L.flatMap(K=>{let Z=x(K);return Z?[Z]:[]}):L,M]}return[[],M]}return[[],void 0]},[M,t,I,n,x]),{fields:w,loading:C}=Cr({record:N,fields:D,infer:m,meta:p}),_=X.useMemo(()=>{let S=[];return w.forEach((L,Q,K)=>{if(L.resource){if(S.findIndex(j=>{var V,U;return((V=j.resource)==null?void 0:V.name)===((U=L.resource)==null?void 0:U.name)})>-1)return;let Z=K.filter((j,V)=>{var U,ge,se,re,ke,he;if(V!==Q){let ie=L.resource,Pr=j.resource,Lr=((U=j.resource)==null?void 0:U.identifier)||((ge=L.resource)==null?void 0:ge.identifier)?((se=j.resource)==null?void 0:se.identifier)===((re=L.resource)==null?void 0:re.identifier):((ke=j.resource)==null?void 0:ke.name)===((he=L.resource)==null?void 0:he.name);return ie&&Pr&&Lr}else return!1});if(Z.length>0)if(e==="create"||e==="edit"){let j;[L,...Z].find(V=>{V.fieldable!==!0&&j===void 0&&(j=V)}),j?S.push(j):S.push(L)}else{let j;[L,...Z].find(V=>{V.fieldable!==!1&&j===void 0&&(j=V)}),j?S.push(j):S.push(L)}else S.push(L)}else S.push(L)}),S},[w,e]),Ie=X.useMemo(()=>!h&&!C&&!E&&n?s({resource:n,resources:I,fields:_,infer:m,meta:p,isCustomPage:n.name!==(B==null?void 0:B.name),id:f,i18n:!!A}):"",[n,I,_,h,C]),Ae=T;return X.createElement(X.Fragment,null,u&&(h||C)&&X.createElement(u,null),!h&&!C&&X.createElement(X.Fragment,null,X.createElement(He,{fetchError:!h&&P?P:!h&&!E&&!M,code:Be(Ie,Y(((be=n==null?void 0:n.meta)==null?void 0:be.label)??((de=n==null?void 0:n.options)==null?void 0:de.label)??(n==null?void 0:n.label)??(n==null?void 0:n.name)??"Resource",e)),errorComponent:g,additionalScope:o}),typeof l<"u"&&!Ae?X.createElement(l,{code:De(Ie),loading:h||C}):null))},"Inferencer");return a(({name:F,resource:x,fieldTransformer:T,meta:p,hideCodeViewerInProduction:f,id:n})=>{let{resource:I}=je(x??F),A=`${(I==null?void 0:I.identifier)??(I==null?void 0:I.name)}-${e}-${n}`;return X.createElement(v,{hideCodeViewerInProduction:f,fieldTransformer:T,resourceName:x??F,meta:p??{},key:A,id:n})},"InferencerComponent")},"createInferencer");import Fe from"react";import pt from"@mui/material/Alert";import lt from"@mui/material/AlertTitle";import mt from"@mui/material/Box";var le=a(({error:e})=>e?Fe.createElement(mt,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"200px"}},Fe.createElement(pt,{severity:"error"},Fe.createElement(lt,null,"Error"),Fe.createElement("div",{dangerouslySetInnerHTML:{__html:e??""}}))):null,"ErrorComponent");import Fr from"react";import dt from"@mui/material/Box";import ft from"@mui/material/CircularProgress";var me=a(()=>Fr.createElement(dt,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px"}},Fr.createElement(ft,{size:"large"})),"LoadingComponent");var wr=a(({resource:e,fields:o,meta:c,isCustomPage:i,id:s,i18n:u})=>{let g=Y(e.label??e.name,"show"),l="record",m=[["useShow","@refinedev/core"],["Show","@refinedev/mui"],["Typography","@mui/material"],["Stack","@mui/material"],["IResourceComponentsProps","@refinedev/core"]];u&&m.push(["useTranslate","@refinedev/core"]);let v=o.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)).filter(Boolean).map(t=>{var h,E,P,H;if(t!=null&&t.relation&&!t.fieldable&&t.resource){if(t.multiple){m.push(["useMany","@refinedev/core"]);let z=d(l,t.key);return t.accessor&&(z=`${d(l,t.key)}?.map((item: any) => ${d("item",void 0,t.accessor)})`),`
                const { data: ${O(t.key,"Data")}, isLoading: ${O(t.key,"IsLoading")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${z} || [],
                    queryOptions: {
                        enabled: !!${l} && !!${z}?.length,
                    },
                    ${W(((h=t==null?void 0:t.resource)==null?void 0:h.identifier)??((E=t==null?void 0:t.resource)==null?void 0:E.name),c,"getMany")}
                });
                `}return m.push(["useOne","@refinedev/core"]),`
                const { data: ${O(t.key,"Data")}, isLoading: ${O(t.key,"IsLoading")} } =
                useOne({
                    resource: "${t.resource.name}",
                    id: ${d(l,t.key,t.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${l},
                    },
                    ${W(((P=t==null?void 0:t.resource)==null?void 0:P.identifier)??((H=t==null?void 0:t.resource)==null?void 0:H.name),c,"getOne")}
                });
            `}}).filter(Boolean),R=a(t=>{if(t.relation&&t.resource){let h=O(t.key,"Data"),E=O(t.key,"IsLoading");if(t.multiple){let P=d(l,t.key)+"?.length";return m.push(["TagField","@refinedev/mui"]),k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                {${E} && ${P} ? (
                    <>
                        Loading...
                    </>
                    ) : (
                    <>
                    ${(()=>{var H;if(t.relationInfer)if((H=t.relationInfer)!=null&&H.accessor){if(Array.isArray(t.relationInfer.accessor))return"Not Handled.";{let z=O(t.key),r=d(z,void 0,t.relationInfer.accessor);return`
                                        {record?.${t.key}?.length ? <Stack direction="row" spacing={1}>
                                            {${h}?.data?.map((${z}: any) => (
                                                <TagField key={${r}} value={${r}} />
                                            ))}
                                        </Stack> : <></>}
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `}return t.fieldable?k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <TextField value={${d(l,t.key,t.accessor)}} />
                `:k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>

                {${E} ? (
                    <>Loading...</>
                ) : (
                    <>
                    ${(()=>{var P;return t.relationInfer?(P=t.relationInfer)!=null&&P.accessor?Array.isArray(t.relationInfer.accessor)?`{${d(`${h}?.data`,void 0,t.relationInfer.accessor,' + " " + ')}}`:`{${h}?.data?.${t.relationInfer.accessor}}`:`{${h}?.data}`:`{${h}?.data?.id}`})()}
                    </>
                )}
                `}},"renderRelationFields"),F=a(t=>{if(t.type==="text"){if(m.push(["TextFieldComponent as TextField","@refinedev/mui"]),t.multiple){m.push(["TagField","@refinedev/mui"]);let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <TextField value={${d(l,t.key,t.accessor)}} />
            `}},"textFields"),x=a(t=>{if(t.type==="image"){if(t.multiple){let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${d(l,t.key,t.accessor," + ")}} />
                `}},"imageFields"),T=a(t=>{if(t.type==="email"){if(m.push(["EmailField","@refinedev/mui"]),t.multiple){m.push(["TagField","@refinedev/mui"]);let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <EmailField value={${d(l,t.key,t.accessor," + ")}} />
            `}},"emailFields"),p=a(t=>{if(t.type==="url"){if(m.push(["UrlField","@refinedev/mui"]),t.multiple){m.push(["TagField","@refinedev/mui"]);let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <UrlField value={${d(l,t.key,t.accessor," + ")}} />
            `}},"urlFields"),f=a(t=>{if(t.type==="boolean"){if(m.push(["BooleanField","@refinedev/mui"]),t.multiple){m.push(["TagField","@refinedev/mui"]);let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any, index: number) => (
                    <TagField value={${h}} key={index} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <BooleanField value={${d(l,t.key,t.accessor," && ")}} />
            `}},"booleanFields"),n=a(t=>{if(t.type==="date"){if(m.push(["DateField","@refinedev/mui"]),t.multiple){let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <DateField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <DateField value={${d(l,t.key,t.accessor," + ' ' + ")}} />
            `}},"dateFields"),I=a(t=>{if(t.type==="richtext")return m.push(["MarkdownField","@refinedev/mui"]),k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <MarkdownField value={${d(l,t.key,t.accessor,' + " " + ')}} />
            `},"richtextFields"),A=a(t=>{if(t.type==="number"){if(m.push(["NumberField","@refinedev/mui"]),t.multiple){m.push(["TagField","@refinedev/mui"]);let h=d("item",void 0,t.accessor);return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${d(l,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return k`
                <Typography variant="body1" fontWeight="bold">
                    ${b({resource:e,field:t,i18n:u,noQuotes:!0})}
                </Typography>
                <NumberField value={${d(l,t.key,t.accessor,' + " " + ')} ?? ""} />
            `}},"numberFields"),B=o.map(t=>{switch(t==null?void 0:t.type){case"text":return F(t);case"number":return A(t);case"richtext":return I(t);case"email":return T(t);case"image":return x(t);case"date":return n(t);case"boolean":return f(t);case"url":return p(t);case"relation":return R(t);default:return}});ae(m);let M=u&&"const translate = useTranslate();";return k`
    ${oe(m)}

    export const ${g}: React.FC<IResourceComponentsProps> = () => {
        ${M}
        const { queryResult } = useShow(${i?`{ 
                    resource: "${e.name}", 
                    id: ${ve(s)},
                    ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")}
                }`:W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")?`{ ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")} }`:""});
        const { data, isLoading } = queryResult;
    
        const ${l} = data?.data;
    
        ${v}

        return (
            <Show isLoading={isLoading}>
                <Stack gap={1}>
                    ${B.join("")}
                </Stack>
            </Show>
        );
    };
    `},"renderer"),Ge=pe({type:"show",additionalScope:[["@refinedev/mui","RefineMui",{Show:yt,TagField:gt,TextFieldComponent:ht,EmailField:xt,UrlField:vt,BooleanField:$t,DateField:It,MarkdownField:bt,NumberField:kt}],["@mui/material","MuiMaterial",{Typography:Ct,Stack:Ft}]],codeViewerComponent:ue,loadingComponent:me,errorComponent:le,renderer:wr});import{DateField as wt,DeleteButton as At,EditButton as Tt,EmailField as St,List as Pt,MarkdownField as Lt,SaveButton as Nt,ShowButton as Rt,TagField as Mt,UrlField as Et,useDataGrid as Bt}from"@refinedev/mui";import Dt from"@mui/material/Checkbox";import{DataGrid as Vt}from"@mui/x-data-grid";var Ar=a(({resource:e,fields:o,meta:c,isCustomPage:i,i18n:s})=>{let u=Y(e.label??e.name,"list"),g="dataGridProps?.rows",l=[["React","react",!0],["useDataGrid","@refinedev/mui"],["DataGrid","@mui/x-data-grid"],["GridColDef","@mui/x-data-grid"],["EditButton","@refinedev/mui"],["ShowButton","@refinedev/mui"],["DeleteButton","@refinedev/mui"],["List","@refinedev/mui"],["IResourceComponentsProps","@refinedev/core"]];s&&l.push(["useTranslate","@refinedev/core"]);let m=o.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),$=m.filter(Boolean).map(r=>{var D,N;if(r!=null&&r.relation&&!r.fieldable&&r.resource){l.push(["useMany","@refinedev/core"]);let w="";return r.multiple?w=`[].concat(...(${g}?.map((item: any) => ${d("item",r.key,r.accessor,!1)}) ?? []))`:w=`${g}?.map((item: any) => ${d("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${O(r.key,"Data")}, isLoading: ${O(r.key,"IsLoading")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${w},
                    queryOptions: {
                        enabled: !!${g},
                    },
                    ${W(((D=r==null?void 0:r.resource)==null?void 0:D.identifier)??((N=r==null?void 0:r.resource)==null?void 0:N.name),c,"getMany")}
                });
                `}}).filter(Boolean),v=m==null?void 0:m.map(r=>{if(r&&r.resource)return`${O(r.key,"Data")}?.data`}).filter(Boolean),R=a(r=>{var D,N;if(r.relation&&r.resource){let w=`${O(r.key,"Data")}?.data`,C=O(r.key,"IsLoading");if(Array.isArray(r.accessor))return;let _=`${C} ? <>Loading...</> : `,Ie=`field: "${r.key}"`,Ae=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",be=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,de="";if(r.multiple){l.push(["TagField","@refinedev/mui"]);let S="item";if(r!=null&&r.relationInfer){let L=`${w}?.find((resourceItems) => resourceItems.id === ${d("item",void 0,r.accessor)})`;S=d(L,void 0,(D=r==null?void 0:r.relationInfer)==null?void 0:D.accessor)}de=`
                renderCell: function render({ value }) {
                    return ${_} (
                        <>
                            {${d("value",void 0)}?.map((item: any, index: number) => (
                                <TagField key={index} value={${S}} />
                            ))}
                        </>
                    )
                }
                `}else if(r!=null&&r.relationInfer){let S=`${w}?.find((item) => item.id === value)`,L=d(S,void 0,(N=r==null?void 0:r.relationInfer)==null?void 0:N.accessor);de=`
                    renderCell: function render({ value }) {
                        return ${_} ${L};
                    }
                    `}else de="";return`
                {
                    ${Ie},
                    flex: 1,
                    ${be},${Ae}
                    minWidth: 300,${de}
                }
            `}},"renderRelationFields"),F=a(r=>{if(r.type==="image"){let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
                renderCell: function render({ value }) {
                    return (
                        <img src={${d("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} style={{ height: "50px", maxWidth: "100px" }} />
                    )
                }
            `;return r.multiple&&(C=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <img src={${d("item",void 0,r.accessor," + ")}} key={index} style={{ height: "50px", maxWidth: "100px" }} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${D},
                    flex: 1,
                    ${N},${w}
                    minWidth: 100,${C}
                }
            `}},"imageFields"),x=a(r=>{if(r.type==="email"){l.push(["EmailField","@refinedev/mui"]);let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
            renderCell: function render({ value }) {
                return (
                    <EmailField value={${d("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                )
            }
        `;return r.multiple&&(l.push(["TagField","@refinedev/mui"]),C=`
                renderCell: function render({ value }) {
                    return (
                        <>
                        {value?.map((item: any, index: number) => (
                            <TagField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                        ))}
                        </>
                    )
                }
            `),`
            {
                ${D},
                flex: 1,
                ${N},${w}
                minWidth: 250,${C}
            }
        `}},"emailFields"),T=a(r=>{if(r.type==="url"){l.push(["UrlField","@refinedev/mui"]);let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
                renderCell: function render({ value }) {
                    return (
                        <UrlField value={${d("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    )
                }
            `;return r.multiple&&(l.push(["TagField","@refinedev/mui"]),C=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: any) => (
                                <TagField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${D},
                    flex: 1,
                    ${N},${w}
                    minWidth: 250,${C}
                }
            `}},"urlFields"),p=a(r=>{if(r!=null&&r.type){l.push(["Checkbox","@mui/material"]);let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
                renderCell: function render({ value }) {
                    return (
                        <Checkbox checked={!!${d("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," && ")}} />
                    );
                }
            `;return r.multiple&&(C=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <Checkbox checked={!!${d("item",void 0,r.accessor," && ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${D},
                    ${N},${w}
                    minWidth: 100,${C}
                }
            `}},"booleanFields"),f=a(r=>{if(r.type==="date"){l.push(["DateField","@refinedev/mui"]);let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
                renderCell: function render({ value }) {
                    return <DateField value={value} />;
                }
            `;return r.multiple&&(C=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <DateField value={${d("item",void 0,r.accessor,' + " " + ')}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${D},
                    flex: 1,
                    ${N},${w}
                    minWidth: 250,${C}
                }
            `}},"dateFields"),n=a(r=>{if((r==null?void 0:r.type)==="richtext"){l.push(["MarkdownField","@refinedev/mui"]);let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C=`
                renderCell: function render({ value }) {
                    return <MarkdownField value={(value ?? "").slice(0, 80) + "..."} />;
                }
            `;return r.multiple&&(C=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <MarkdownField value={(${d("item",void 0,r.accessor,' + " " + ')}).slice(0, 80) + "..."} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${D},
                    flex: 1,
                    ${N},${w}
                    minWidth: 250,${C}
                }
            `}},"richtextFields"),I=a(r=>{if(r&&(r.type==="text"||r.type==="number")){let D=`field: "${r.key}"`,N=`headerName: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,w=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${d("row",r.key,r.accessor,!1)};

            return value;
        },`:"",C="";if(r.multiple){l.push(["TagField","@refinedev/mui"]);let _=d("item",void 0,r.accessor,' + " " + ');C=`
                renderCell: function render({ row }) {
                    return (
                        <>
                            {(${d("row",r.key)})?.map((item: any) => (
                                <TagField value={${_}} key={${_}} />
                            ))}
                        </>
                    )
                }
                `}return!r.multiple&&Array.isArray(r.accessor)&&(C=`
                renderCell: function render({ row }) {
                    return (
                        <>{${d("row",r.key,r.accessor)}}</>
                    );
                }
                `),`
            {
                ${D}, ${ce(r.key)?"":`
                flex: 1,`}
                ${N},${w}${r.type==="number"?"type: 'number',":""}
                minWidth: ${ce(r.key)?50:200},${C}
            }
            `}},"basicFields"),{canEdit:A,canShow:B,canDelete:M,meta:t}=e??{},h=M||(t==null?void 0:t.canDelete);A&&l.push(["EditButton","@refinedev/mui"]),B&&l.push(["ShowButton","@refinedev/mui"]),h&&l.push(["DeleteButton","@refinedev/mui"]);let P=A||B||h?k`
            {
                field: "actions",
                headerName: ${s?'translate("table.actions")':'"Actions"'},
                sortable: false,
                renderCell: function render({ row }) {
                    return (
                        <>
                            ${A?k`<EditButton hideText recordItemId={row.id} />`:""}
                            ${B?k`<ShowButton hideText recordItemId={row.id} />`:""}
                            ${h?k`<DeleteButton hideText recordItemId={row.id} />`:""}
                        </>
                    );
                },
                align: "center",
                headerAlign: "center",
                minWidth: 80,
            },
    `:"",H=o.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return I(r);case"richtext":return n(r);case"email":return x(r);case"image":return F(r);case"date":return f(r);case"boolean":return p(r);case"url":return T(r);case"relation":return R(r);default:return}});ae(l);let z=s&&"const translate = useTranslate();";return k`
    ${oe(l)}
    
    export const ${u}: React.FC<IResourceComponentsProps> = () => {
        ${z}
        const { dataGridProps } = useDataGrid(
            ${i?`{ resource: "${e.name}",
                        ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getList")}
                        }`:W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getList")?`{ ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getList")} },`:""} 
        );
    
        ${$}

        const columns = React.useMemo<GridColDef[]>(() => [
            ${[...H,P].filter(Boolean).join(`,\r
`)}
        ], [${s?"translate, ":""}${v.join(",")}]);

        return (
            <List>
                <DataGrid {...dataGridProps} columns={columns} autoHeight />
            </List>
        );
    };
    `},"renderer"),ze=pe({type:"list",additionalScope:[["@refinedev/mui","RefineMui",{useDataGrid:Bt,EditButton:Tt,SaveButton:Nt,DeleteButton:At,List:Pt,TagField:Mt,EmailField:St,UrlField:Et,DateField:wt,MarkdownField:Lt,ShowButton:Rt}],["@mui/x-data-grid","MuiXDataGrid",{DataGrid:Vt}],["@mui/material","MuiMaterial",{Checkbox:Dt}]],codeViewerComponent:ue,loadingComponent:me,errorComponent:le,renderer:Ar});import{Create as Ot,useAutocomplete as Wt}from"@refinedev/mui";import{useForm as Ht}from"@refinedev/react-hook-form";import jt from"@mui/material/Box";import Gt from"@mui/material/Autocomplete";import zt from"@mui/material/TextField";import _t from"@mui/material/Checkbox";import qt from"@mui/material/FormControlLabel";import{Controller as Qt}from"react-hook-form";var Tr=a(({resource:e,fields:o,meta:c,isCustomPage:i,i18n:s})=>{let u=Y(e.label??e.name,"create"),g=[["Create","@refinedev/mui"],["Box","@mui/material"],["useForm","@refinedev/react-hook-form"],["IResourceComponentsProps","@refinedev/core"]];s&&g.push(["useTranslate","@refinedev/core"]);let m=o.filter(p=>(p==null?void 0:p.relation)&&!(p!=null&&p.fieldable)&&(p==null?void 0:p.resource)).filter(Boolean).map(p=>{var f,n;if(p!=null&&p.relation&&!p.fieldable&&p.resource)return g.push(["useAutocomplete","@refinedev/mui"]),`
                const { autocompleteProps: ${O(p.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${p.resource.name}",
                    ${W(((f=p==null?void 0:p.resource)==null?void 0:f.identifier)??((n=p==null?void 0:p.resource)==null?void 0:n.name),c,"getList")}
                });
            `}).filter(Boolean),$=a(p=>{if(p.relation&&p.resource){g.push(["Autocomplete","@mui/material"],["Controller","react-hook-form"]);let f=O(p.key,"AutocompleteProps"),n=p.relationInfer&&p.relationInfer.accessor?typeof p.relationInfer.accessor=="string"?p.relationInfer.accessor:p.relationInfer.accessor[0]:"title",I=n.includes(".")||n.includes("[")||n.includes("]")||n.includes("-"),A=p.accessor?d("item",void 0,p.accessor,!1):"(item?.id ?? item)",B=p.accessor?d("value",void 0,p.accessor,!1):"(value?.id ?? value)",M=p.accessor?"value":p.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return k`
                <Controller
                    control={control}
                    name="${q(p.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${p.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"}
                    render={({ field }) => (
                        <Autocomplete
                            {...${f}}
                            {...field}
                            ${p.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${M});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${f}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${A}?.toString(),
                                    )?.${I?`["${n}"]`:n} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option?.id?.toString() === ${B}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label=${b({resource:e,field:p,i18n:s})}
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${d("(errors as any)",p.key,p.accessor,!1)}}
                                    helperText={${d("(errors as any)",p.key,p.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},"renderRelationFields"),v=a(p=>{if(p.type==="text"||p.type==="url"||p.type==="email"||p.type==="number"||p.type==="date"||p.type==="richtext")return ce(p.key)||(g.push(["TextField","@mui/material"]),p.multiple)?void 0:k`
                <TextField
                    {...register("${q(p.key,void 0,p.accessor)}", {
                        required: "This field is required",
                        ${p.type==="number"?"valueAsNumber: true,":""}
                    })}
                    error={!!${d("(errors as any)",p.key,p.accessor,!1)}}
                    helperText={${d("(errors as any)",p.key,p.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${p.type!=="date"&&p.type!=="richtext"?`type="${p.type}"`:""}
                    ${p.type==="richtext"?"multiline":""}
                    label=${b({resource:e,field:p,i18n:s})}
                    name="${q(p.key,void 0,p.accessor)}"
                />
            `},"basicInputFields"),R=a(p=>{if(p.type==="boolean")return g.push(["Checkbox","@mui/material"],["FormControlLabel","@mui/material"],["Controller","react-hook-form"]),p.multiple?void 0:k`
                <Controller
                    control={control}
                    name="${q(p.key,void 0,p.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label=${b({resource:e,field:p,i18n:s})} control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `},"booleanFields"),F=a(p=>{if(p.type==="date")return`
                {/*
                    DatePicker component is not included in "@refinedev/mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.

                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${v(p)??""}
                `},"dateFields"),x=o.map(p=>{switch(p==null?void 0:p.type){case"text":case"number":case"email":case"url":case"richtext":return v(p);case"date":return F(p);case"boolean":return R(p);case"relation":return $(p);default:return}});ae(g);let T=s&&"const translate = useTranslate();";return k`
    ${oe(g)}

    export const ${u}: React.FC<IResourceComponentsProps> = () => {
        ${T}
        const {
            saveButtonProps,
            refineCore: { formLoading },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                    ${W(e.identifier??e.name,c,"getOne")}
                }
            }`:W(e.identifier??e.name,c,"getOne")?`{
                        refineCoreProps: { ${W(e.identifier??e.name,c,"getOne")} }
                        }`:""}
        );

        ${m}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${x.join("")}
                </Box>
            </Create>
        );
    };
    `},"renderer"),_e=pe({type:"create",additionalScope:[["@refinedev/mui","RefineMui",{Create:Ot,useAutocomplete:Wt}],["@refinedev/react-hook-form","RefineReactHookForm",{useForm:Ht}],["@mui/material","MuiMaterial",{Box:jt,Autocomplete:Gt,TextField:zt,Checkbox:_t,FormControlLabel:qt}],["react-hook-form","ReactHookForm",{Controller:Qt}]],codeViewerComponent:ue,loadingComponent:me,errorComponent:le,renderer:Tr});import{Edit as Ut,useAutocomplete as Kt}from"@refinedev/mui";import{useForm as Zt}from"@refinedev/react-hook-form";import Yt from"@mui/material/Box";import Jt from"@mui/material/Autocomplete";import Xt from"@mui/material/TextField";import en from"@mui/material/Checkbox";import rn from"@mui/material/FormControlLabel";import{Controller as tn}from"react-hook-form";var Sr=a(({resource:e,fields:o,meta:c,isCustomPage:i,id:s,i18n:u})=>{let g=Y(e.label??e.name,"edit"),l=O(e.label??e.name,"Data"),m=[["Edit","@refinedev/mui"],["Box","@mui/material"],["useForm","@refinedev/react-hook-form"],["IResourceComponentsProps","@refinedev/core"]];u&&m.push(["useTranslate","@refinedev/core"]);let v=o.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)).filter(Boolean).map(n=>{var I,A;if(n!=null&&n.relation&&!n.fieldable&&n.resource){m.push(["useAutocomplete","@refinedev/mui"]);let B=d(l,n.key,n.accessor,!1);return n.multiple&&n.accessor&&(B=`${d(l,n.key)}?.map((item: any) => ${d("item",void 0,n.accessor)})`),`
                const { autocompleteProps: ${O(n.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${n.resource.name}",
                    defaultValue: ${B},
                    ${W(((I=n==null?void 0:n.resource)==null?void 0:I.identifier)??((A=n==null?void 0:n.resource)==null?void 0:A.name),c,"getList")}
                });
            `}}).filter(Boolean),R=a(n=>{if(n.relation&&n.resource){m.push(["Autocomplete","@mui/material"],["Controller","react-hook-form"]);let I=O(n.key,"AutocompleteProps"),A=n.relationInfer&&n.relationInfer.accessor?typeof n.relationInfer.accessor=="string"?n.relationInfer.accessor:n.relationInfer.accessor[0]:"title",B=A.includes(".")||A.includes("[")||A.includes("]")||A.includes("-"),M=n.accessor?d("item",void 0,n.accessor,!1):"(item?.id ?? item)",t=n.accessor?d("value",void 0,n.accessor,!1):"(value?.id ?? value)",h=n.accessor?"value":n.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return k`
                <Controller
                    control={control}
                    name="${q(n.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${n.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"}
                    render={({ field }) => (
                        <Autocomplete
                            {...${I}}
                            {...field}
                            ${n.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${h});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${I}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${M}?.toString(),
                                    )?.${B?`["${A}"]`:A} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option?.id?.toString() === ${t}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label=${b({resource:e,field:n,i18n:u})}
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${d("(errors as any)",n.key,n.accessor,!1)}}
                                    helperText={${d("(errors as any)",n.key,n.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},"renderRelationFields"),F=a(n=>{if(n.type==="text"||n.type==="url"||n.type==="email"||n.type==="number"||n.type==="date"||n.type==="richtext"){if(m.push(["TextField","@mui/material"]),n.multiple){m.push(["Box","@mui/material"]);let I=q(n.key,"${index}",n.accessor),A=d("(errors as any)",n.key,void 0,!1)+"?.[index]";return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${d(l,n.key)}?.map((item: any, index: number) => (
                            <TextField
                                key={index}
                                {...register(\`${I}\`, {
                                    required: "This field is required",
                                    ${n.type==="number"?"valueAsNumber: true,":""}
                                })}
                                error={!!${A}}
                                helperText={${A}?.message as string}
                                margin="normal"
                                fullWidth
                                InputLabelProps={{ shrink: true }}
                                ${n.type!=="date"&&n.type!=="richtext"?`type="${n.type}"`:""}
                                ${n.type==="richtext"?"multiline":""}
                                label=${b({resource:e,field:n,i18n:u})}
                                name={\`${q(n.key,void 0,n.accessor)}.\${index}\`}
                            />
                        ))}
                    </Box>
                `}return k`
                <TextField
                    {...register("${q(n.key,void 0,n.accessor)}", {
                        required: "This field is required",
                        ${n.type==="number"?"valueAsNumber: true,":""}
                    })}
                    error={!!${d("(errors as any)",n.key,n.accessor,!1)}}
                    helperText={${d("(errors as any)",n.key,n.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${n.type!=="date"&&n.type!=="richtext"?`type="${n.type}"`:""}
                    ${n.type==="richtext"?"multiline":""}
                    label=${b({resource:e,field:n,i18n:u})}
                    name="${q(n.key,void 0,n.accessor)}"
                    ${ce(n.key)?"disabled":""}
                />
            `}},"basicInputFields"),x=a(n=>{if(n.type==="boolean"){if(m.push(["Checkbox","@mui/material"],["FormControlLabel","@mui/material"],["Controller","react-hook-form"]),n.multiple){m.push(["Box","@mui/material"]);let I=q(n.key,"${index}",n.accessor);return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${d(l,n.key)}?.map((item: any, index: number) => (
                            <Controller
                                key={index}
                                control={control}
                                name={\`${I}\`}
                                // eslint-disable-next-line
                                defaultValue={null as any}
                                render={({ field }) => (
                                    <FormControlLabel label=${b({resource:e,field:n,i18n:u})} control={
                                        <Checkbox
                                            {...field}
                                            checked={field.value}
                                            onChange={(event) => {
                                                field.onChange(event.target.checked);
                                            }}
                                        />
                                    } />
                                )}
                            />
                        ))}
                    </Box>
                `}return k`
                <Controller
                    control={control}
                    name="${q(n.key,void 0,n.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label=${b({resource:e,field:n,i18n:u})} control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `}},"booleanFields"),T=a(n=>{if(n.type==="date")return`
                {/*
                    DatePicker component is not included in "@refinedev/mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.

                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${F(n)}
                `},"dateFields"),p=o.map(n=>{switch(n==null?void 0:n.type){case"text":case"number":case"email":case"url":case"richtext":return F(n);case"date":return T(n);case"boolean":return x(n);case"relation":return R(n);default:return}});ae(m);let f=u&&"const translate = useTranslate();";return k`
    ${oe(m)}

    export const ${g}: React.FC<IResourceComponentsProps> = () => {
        ${f}
        const {
            saveButtonProps,
            refineCore: { queryResult },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${ve(s)},
                    action: "edit",
                    ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")}
                }
            }`:W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")?`{ refineCoreProps: { ${W((e==null?void 0:e.identifier)??(e==null?void 0:e.name),c,"getOne")} }
              }`:""}
        );

        const ${l} = queryResult?.data?.data;

        ${v}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${p.join("")}
                </Box>
            </Edit>
        );
    };
    `},"renderer"),qe=pe({type:"edit",additionalScope:[["@refinedev/mui","RefineMui",{Edit:Ut,useAutocomplete:Kt}],["@refinedev/react-hook-form","RefineReactHookForm",{useForm:Zt}],["@mui/material","MuiMaterial",{Box:Yt,Autocomplete:Jt,TextField:Xt,Checkbox:en,FormControlLabel:rn}],["react-hook-form","ReactHookForm",{Controller:tn}]],codeViewerComponent:ue,loadingComponent:me,errorComponent:le,renderer:Sr});var zi=a(({action:e,id:o,...c})=>{let{action:i,id:s}=nn();switch(e??i){case"show":return we.createElement(Ge,{...c,id:o??s});case"create":return we.createElement(_e,{...c,id:o??s});case"edit":return we.createElement(qe,{...c,id:o??s});default:return we.createElement(ze,{...c,id:o??s})}},"MuiInferencer");export{_e as MuiCreateInferencer,Tr as MuiCreateRenderer,qe as MuiEditInferencer,Sr as MuiEditRenderer,zi as MuiInferencer,ze as MuiListInferencer,Ar as MuiListRenderer,Ge as MuiShowInferencer,wr as MuiShowRenderer};
//# sourceMappingURL=mui.js.map