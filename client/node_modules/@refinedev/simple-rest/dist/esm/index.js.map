{"version":3,"sources":["../../src/index.ts","../../src/provider.ts","../../src/utils/mapOperator.ts","../../src/utils/generateSort.ts","../../src/utils/generateFilter.ts","../../src/utils/axios.ts"],"sourcesContent":["import { stringify } from \"query-string\";\nimport { dataProvider } from \"./provider\";\n\nexport default dataProvider;\n\nexport * from \"./utils\";\n\nexport { stringify };\n","import { AxiosInstance } from \"axios\";\nimport { stringify } from \"query-string\";\nimport { DataProvider } from \"@refinedev/core\";\nimport { axiosInstance, generateSort, generateFilter } from \"./utils\";\n\ntype MethodTypes = \"get\" | \"delete\" | \"head\" | \"options\";\ntype MethodTypesWithBody = \"post\" | \"put\" | \"patch\";\n\nexport const dataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): Omit<\n    Required<DataProvider>,\n    \"createMany\" | \"updateMany\" | \"deleteMany\"\n> => ({\n    getList: async ({ resource, pagination, filters, sorters, meta }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const {\n            current = 1,\n            pageSize = 10,\n            mode = \"server\",\n        } = pagination ?? {};\n\n        const { headers: headersFromMeta, method } = meta ?? {};\n        const requestMethod = (method as MethodTypes) ?? \"get\";\n\n        const queryFilters = generateFilter(filters);\n\n        const query: {\n            _start?: number;\n            _end?: number;\n            _sort?: string;\n            _order?: string;\n        } = {};\n\n        if (mode === \"server\") {\n            query._start = (current - 1) * pageSize;\n            query._end = current * pageSize;\n        }\n\n        const generatedSort = generateSort(sorters);\n        if (generatedSort) {\n            const { _sort, _order } = generatedSort;\n            query._sort = _sort.join(\",\");\n            query._order = _order.join(\",\");\n        }\n\n        const { data, headers } = await httpClient[requestMethod](\n            `${url}?${stringify(query)}&${stringify(queryFilters)}`,\n            {\n                headers: headersFromMeta,\n            },\n        );\n\n        const total = +headers[\"x-total-count\"];\n\n        return {\n            data,\n            total: total || data.length,\n        };\n    },\n\n    getMany: async ({ resource, ids, meta }) => {\n        const { headers, method } = meta ?? {};\n        const requestMethod = (method as MethodTypes) ?? \"get\";\n\n        const { data } = await httpClient[requestMethod](\n            `${apiUrl}/${resource}?${stringify({ id: ids })}`,\n            { headers },\n        );\n\n        return {\n            data,\n        };\n    },\n\n    create: async ({ resource, variables, meta }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { headers, method } = meta ?? {};\n        const requestMethod = (method as MethodTypesWithBody) ?? \"post\";\n\n        const { data } = await httpClient[requestMethod](url, variables, {\n            headers,\n        });\n\n        return {\n            data,\n        };\n    },\n\n    update: async ({ resource, id, variables, meta }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { headers, method } = meta ?? {};\n        const requestMethod = (method as MethodTypesWithBody) ?? \"patch\";\n\n        const { data } = await httpClient[requestMethod](url, variables, {\n            headers,\n        });\n\n        return {\n            data,\n        };\n    },\n\n    getOne: async ({ resource, id, meta }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { headers, method } = meta ?? {};\n        const requestMethod = (method as MethodTypes) ?? \"get\";\n\n        const { data } = await httpClient[requestMethod](url, { headers });\n\n        return {\n            data,\n        };\n    },\n\n    deleteOne: async ({ resource, id, variables, meta }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { headers, method } = meta ?? {};\n        const requestMethod = (method as MethodTypesWithBody) ?? \"delete\";\n\n        const { data } = await httpClient[requestMethod](url, {\n            data: variables,\n            headers,\n        });\n\n        return {\n            data,\n        };\n    },\n\n    getApiUrl: () => {\n        return apiUrl;\n    },\n\n    custom: async ({\n        url,\n        method,\n        filters,\n        sorters,\n        payload,\n        query,\n        headers,\n    }) => {\n        let requestUrl = `${url}?`;\n\n        if (sorters) {\n            const generatedSort = generateSort(sorters);\n            if (generatedSort) {\n                const { _sort, _order } = generatedSort;\n                const sortQuery = {\n                    _sort: _sort.join(\",\"),\n                    _order: _order.join(\",\"),\n                };\n                requestUrl = `${requestUrl}&${stringify(sortQuery)}`;\n            }\n        }\n\n        if (filters) {\n            const filterQuery = generateFilter(filters);\n            requestUrl = `${requestUrl}&${stringify(filterQuery)}`;\n        }\n\n        if (query) {\n            requestUrl = `${requestUrl}&${stringify(query)}`;\n        }\n\n        let axiosResponse;\n        switch (method) {\n            case \"put\":\n            case \"post\":\n            case \"patch\":\n                axiosResponse = await httpClient[method](url, payload, {\n                    headers\n                });\n                break;\n            case \"delete\":\n                axiosResponse = await httpClient.delete(url, {\n                    data: payload,\n                    headers: headers\n                });\n                break;\n            default:\n                axiosResponse = await httpClient.get(requestUrl,{\n                    headers\n                });\n                break;\n        }\n\n        const { data } = axiosResponse;\n\n        return Promise.resolve({ data });\n    },\n});\n","import { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators): string => {\n    switch (operator) {\n        case \"ne\":\n        case \"gte\":\n        case \"lte\":\n            return `_${operator}`;\n        case \"contains\":\n            return \"_like\";\n        case \"eq\":\n        default:\n            return \"\";\n    }\n};\n","import { CrudSorting } from \"@refinedev/core\";\n\nexport const generateSort = (sorters?: CrudSorting) => {\n    if (sorters && sorters.length > 0) {\n        const _sort: string[] = [];\n        const _order: string[] = [];\n\n        sorters.map((item) => {\n            _sort.push(item.field);\n            _order.push(item.order);\n        });\n\n        return {\n            _sort,\n            _order,\n        };\n    }\n\n    return;\n};\n","import { CrudFilters } from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\n\nexport const generateFilter = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: string } = {};\n\n    if (filters) {\n        filters.map((filter) => {\n            if (filter.operator === \"or\" || filter.operator === \"and\") {\n                throw new Error(\n                    `[@refinedev/simple-rest]: \\`operator: ${filter.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`,\n                );\n            }\n\n            if (\"field\" in filter) {\n                const { field, operator, value } = filter;\n\n                if (field === \"q\") {\n                    queryFilters[field] = value;\n                    return;\n                }\n\n                const mappedOperator = mapOperator(operator);\n                queryFilters[`${field}${mappedOperator}`] = value;\n            }\n        });\n    }\n\n    return queryFilters;\n};\n","import { HttpError } from \"@refinedev/core\";\nimport axios from \"axios\";\n\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    },\n);\n\nexport { axiosInstance };\n"],"mappings":"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","names":["stringify","stringify","mapOperator","operator","generateSort","sorters","_sort","_order","item","generateFilter","filters","queryFilters","filter","field","operator","value","mappedOperator","mapOperator","axios","axiosInstance","response","error","_a","_b","_c","customError","dataProvider","apiUrl","httpClient","axiosInstance","resource","pagination","filters","sorters","meta","url","current","pageSize","mode","headersFromMeta","method","requestMethod","queryFilters","generateFilter","query","generatedSort","generateSort","_sort","_order","data","headers","stringify","total","ids","variables","id","payload","requestUrl","sortQuery","filterQuery","axiosResponse","src_default","dataProvider"]}