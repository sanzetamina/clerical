import {
  O,
  T,
  d,
  p
} from "./chunk-SCGGGWO5.js";
import {
  require_react_dom
} from "./chunk-GYWC62UC.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __commonJS,
  __export,
  __require,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React11 = require_react();
        var ReactSharedInternals = React11.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState5 = React11.useState, useEffect6 = React11.useEffect, useLayoutEffect = React11.useLayoutEffect, useDebugValue = React11.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React11.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState5({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect6(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$12(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$12 : useSyncExternalStore2;
        var useSyncExternalStore$2 = React11.useSyncExternalStore !== void 0 ? React11.useSyncExternalStore : shim;
        exports2.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/stackframe/stackframe.js
var require_stackframe = __commonJS({
  "node_modules/stackframe/stackframe.js"(exports2, module2) {
    (function(root2, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("stackframe", [], factory);
      } else if (typeof exports2 === "object") {
        module2.exports = factory();
      } else {
        root2.StackFrame = factory();
      }
    })(exports2, function() {
      "use strict";
      function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
      function _getter(p3) {
        return function() {
          return this[p3];
        };
      }
      var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
      var numericProps = ["columnNumber", "lineNumber"];
      var stringProps = ["fileName", "functionName", "source"];
      var arrayProps = ["args"];
      var objectProps = ["evalOrigin"];
      var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
      function StackFrame(obj) {
        if (!obj)
          return;
        for (var i3 = 0; i3 < props.length; i3++) {
          if (obj[props[i3]] !== void 0) {
            this["set" + _capitalize(props[i3])](obj[props[i3]]);
          }
        }
      }
      StackFrame.prototype = {
        getArgs: function() {
          return this.args;
        },
        setArgs: function(v2) {
          if (Object.prototype.toString.call(v2) !== "[object Array]") {
            throw new TypeError("Args must be an Array");
          }
          this.args = v2;
        },
        getEvalOrigin: function() {
          return this.evalOrigin;
        },
        setEvalOrigin: function(v2) {
          if (v2 instanceof StackFrame) {
            this.evalOrigin = v2;
          } else if (v2 instanceof Object) {
            this.evalOrigin = new StackFrame(v2);
          } else {
            throw new TypeError("Eval Origin must be an Object or StackFrame");
          }
        },
        toString: function() {
          var fileName = this.getFileName() || "";
          var lineNumber = this.getLineNumber() || "";
          var columnNumber = this.getColumnNumber() || "";
          var functionName = this.getFunctionName() || "";
          if (this.getIsEval()) {
            if (fileName) {
              return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
            }
            return "[eval]:" + lineNumber + ":" + columnNumber;
          }
          if (functionName) {
            return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
          }
          return fileName + ":" + lineNumber + ":" + columnNumber;
        }
      };
      StackFrame.fromString = function StackFrame$$fromString(str) {
        var argsStartIndex = str.indexOf("(");
        var argsEndIndex = str.lastIndexOf(")");
        var functionName = str.substring(0, argsStartIndex);
        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
        var locationString = str.substring(argsEndIndex + 1);
        if (locationString.indexOf("@") === 0) {
          var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
          var fileName = parts[1];
          var lineNumber = parts[2];
          var columnNumber = parts[3];
        }
        return new StackFrame({
          functionName,
          args: args || void 0,
          fileName,
          lineNumber: lineNumber || void 0,
          columnNumber: columnNumber || void 0
        });
      };
      for (var i2 = 0; i2 < booleanProps.length; i2++) {
        StackFrame.prototype["get" + _capitalize(booleanProps[i2])] = _getter(booleanProps[i2]);
        StackFrame.prototype["set" + _capitalize(booleanProps[i2])] = function(p3) {
          return function(v2) {
            this[p3] = Boolean(v2);
          };
        }(booleanProps[i2]);
      }
      for (var j = 0; j < numericProps.length; j++) {
        StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
        StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p3) {
          return function(v2) {
            if (!_isNumber(v2)) {
              throw new TypeError(p3 + " must be a Number");
            }
            this[p3] = Number(v2);
          };
        }(numericProps[j]);
      }
      for (var k = 0; k < stringProps.length; k++) {
        StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
        StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p3) {
          return function(v2) {
            this[p3] = String(v2);
          };
        }(stringProps[k]);
      }
      return StackFrame;
    });
  }
});

// node_modules/error-stack-parser/error-stack-parser.js
var require_error_stack_parser = __commonJS({
  "node_modules/error-stack-parser/error-stack-parser.js"(exports2, module2) {
    (function(root2, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("error-stack-parser", ["stackframe"], factory);
      } else if (typeof exports2 === "object") {
        module2.exports = factory(require_stackframe());
      } else {
        root2.ErrorStackParser = factory(root2.StackFrame);
      }
    })(exports2, function ErrorStackParser(StackFrame) {
      "use strict";
      var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
      var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
      var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
      return {
        /**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */
        parse: function ErrorStackParser$$parse(error) {
          if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
            return this.parseOpera(error);
          } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
            return this.parseV8OrIE(error);
          } else if (error.stack) {
            return this.parseFFOrSafari(error);
          } else {
            throw new Error("Cannot parse given Error object");
          }
        },
        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
          if (urlLike.indexOf(":") === -1) {
            return [urlLike];
          }
          var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
          var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
          return [parts[1], parts[2] || void 0, parts[3] || void 0];
        },
        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(CHROME_IE_STACK_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf("(eval ") > -1) {
              line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, "");
            }
            var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, "");
            var location = sanitizedLine.match(/ (\(.+\)$)/);
            sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
            var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);
            var functionName = location && sanitizedLine || void 0;
            var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
            return new StackFrame({
              functionName,
              fileName,
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        },
        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !line.match(SAFARI_NATIVE_CODE_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf(" > eval") > -1) {
              line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
            }
            if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
              return new StackFrame({
                functionName: line
              });
            } else {
              var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
              var matches = line.match(functionNameRegex);
              var functionName = matches && matches[1] ? matches[1] : void 0;
              var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
              return new StackFrame({
                functionName,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }
          }, this);
        },
        parseOpera: function ErrorStackParser$$parseOpera(e) {
          if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
            return this.parseOpera9(e);
          } else if (!e.stack) {
            return this.parseOpera10(e);
          } else {
            return this.parseOpera11(e);
          }
        },
        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
          var lines = e.message.split("\n");
          var result = [];
          for (var i2 = 2, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(new StackFrame({
                fileName: match[2],
                lineNumber: match[1],
                source: lines[i2]
              }));
            }
          }
          return result;
        },
        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
          var lines = e.stacktrace.split("\n");
          var result = [];
          for (var i2 = 0, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(
                new StackFrame({
                  functionName: match[3] || void 0,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i2]
                })
              );
            }
          }
          return result;
        },
        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
          }, this);
          return filtered.map(function(line) {
            var tokens = line.split("@");
            var locationParts = this.extractLocation(tokens.pop());
            var functionCall = tokens.shift() || "";
            var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
            var argsRaw;
            if (functionCall.match(/\(([^)]*)\)/)) {
              argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
            }
            var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
            return new StackFrame({
              functionName,
              args,
              fileName: locationParts[0],
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        }
      };
    });
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports2, module2) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i2 = 0; i2 < a.length; i2 += 1) {
        arr[i2] = a[i2];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset || 0, j = 0; i2 < arrLike.length; i2 += 1, j += 1) {
        arr[j] = arrLike[i2];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str += arr[i2];
        if (i2 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x2) {
      return x2.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn2 = doEval2("%AsyncGeneratorFunction%");
        if (fn2) {
          value = fn2.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath2 = function stringToPath3(string) {
      var first = $strSlice(string, 0, 1);
      var last2 = $strSlice(string, -1);
      if (first === "%" && last2 !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last2 === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName2, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath2(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last2 = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first !== last2) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
          return true;
        } catch (e) {
          return false;
        }
      }
      return false;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!hasPropertyDescriptors()) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var hasPropertyDescriptors = require_has_property_descriptors()();
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = hasPropertyDescriptors && GetIntrinsic("%Object.defineProperty%", true);
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    var $SyntaxError = GetIntrinsic("%SyntaxError%");
    var $TypeError = GetIntrinsic("%TypeError%");
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property2, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property2 !== "string" && typeof property2 !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property2);
      if ($defineProperty) {
        $defineProperty(obj, property2, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property2] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn2, length) {
      if (typeof fn2 !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn2 && gOPD) {
        var desc = gOPD(fn2, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(fn2, "length", length, true, true);
        } else {
          define2(fn2, "length", length);
        }
      }
      return fn2;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports2, module2) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString2 = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O3) {
      return O3.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol2(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray2(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys2 = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
      }
      if (isSymbol2(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i2 = 0; i2 < attrs.length; i2++) {
          s += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray2(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs2 = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs2)) {
          return "[" + indentedJoin(xs2, indent) + "]";
        }
        return "[ " + $join.call(xs2, ", ") + " ]";
      }
      if (isError2(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys2 = arrObjKeys(obj, inspect);
        var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag3 = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag3 || protoTag ? "[" + $join.call($concat.call([], stringTag3 || [], protoTag || []), ": ") + "] " : "");
        if (ys2.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys2, indent) + "}";
        }
        return tag + "{ " + $join.call(ys2, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray2(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError2(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol2(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString2.call(obj);
    }
    function nameOf(f2) {
      if (f2.name) {
        return f2.name;
      }
      var m2 = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
      if (m2) {
        return m2[1];
      }
      return null;
    }
    function indexOf(xs2, x2) {
      if (xs2.indexOf) {
        return xs2.indexOf(x2);
      }
      for (var i2 = 0, l2 = xs2.length; i2 < l2; i2++) {
        if (xs2[i2] === x2) {
          return i2;
        }
      }
      return -1;
    }
    function isMap(x2) {
      if (!mapSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        mapSize.call(x2);
        try {
          setSize.call(x2);
        } catch (s) {
          return true;
        }
        return x2 instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x2) {
      if (!weakMapHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x2, weakMapHas);
        try {
          weakSetHas.call(x2, weakSetHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x2) {
      if (!weakRefDeref || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x2);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x2) {
      if (!setSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        setSize.call(x2);
        try {
          mapSize.call(x2);
        } catch (m2) {
          return true;
        }
        return x2 instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x2) {
      if (!weakSetHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x2, weakSetHas);
        try {
          weakMapHas.call(x2, weakMapHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x2) {
      if (!x2 || typeof x2 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
        return true;
      }
      return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x2 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x2) {
        return "\\" + x2;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs2) {
      for (var i2 = 0; i2 < xs2.length; i2++) {
        if (indexOf(xs2[i2], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs2, indent) {
      if (xs2.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray2(obj);
      var xs2 = [];
      if (isArr) {
        xs2.length = obj.length;
        for (var i2 = 0; i2 < obj.length; i2++) {
          xs2[i2] = has(obj, i2) ? inspect(obj[i2], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs2.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs2.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs2.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs2;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports2, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports2, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray2 = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i2 = 0; i2 < 256; ++i2) {
        array.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray2(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i2 = 0; i2 < source.length; ++i2) {
        if (typeof source[i2] !== "undefined") {
          obj[i2] = source[i2];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray2(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray2(target) && !isArray2(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray2(target) && isArray2(source)) {
        source.forEach(function(item, i2) {
          if (has.call(target, i2)) {
            var targetItem = target[i2];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i2] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i2] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i2 = 0; i2 < string.length; ++i2) {
        var c = string.charCodeAt(i2);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i2);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i2 += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i2) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i2 = 0; i2 < queue.length; ++i2) {
        var item = queue[i2];
        var obj = item.obj[item.prop];
        var keys2 = Object.keys(obj);
        for (var j = 0; j < keys2.length; ++j) {
          var key = keys2[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer2 = function isBuffer3(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn2) {
      if (isArray2(val)) {
        var mapped = [];
        for (var i2 = 0; i2 < val.length; i2 += 1) {
          mapped.push(fn2(val[i2]));
        }
        return mapped;
      }
      return fn2(val);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer: isBuffer2,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports2, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray2 = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray2(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
      return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray2(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray2(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray2(filter)) {
        objKeys = filter;
      } else {
        var keys2 = Object.keys(obj);
        objKeys = sort ? keys2.sort(sort) : keys2;
      }
      var adjustedPrefix = commaRoundTrip && isArray2(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray2(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray2(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray2(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray2(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys2 = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i2 = 0; i2 < objKeys.length; ++i2) {
        var key = objKeys[i2];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys2, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys2.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray2 = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i2;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i2 = 0; i2 < parts.length; ++i2) {
          if (parts[i2].indexOf("utf8=") === 0) {
            if (parts[i2] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i2] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i2;
            i2 = parts.length;
          }
        }
      }
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (i2 === skipIndex) {
          continue;
        }
        var part = parts[i2];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray2(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i2 = chain.length - 1; i2 >= 0; --i2) {
        var obj;
        var root2 = chain[i2];
        if (root2 === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root2.charAt(0) === "[" && root2.charAt(root2.length - 1) === "]" ? root2.slice(1, -1) : root2;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root2 !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys2 = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(parent);
      }
      var i2 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i2 < options.depth) {
        i2 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(segment[1]);
      }
      if (segment) {
        keys2.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys2, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys2 = Object.keys(tempObj);
      for (var i2 = 0; i2 < keys2.length; ++i2) {
        var key = keys2[i2];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports2, module2) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/warn-once/index.js
var require_warn_once = __commonJS({
  "node_modules/warn-once/index.js"(exports2, module2) {
    var DEV = true;
    var warnings = /* @__PURE__ */ new Set();
    function warnOnce(condition, ...rest) {
      if (DEV && condition) {
        const key = rest.join(" ");
        if (warnings.has(key)) {
          return;
        }
        warnings.add(key);
        console.warn(...rest);
      }
    }
    module2.exports = warnOnce;
  }
});

// node_modules/pluralize/pluralize.js
var require_pluralize = __commonJS({
  "node_modules/pluralize/pluralize.js"(exports2, module2) {
    (function(root2, pluralize) {
      if (typeof __require === "function" && typeof exports2 === "object" && typeof module2 === "object") {
        module2.exports = pluralize();
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return pluralize();
        });
      } else {
        root2.pluralize = pluralize();
      }
    })(exports2, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token) {
        if (word === token)
          return token;
        if (word === word.toLowerCase())
          return token.toLowerCase();
        if (word === word.toUpperCase())
          return token.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }
        return token.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match, index) {
          return args[index] || "";
        });
      }
      function replace(word, rule) {
        return word.replace(rule[0], function(match, index) {
          var result = interpolate(rule[1], arguments);
          if (match === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match, result);
        });
      }
      function sanitizeWord(token, word, rules) {
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word))
            return replace(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }
          return sanitizeWord(token, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token))
            return true;
          if (replaceMap.hasOwnProperty(token))
            return false;
          return sanitizeWord(token, token, rules) === token;
        };
      }
      function pluralize(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize.singular(word) : pluralize.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize.plural = replaceWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize.isPlural = checkWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize.singular = replaceWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize.isSingular = checkWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize.addPluralRule(word, "$0");
        pluralize.addSingularRule(word, "$0");
      };
      pluralize.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        // Pronouns.
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        // Words ending in with a consonant and `o`.
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        // Ends with `us`.
        ["genus", "genera"],
        ["viscus", "viscera"],
        // Ends with `ma`.
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        // Other irregular rules.
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["passerby", "passersby"]
      ].forEach(function(rule) {
        return pluralize.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
        [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize.addSingularRule(rule[0], rule[1]);
      });
      [
        // Singular words with no plurals.
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "aircraft",
        "alcohol",
        "ammo",
        "analytics",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "firmware",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "hardware",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "mud",
        "manga",
        "news",
        "only",
        "personnel",
        "pike",
        "plankton",
        "pliers",
        "police",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "software",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transportation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        /pok[eé]mon$/i,
        // Regexes.
        /[^aeiou]ese$/i,
        // "chinese", "japanese"
        /deer$/i,
        // "deer", "reindeer"
        /fish$/i,
        // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i,
        // "carnivorous"
        /pox$/i,
        // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize.addUncountableRule);
      return pluralize;
    });
  }
});

// node_modules/export-to-csv-fix-source-map/build/export-to-csv.js
var require_export_to_csv = __commonJS({
  "node_modules/export-to-csv-fix-source-map/build/export-to-csv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var CsvConfigConsts = function() {
      function CsvConfigConsts2() {
      }
      CsvConfigConsts2.EOL = "\r\n";
      CsvConfigConsts2.BOM = "\uFEFF";
      CsvConfigConsts2.DEFAULT_FIELD_SEPARATOR = ",";
      CsvConfigConsts2.DEFAULT_DECIMAL_SEPARATOR = ".";
      CsvConfigConsts2.DEFAULT_QUOTE = '"';
      CsvConfigConsts2.DEFAULT_SHOW_TITLE = false;
      CsvConfigConsts2.DEFAULT_TITLE = "My Generated Report";
      CsvConfigConsts2.DEFAULT_FILENAME = "generated";
      CsvConfigConsts2.DEFAULT_SHOW_LABELS = false;
      CsvConfigConsts2.DEFAULT_USE_TEXT_FILE = false;
      CsvConfigConsts2.DEFAULT_USE_BOM = true;
      CsvConfigConsts2.DEFAULT_HEADER = [];
      CsvConfigConsts2.DEFAULT_KEYS_AS_HEADERS = false;
      return CsvConfigConsts2;
    }();
    exports2.CsvConfigConsts = CsvConfigConsts;
    exports2.ConfigDefaults = {
      filename: CsvConfigConsts.DEFAULT_FILENAME,
      fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,
      quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,
      decimalSeparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,
      showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,
      showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,
      title: CsvConfigConsts.DEFAULT_TITLE,
      useTextFile: CsvConfigConsts.DEFAULT_USE_TEXT_FILE,
      useBom: CsvConfigConsts.DEFAULT_USE_BOM,
      headers: CsvConfigConsts.DEFAULT_HEADER,
      useKeysAsHeaders: CsvConfigConsts.DEFAULT_KEYS_AS_HEADERS
    };
    var ExportToCsv = function() {
      function ExportToCsv2(options) {
        this._csv = "";
        var config = options || {};
        this._options = objectAssign({}, exports2.ConfigDefaults, config);
        if (this._options.useKeysAsHeaders && this._options.headers && this._options.headers.length > 0) {
          console.warn("Option to use object keys as headers was set, but headers were still passed!");
        }
      }
      Object.defineProperty(ExportToCsv2.prototype, "options", {
        get: function() {
          return this._options;
        },
        set: function(options) {
          this._options = objectAssign({}, exports2.ConfigDefaults, options);
        },
        enumerable: true,
        configurable: true
      });
      ExportToCsv2.prototype.generateCsv = function(jsonData, shouldReturnCsv) {
        if (shouldReturnCsv === void 0) {
          shouldReturnCsv = false;
        }
        this._csv = "";
        this._parseData(jsonData);
        if (this._options.useBom) {
          this._csv += CsvConfigConsts.BOM;
        }
        if (this._options.showTitle) {
          this._csv += this._options.title + "\r\n\n";
        }
        this._getHeaders();
        this._getBody();
        if (this._csv == "") {
          console.log("Invalid data");
          return;
        }
        if (shouldReturnCsv) {
          return this._csv;
        }
        var FileType = this._options.useTextFile ? "plain" : "csv";
        var fileExtension = this._options.useTextFile ? ".txt" : ".csv";
        var blob = new Blob([this._csv], { "type": "text/" + FileType + ";charset=utf8;" });
        if (navigator.msSaveBlob) {
          var filename = this._options.filename.replace(/ /g, "_") + fileExtension;
          navigator.msSaveBlob(blob, filename);
        } else {
          var attachmentType = this._options.useTextFile ? "text" : "csv";
          var uri = "data:attachment/" + attachmentType + ";charset=utf-8," + encodeURI(this._csv);
          var link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.setAttribute("visibility", "hidden");
          link.download = this._options.filename.replace(/ /g, "_") + fileExtension;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      };
      ExportToCsv2.prototype._getHeaders = function() {
        if (!this._options.showLabels && !this._options.useKeysAsHeaders) {
          return;
        }
        var useKeysAsHeaders = this._options.useKeysAsHeaders;
        var headers = useKeysAsHeaders ? Object.keys(this._data[0]) : this._options.headers;
        if (headers.length > 0) {
          var row = "";
          for (var keyPos = 0; keyPos < headers.length; keyPos++) {
            row += headers[keyPos] + this._options.fieldSeparator;
          }
          row = row.slice(0, -1);
          this._csv += row + CsvConfigConsts.EOL;
        }
      };
      ExportToCsv2.prototype._getBody = function() {
        var keys2 = Object.keys(this._data[0]);
        for (var i2 = 0; i2 < this._data.length; i2++) {
          var row = "";
          for (var keyPos = 0; keyPos < keys2.length; keyPos++) {
            var key = keys2[keyPos];
            row += this._formatData(this._data[i2][key]) + this._options.fieldSeparator;
          }
          row = row.slice(0, -1);
          this._csv += row + CsvConfigConsts.EOL;
        }
      };
      ExportToCsv2.prototype._formatData = function(data) {
        if (this._options.decimalSeparator === "locale" && this._isFloat(data)) {
          return data.toLocaleString();
        }
        if (this._options.decimalSeparator !== "." && this._isFloat(data)) {
          return data.toString().replace(".", this._options.decimalSeparator);
        }
        if (typeof data === "string") {
          data = data.replace(/"/g, '""');
          if (this._options.quoteStrings || data.indexOf(",") > -1 || data.indexOf("\n") > -1 || data.indexOf("\r") > -1) {
            data = this._options.quoteStrings + data + this._options.quoteStrings;
          }
          return data;
        }
        if (typeof data === "boolean") {
          return data ? "TRUE" : "FALSE";
        }
        return data;
      };
      ExportToCsv2.prototype._isFloat = function(input) {
        return +input === input && (!isFinite(input) || Boolean(input % 1));
      };
      ExportToCsv2.prototype._parseData = function(jsonData) {
        this._data = typeof jsonData != "object" ? JSON.parse(jsonData) : jsonData;
        return this._data;
      };
      return ExportToCsv2;
    }();
    exports2.ExportToCsv = ExportToCsv;
    var hasOwnProperty10 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function objectAssign(target) {
      var source = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        source[_i2 - 1] = arguments[_i2];
      }
      var from;
      var to2 = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty10.call(from, key)) {
            to2[key] = from[key];
          }
        }
        if (Object.getOwnPropertySymbols) {
          symbols = Object.getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to2[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to2;
    }
  }
});

// node_modules/export-to-csv-fix-source-map/build/index.js
var require_build = __commonJS({
  "node_modules/export-to-csv-fix-source-map/build/index.js"(exports2) {
    "use strict";
    function __export2(m2) {
      for (var p3 in m2)
        if (!exports2.hasOwnProperty(p3))
          exports2[p3] = m2[p3];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    __export2(require_export_to_csv());
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports2, module2) {
    !function(e, t) {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module2 && "undefined" != typeof exports2 ? module2.exports = t() : e.Papa = t();
    }(exports2, function s() {
      "use strict";
      var f2 = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f2 ? f2 : {};
      var n = !f2.document && !!f2.postMessage, o2 = f2.IS_PAPA_WORKER || false, a = {}, u = 0, b = { parse: function(e, t) {
        var r2 = (t = t || {}).dynamicTyping || false;
        J(r2) && (t.dynamicTypingFunction = r2, r2 = {});
        if (t.dynamicTyping = r2, t.transform = !!J(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
          var i2 = function() {
            if (!b.WORKERS_SUPPORTED)
              return false;
            var e2 = (r3 = f2.URL || f2.webkitURL || null, i3 = s.toString(), b.BLOB_URL || (b.BLOB_URL = r3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", i3, ")();"], { type: "text/javascript" })))), t2 = new f2.Worker(e2);
            var r3, i3;
            return t2.onmessage = _2, t2.id = u++, a[t2.id] = t2;
          }();
          return i2.userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = J(t.step), t.chunk = J(t.chunk), t.complete = J(t.complete), t.error = J(t.error), delete t.worker, void i2.postMessage({ input: e, config: t, workerId: i2.id });
        }
        var n2 = null;
        b.NODE_STREAM_INPUT, "string" == typeof e ? (e = function(e2) {
          if (65279 === e2.charCodeAt(0))
            return e2.slice(1);
          return e2;
        }(e), n2 = t.download ? new l2(t) : new p3(t)) : true === e.readable && J(e.read) && J(e.on) ? n2 = new g2(t) : (f2.File && e instanceof File || e instanceof Object) && (n2 = new c(t));
        return n2.stream(e);
      }, unparse: function(e, t) {
        var n2 = false, _3 = true, m3 = ",", y3 = "\r\n", s2 = '"', a2 = s2 + s2, r2 = false, i2 = null, o3 = false;
        !function() {
          if ("object" != typeof t)
            return;
          "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function(e2) {
            return -1 !== t.delimiter.indexOf(e2);
          }).length || (m3 = t.delimiter);
          ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n2 = t.quotes);
          "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (r2 = t.skipEmptyLines);
          "string" == typeof t.newline && (y3 = t.newline);
          "string" == typeof t.quoteChar && (s2 = t.quoteChar);
          "boolean" == typeof t.header && (_3 = t.header);
          if (Array.isArray(t.columns)) {
            if (0 === t.columns.length)
              throw new Error("Option columns is empty");
            i2 = t.columns;
          }
          void 0 !== t.escapeChar && (a2 = t.escapeChar + s2);
          ("boolean" == typeof t.escapeFormulae || t.escapeFormulae instanceof RegExp) && (o3 = t.escapeFormulae instanceof RegExp ? t.escapeFormulae : /^[=+\-@\t\r].*$/);
        }();
        var u2 = new RegExp(Q(s2), "g");
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0]))
            return h2(null, e, r2);
          if ("object" == typeof e[0])
            return h2(i2 || Object.keys(e[0]), e, r2);
        } else if ("object" == typeof e)
          return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || i2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), h2(e.fields || [], e.data || [], r2);
        throw new Error("Unable to serialize unrecognized input");
        function h2(e2, t2, r3) {
          var i3 = "";
          "string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2));
          var n3 = Array.isArray(e2) && 0 < e2.length, s3 = !Array.isArray(t2[0]);
          if (n3 && _3) {
            for (var a3 = 0; a3 < e2.length; a3++)
              0 < a3 && (i3 += m3), i3 += v3(e2[a3], a3);
            0 < t2.length && (i3 += y3);
          }
          for (var o4 = 0; o4 < t2.length; o4++) {
            var u3 = n3 ? e2.length : t2[o4].length, h3 = false, f3 = n3 ? 0 === Object.keys(t2[o4]).length : 0 === t2[o4].length;
            if (r3 && !n3 && (h3 = "greedy" === r3 ? "" === t2[o4].join("").trim() : 1 === t2[o4].length && 0 === t2[o4][0].length), "greedy" === r3 && n3) {
              for (var d4 = [], l3 = 0; l3 < u3; l3++) {
                var c2 = s3 ? e2[l3] : l3;
                d4.push(t2[o4][c2]);
              }
              h3 = "" === d4.join("").trim();
            }
            if (!h3) {
              for (var p4 = 0; p4 < u3; p4++) {
                0 < p4 && !f3 && (i3 += m3);
                var g3 = n3 && s3 ? e2[p4] : p4;
                i3 += v3(t2[o4][g3], p4);
              }
              o4 < t2.length - 1 && (!r3 || 0 < u3 && !f3) && (i3 += y3);
            }
          }
          return i3;
        }
        function v3(e2, t2) {
          if (null == e2)
            return "";
          if (e2.constructor === Date)
            return JSON.stringify(e2).slice(1, 25);
          var r3 = false;
          o3 && "string" == typeof e2 && o3.test(e2) && (e2 = "'" + e2, r3 = true);
          var i3 = e2.toString().replace(u2, a2);
          return (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || function(e3, t3) {
            for (var r4 = 0; r4 < t3.length; r4++)
              if (-1 < e3.indexOf(t3[r4]))
                return true;
            return false;
          }(i3, b.BAD_DELIMITERS) || -1 < i3.indexOf(m3) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3;
        }
      } };
      if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = ["\r", "\n", '"', b.BYTE_ORDER_MARK], b.WORKERS_SUPPORTED = !n && !!f2.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = E2, b.ParserHandle = r, b.NetworkStreamer = l2, b.FileStreamer = c, b.StringStreamer = p3, b.ReadableStreamStreamer = g2, f2.jQuery) {
        var d3 = f2.jQuery;
        d3.fn.parse = function(o3) {
          var r2 = o3.config || {}, u2 = [];
          return this.each(function(e2) {
            if (!("INPUT" === d3(this).prop("tagName").toUpperCase() && "file" === d3(this).attr("type").toLowerCase() && f2.FileReader) || !this.files || 0 === this.files.length)
              return true;
            for (var t = 0; t < this.files.length; t++)
              u2.push({ file: this.files[t], inputElem: this, instanceConfig: d3.extend({}, r2) });
          }), e(), this;
          function e() {
            if (0 !== u2.length) {
              var e2, t, r3, i2, n2 = u2[0];
              if (J(o3.before)) {
                var s2 = o3.before(n2.file, n2.inputElem);
                if ("object" == typeof s2) {
                  if ("abort" === s2.action)
                    return e2 = "AbortError", t = n2.file, r3 = n2.inputElem, i2 = s2.reason, void (J(o3.error) && o3.error({ name: e2 }, t, r3, i2));
                  if ("skip" === s2.action)
                    return void h2();
                  "object" == typeof s2.config && (n2.instanceConfig = d3.extend(n2.instanceConfig, s2.config));
                } else if ("skip" === s2)
                  return void h2();
              }
              var a2 = n2.instanceConfig.complete;
              n2.instanceConfig.complete = function(e3) {
                J(a2) && a2(e3, n2.file, n2.inputElem), h2();
              }, b.parse(n2.file, n2.instanceConfig);
            } else
              J(o3.complete) && o3.complete();
          }
          function h2() {
            u2.splice(0, 1), e();
          }
        };
      }
      function h(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, (function(e2) {
          var t = w2(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new r(t), (this._handle.streamer = this)._config = t;
        }).call(this, e), this.parseChunk = function(e2, t) {
          if (this.isFirstChunk && J(this._config.beforeFirstChunk)) {
            var r2 = this._config.beforeFirstChunk(e2);
            void 0 !== r2 && (e2 = r2);
          }
          this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + e2;
          this._partialLine = "";
          var n2 = this._handle.parse(i2, this._baseIndex, !this._finished);
          if (!this._handle.paused() && !this._handle.aborted()) {
            var s2 = n2.meta.cursor;
            this._finished || (this._partialLine = i2.substring(s2 - this._baseIndex), this._baseIndex = s2), n2 && n2.data && (this._rowCount += n2.data.length);
            var a2 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (o2)
              f2.postMessage({ results: n2, workerId: b.WORKER_ID, finished: a2 });
            else if (J(this._config.chunk) && !t) {
              if (this._config.chunk(n2, this._handle), this._handle.paused() || this._handle.aborted())
                return void (this._halted = true);
              n2 = void 0, this._completeResults = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n2.data), this._completeResults.errors = this._completeResults.errors.concat(n2.errors), this._completeResults.meta = n2.meta), this._completed || !a2 || !J(this._config.complete) || n2 && n2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), a2 || n2 && n2.meta.paused || this._nextChunk(), n2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          J(this._config.error) ? this._config.error(e2) : o2 && this._config.error && f2.postMessage({ workerId: b.WORKER_ID, error: e2, finished: false });
        };
      }
      function l2(e) {
        var i2;
        (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), h.call(this, e), this._nextChunk = n ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished)
            this._chunkLoaded();
          else {
            if (i2 = new XMLHttpRequest(), this._config.withCredentials && (i2.withCredentials = this._config.withCredentials), n || (i2.onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)), i2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
              var e2 = this._config.downloadRequestHeaders;
              for (var t in e2)
                i2.setRequestHeader(t, e2[t]);
            }
            if (this._config.chunkSize) {
              var r2 = this._start + this._config.chunkSize - 1;
              i2.setRequestHeader("Range", "bytes=" + this._start + "-" + r2);
            }
            try {
              i2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            n && 0 === i2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === i2.readyState && (i2.status < 200 || 400 <= i2.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : i2.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e2) {
            var t = e2.getResponseHeader("Content-Range");
            if (null === t)
              return -1;
            return parseInt(t.substring(t.lastIndexOf("/") + 1));
          }(i2), this.parseChunk(i2.responseText)));
        }, this._chunkError = function(e2) {
          var t = i2.statusText || e2;
          this._sendError(new Error(t));
        };
      }
      function c(e) {
        var i2, n2;
        (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), h.call(this, e);
        var s2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, n2 = e2.slice || e2.webkitSlice || e2.mozSlice, s2 ? ((i2 = new FileReader()).onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input;
          if (this._config.chunkSize) {
            var t = Math.min(this._start + this._config.chunkSize, this._input.size);
            e2 = n2.call(e2, this._start, t);
          }
          var r2 = i2.readAsText(e2, this._config.encoding);
          s2 || this._chunkLoaded({ target: { result: r2 } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function p3(e) {
        var r2;
        h.call(this, e = e || {}), this.stream = function(e2) {
          return r2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          if (!this._finished) {
            var e2, t = this._config.chunkSize;
            return t ? (e2 = r2.substring(0, t), r2 = r2.substring(t)) : (e2 = r2, r2 = ""), this._finished = !r2, this.parseChunk(e2);
          }
        };
      }
      function g2(e) {
        h.call(this, e = e || {});
        var t = [], r2 = true, i2 = false;
        this.pause = function() {
          h.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          h.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          i2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : r2 = true;
        }, this._streamData = v2(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), r2 && (r2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = v2(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = v2(function() {
          this._streamCleanUp(), i2 = true, this._streamData("");
        }, this), this._streamCleanUp = v2(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function r(m3) {
        var a2, o3, u2, i2 = Math.pow(2, 53), n2 = -i2, s2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, h2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, t = this, r2 = 0, f3 = 0, d4 = false, e = false, l3 = [], c2 = { data: [], errors: [], meta: {} };
        if (J(m3.step)) {
          var p4 = m3.step;
          m3.step = function(e2) {
            if (c2 = e2, _3())
              g3();
            else {
              if (g3(), 0 === c2.data.length)
                return;
              r2 += e2.data.length, m3.preview && r2 > m3.preview ? o3.abort() : (c2.data = c2.data[0], p4(c2, t));
            }
          };
        }
        function y3(e2) {
          return "greedy" === m3.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g3() {
          return c2 && u2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), u2 = false), m3.skipEmptyLines && (c2.data = c2.data.filter(function(e2) {
            return !y3(e2);
          })), _3() && function() {
            if (!c2)
              return;
            function e2(e3, t3) {
              J(m3.transformHeader) && (e3 = m3.transformHeader(e3, t3)), l3.push(e3);
            }
            if (Array.isArray(c2.data[0])) {
              for (var t2 = 0; _3() && t2 < c2.data.length; t2++)
                c2.data[t2].forEach(e2);
              c2.data.splice(0, 1);
            } else
              c2.data.forEach(e2);
          }(), function() {
            if (!c2 || !m3.header && !m3.dynamicTyping && !m3.transform)
              return c2;
            function e2(e3, t3) {
              var r3, i3 = m3.header ? {} : [];
              for (r3 = 0; r3 < e3.length; r3++) {
                var n3 = r3, s3 = e3[r3];
                m3.header && (n3 = r3 >= l3.length ? "__parsed_extra" : l3[r3]), m3.transform && (s3 = m3.transform(s3, n3)), s3 = v3(n3, s3), "__parsed_extra" === n3 ? (i3[n3] = i3[n3] || [], i3[n3].push(s3)) : i3[n3] = s3;
              }
              return m3.header && (r3 > l3.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3) : r3 < l3.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3)), i3;
            }
            var t2 = 1;
            !c2.data.length || Array.isArray(c2.data[0]) ? (c2.data = c2.data.map(e2), t2 = c2.data.length) : c2.data = e2(c2.data, 0);
            m3.header && c2.meta && (c2.meta.fields = l3);
            return f3 += t2, c2;
          }();
        }
        function _3() {
          return m3.header && 0 === l3.length;
        }
        function v3(e2, t2) {
          return r3 = e2, m3.dynamicTypingFunction && void 0 === m3.dynamicTyping[r3] && (m3.dynamicTyping[r3] = m3.dynamicTypingFunction(r3)), true === (m3.dynamicTyping[r3] || m3.dynamicTyping) ? "true" === t2 || "TRUE" === t2 || "false" !== t2 && "FALSE" !== t2 && (function(e3) {
            if (s2.test(e3)) {
              var t3 = parseFloat(e3);
              if (n2 < t3 && t3 < i2)
                return true;
            }
            return false;
          }(t2) ? parseFloat(t2) : h2.test(t2) ? new Date(t2) : "" === t2 ? null : t2) : t2;
          var r3;
        }
        function k(e2, t2, r3, i3) {
          var n3 = { type: e2, code: t2, message: r3 };
          void 0 !== i3 && (n3.row = i3), c2.errors.push(n3);
        }
        this.parse = function(e2, t2, r3) {
          var i3 = m3.quoteChar || '"';
          if (m3.newline || (m3.newline = function(e3, t3) {
            e3 = e3.substring(0, 1048576);
            var r4 = new RegExp(Q(t3) + "([^]*?)" + Q(t3), "gm"), i4 = (e3 = e3.replace(r4, "")).split("\r"), n4 = e3.split("\n"), s4 = 1 < n4.length && n4[0].length < i4[0].length;
            if (1 === i4.length || s4)
              return "\n";
            for (var a3 = 0, o4 = 0; o4 < i4.length; o4++)
              "\n" === i4[o4][0] && a3++;
            return a3 >= i4.length / 2 ? "\r\n" : "\r";
          }(e2, i3)), u2 = false, m3.delimiter)
            J(m3.delimiter) && (m3.delimiter = m3.delimiter(e2), c2.meta.delimiter = m3.delimiter);
          else {
            var n3 = function(e3, t3, r4, i4, n4) {
              var s4, a3, o4, u3;
              n4 = n4 || [",", "	", "|", ";", b.RECORD_SEP, b.UNIT_SEP];
              for (var h3 = 0; h3 < n4.length; h3++) {
                var f4 = n4[h3], d5 = 0, l4 = 0, c3 = 0;
                o4 = void 0;
                for (var p5 = new E2({ comments: i4, delimiter: f4, newline: t3, preview: 10 }).parse(e3), g4 = 0; g4 < p5.data.length; g4++)
                  if (r4 && y3(p5.data[g4]))
                    c3++;
                  else {
                    var _4 = p5.data[g4].length;
                    l4 += _4, void 0 !== o4 ? 0 < _4 && (d5 += Math.abs(_4 - o4), o4 = _4) : o4 = _4;
                  }
                0 < p5.data.length && (l4 /= p5.data.length - c3), (void 0 === a3 || d5 <= a3) && (void 0 === u3 || u3 < l4) && 1.99 < l4 && (a3 = d5, s4 = f4, u3 = l4);
              }
              return { successful: !!(m3.delimiter = s4), bestDelimiter: s4 };
            }(e2, m3.newline, m3.skipEmptyLines, m3.comments, m3.delimitersToGuess);
            n3.successful ? m3.delimiter = n3.bestDelimiter : (u2 = true, m3.delimiter = b.DefaultDelimiter), c2.meta.delimiter = m3.delimiter;
          }
          var s3 = w2(m3);
          return m3.preview && m3.header && s3.preview++, a2 = e2, o3 = new E2(s3), c2 = o3.parse(a2, t2, r3), g3(), d4 ? { meta: { paused: true } } : c2 || { meta: { paused: false } };
        }, this.paused = function() {
          return d4;
        }, this.pause = function() {
          d4 = true, o3.abort(), a2 = J(m3.chunk) ? "" : a2.substring(o3.getCharIndex());
        }, this.resume = function() {
          t.streamer._halted ? (d4 = false, t.streamer.parseChunk(a2, true)) : setTimeout(t.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, o3.abort(), c2.meta.aborted = true, J(m3.complete) && m3.complete(c2), a2 = "";
        };
      }
      function Q(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E2(j) {
        var z, M = (j = j || {}).delimiter, P2 = j.newline, U = j.comments, q2 = j.step, N2 = j.preview, B = j.fastMode, K2 = z = void 0 === j.quoteChar || null === j.quoteChar ? '"' : j.quoteChar;
        if (void 0 !== j.escapeChar && (K2 = j.escapeChar), ("string" != typeof M || -1 < b.BAD_DELIMITERS.indexOf(M)) && (M = ","), U === M)
          throw new Error("Comment character same as delimiter");
        true === U ? U = "#" : ("string" != typeof U || -1 < b.BAD_DELIMITERS.indexOf(U)) && (U = false), "\n" !== P2 && "\r" !== P2 && "\r\n" !== P2 && (P2 = "\n");
        var W = 0, H = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2)
            throw new Error("Input must be a string");
          var n2 = i2.length, e = M.length, s2 = P2.length, a2 = U.length, o3 = J(q2), u2 = [], h2 = [], f3 = [], d4 = W = 0;
          if (!i2)
            return L();
          if (j.header && !t) {
            var l3 = i2.split(P2)[0].split(M), c2 = [], p4 = {}, g3 = false;
            for (var _3 in l3) {
              var m3 = l3[_3];
              J(j.transformHeader) && (m3 = j.transformHeader(m3, _3));
              var y3 = m3, v3 = p4[m3] || 0;
              for (0 < v3 && (g3 = true, y3 = m3 + "_" + v3), p4[m3] = v3 + 1; c2.includes(y3); )
                y3 = y3 + "_" + v3;
              c2.push(y3);
            }
            if (g3) {
              var k = i2.split(P2);
              k[0] = c2.join(M), i2 = k.join(P2);
            }
          }
          if (B || false !== B && -1 === i2.indexOf(z)) {
            for (var b2 = i2.split(P2), E3 = 0; E3 < b2.length; E3++) {
              if (f3 = b2[E3], W += f3.length, E3 !== b2.length - 1)
                W += P2.length;
              else if (r2)
                return L();
              if (!U || f3.substring(0, a2) !== U) {
                if (o3) {
                  if (u2 = [], I2(f3.split(M)), F(), H)
                    return L();
                } else
                  I2(f3.split(M));
                if (N2 && N2 <= E3)
                  return u2 = u2.slice(0, N2), L(true);
              }
            }
            return L();
          }
          for (var w3 = i2.indexOf(M, W), R2 = i2.indexOf(P2, W), C2 = new RegExp(Q(K2) + Q(z), "g"), S = i2.indexOf(z, W); ; )
            if (i2[W] !== z)
              if (U && 0 === f3.length && i2.substring(W, W + a2) === U) {
                if (-1 === R2)
                  return L();
                W = R2 + s2, R2 = i2.indexOf(P2, W), w3 = i2.indexOf(M, W);
              } else if (-1 !== w3 && (w3 < R2 || -1 === R2))
                f3.push(i2.substring(W, w3)), W = w3 + e, w3 = i2.indexOf(M, W);
              else {
                if (-1 === R2)
                  break;
                if (f3.push(i2.substring(W, R2)), D(R2 + s2), o3 && (F(), H))
                  return L();
                if (N2 && u2.length >= N2)
                  return L(true);
              }
            else
              for (S = W, W++; ; ) {
                if (-1 === (S = i2.indexOf(z, S + 1)))
                  return r2 || h2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: u2.length, index: W }), T2();
                if (S === n2 - 1)
                  return T2(i2.substring(W, S).replace(C2, z));
                if (z !== K2 || i2[S + 1] !== K2) {
                  if (z === K2 || 0 === S || i2[S - 1] !== K2) {
                    -1 !== w3 && w3 < S + 1 && (w3 = i2.indexOf(M, S + 1)), -1 !== R2 && R2 < S + 1 && (R2 = i2.indexOf(P2, S + 1));
                    var O3 = A(-1 === R2 ? w3 : Math.min(w3, R2));
                    if (i2.substr(S + 1 + O3, e) === M) {
                      f3.push(i2.substring(W, S).replace(C2, z)), i2[W = S + 1 + O3 + e] !== z && (S = i2.indexOf(z, W)), w3 = i2.indexOf(M, W), R2 = i2.indexOf(P2, W);
                      break;
                    }
                    var x2 = A(R2);
                    if (i2.substring(S + 1 + x2, S + 1 + x2 + s2) === P2) {
                      if (f3.push(i2.substring(W, S).replace(C2, z)), D(S + 1 + x2 + s2), w3 = i2.indexOf(M, W), S = i2.indexOf(z, W), o3 && (F(), H))
                        return L();
                      if (N2 && u2.length >= N2)
                        return L(true);
                      break;
                    }
                    h2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: u2.length, index: W }), S++;
                  }
                } else
                  S++;
              }
          return T2();
          function I2(e2) {
            u2.push(e2), d4 = W;
          }
          function A(e2) {
            var t2 = 0;
            if (-1 !== e2) {
              var r3 = i2.substring(S + 1, e2);
              r3 && "" === r3.trim() && (t2 = r3.length);
            }
            return t2;
          }
          function T2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(W)), f3.push(e2), W = n2, I2(f3), o3 && F()), L();
          }
          function D(e2) {
            W = e2, I2(f3), f3 = [], R2 = i2.indexOf(P2, W);
          }
          function L(e2) {
            return { data: u2, errors: h2, meta: { delimiter: M, linebreak: P2, aborted: H, truncated: !!e2, cursor: d4 + (t || 0) } };
          }
          function F() {
            q2(L()), u2 = [], h2 = [];
          }
        }, this.abort = function() {
          H = true;
        }, this.getCharIndex = function() {
          return W;
        };
      }
      function _2(e) {
        var t = e.data, r2 = a[t.workerId], i2 = false;
        if (t.error)
          r2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            i2 = true, m2(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: y2, resume: y2 };
          if (J(r2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (r2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !i2); s2++)
              ;
            delete t.results;
          } else
            J(r2.userChunk) && (r2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !i2 && m2(t.workerId, t.results);
      }
      function m2(e, t) {
        var r2 = a[e];
        J(r2.userComplete) && r2.userComplete(t), r2.terminate(), delete a[e];
      }
      function y2() {
        throw new Error("Not implemented.");
      }
      function w2(e) {
        if ("object" != typeof e || null === e)
          return e;
        var t = Array.isArray(e) ? [] : {};
        for (var r2 in e)
          t[r2] = w2(e[r2]);
        return t;
      }
      function v2(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function J(e) {
        return "function" == typeof e;
      }
      return o2 && (f2.onmessage = function(e) {
        var t = e.data;
        void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
        if ("string" == typeof t.input)
          f2.postMessage({ workerId: b.WORKER_ID, results: b.parse(t.input, t.config), finished: true });
        else if (f2.File && t.input instanceof File || t.input instanceof Object) {
          var r2 = b.parse(t.input, t.config);
          r2 && f2.postMessage({ workerId: b.WORKER_ID, results: r2, finished: true });
        }
      }), (l2.prototype = Object.create(h.prototype)).constructor = l2, (c.prototype = Object.create(h.prototype)).constructor = c, (p3.prototype = Object.create(p3.prototype)).constructor = p3, (g2.prototype = Object.create(h.prototype)).constructor = g2, b;
    });
  }
});

// node_modules/@refinedev/core/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  AccessControlContext: () => at,
  AuthPage: () => Xi,
  Authenticated: () => fu,
  CanAccess: () => Tu,
  ErrorComponent: () => _i,
  GitHubBanner: () => Pu,
  KeyBuilder: () => xt,
  LayoutWrapper: () => pu,
  LoginPage: () => Vr,
  ReadyPage: () => lo,
  Refine: () => iu,
  ResourceContext: () => nt,
  RouteChangeHandler: () => mo,
  TranslationContext: () => Be,
  UndoableQueue: () => ls,
  WelcomePage: () => Ji,
  createTreeView: () => Eo,
  file2Base64: () => Sn,
  flattenObjectKeys: () => Tr,
  generateDefaultDocumentTitle: () => Vo,
  getDefaultFilter: () => wn,
  getDefaultSortOrder: () => In,
  getNextPageParam: () => lr,
  getPreviousPageParam: () => mr,
  handleUseParams: () => xo,
  importCSVMapper: () => qt,
  keys: () => Ge,
  legacyResourceTransform: () => fr,
  matchResourceFromRoute: () => Lo,
  parseTableParams: () => Rr,
  parseTableParamsFromQuery: () => Mn,
  pickDataProvider: () => O2,
  pickNotDeprecated: () => w,
  propertyPathToArray: () => Go,
  queryKeys: () => Co,
  routeGenerator: () => dr,
  setInitialFilters: () => Cr,
  setInitialSorters: () => hr,
  stringifyTableParams: () => Pr,
  unionFilters: () => vt,
  unionSorters: () => xr,
  useActiveAuthProvider: () => Z,
  useApiUrl: () => ga,
  useAuthenticated: () => Nn,
  useBack: () => ao,
  useBreadcrumb: () => lb,
  useCan: () => Vs,
  useCanWithoutCache: () => YC,
  useCancelNotification: () => _e,
  useCheckError: () => Kn,
  useCreate: () => Wt,
  useCreateMany: () => oo,
  useCustom: () => Pa,
  useCustomMutation: () => ha,
  useDataProvider: () => te,
  useDelete: () => na,
  useDeleteMany: () => ya,
  useExport: () => zP,
  useForgotPassword: () => Xr,
  useForm: () => ax,
  useGetIdentity: () => $r,
  useGetLocale: () => ni,
  useGetToPath: () => pt,
  useGo: () => le,
  useHandleNotification: () => ie,
  useImport: () => sC,
  useInfiniteList: () => Ua,
  useInvalidate: () => Ce,
  useIsAuthenticated: () => vr,
  useIsExistAuthentication: () => Jr,
  useLink: () => lt,
  useList: () => Gt,
  useLiveMode: () => Es,
  useLoadingOvertime: () => ee,
  useLog: () => Ve,
  useLogList: () => Jh,
  useLogin: () => Ht,
  useLogout: () => br,
  useMany: () => qr,
  useMenu: () => Wi,
  useMeta: () => Y,
  useModal: () => uC,
  useMutationMode: () => $e,
  useNavigation: () => pe,
  useNotification: () => Me,
  useOnError: () => ae,
  useOne: () => $t,
  useParse: () => so,
  useParsed: () => fe,
  usePermissions: () => An,
  usePublish: () => Fe,
  useRedirectionAfterSubmission: () => ws,
  useRefineContext: () => oe,
  useRegister: () => _r,
  useResource: () => N,
  useResourceSubscription: () => st,
  useResourceWithRoute: () => Ds,
  useRouterContext: () => ne,
  useRouterType: () => q,
  useSelect: () => dh,
  useSetLocale: () => ei,
  useShow: () => Xx,
  useSubscription: () => qR,
  useSyncWithLocation: () => Hr,
  useTable: () => Dh,
  useTitle: () => Dn,
  useToPath: () => Di,
  useTranslate: () => _,
  useUpdate: () => Lr,
  useUpdateMany: () => pa,
  useUpdatePassword: () => Yr,
  useUserFriendlyName: () => bt,
  useWarnAboutChange: () => Kt,
  userFriendlyResourceName: () => er
});
var import_react2 = __toESM(require_react());

// node_modules/@tanstack/query-core/build/lib/subscribable.mjs
var Subscribable = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    const identity2 = {
      listener
    };
    this.listeners.add(identity2);
    this.onSubscribe();
    return () => {
      this.listeners.delete(identity2);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
};

// node_modules/@tanstack/query-core/build/lib/utils.mjs
var isServer = typeof window === "undefined" || "Deno" in window;
function noop() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return {
      ...arg3,
      queryKey: arg1,
      queryFn: arg2
    };
  }
  return {
    ...arg2,
    queryKey: arg1
  };
}
function parseMutationArgs(arg1, arg2, arg3) {
  if (isQueryKey(arg1)) {
    if (typeof arg2 === "function") {
      return {
        ...arg3,
        mutationKey: arg1,
        mutationFn: arg2
      };
    }
    return {
      ...arg2,
      mutationKey: arg1
    };
  }
  if (typeof arg1 === "function") {
    return {
      ...arg2,
      mutationFn: arg1
    };
  }
  return {
    ...arg1
  };
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [{
    ...arg2,
    queryKey: arg1
  }, arg3] : [arg1 || {}, arg2];
}
function matchQuery(filters, query) {
  const {
    type = "all",
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale
  } = filters;
  if (isQueryKey(queryKey)) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  if (type !== "all") {
    const isActive = query.isActive();
    if (type === "active" && !isActive) {
      return false;
    }
    if (type === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  const {
    exact,
    fetching,
    predicate,
    mutationKey
  } = filters;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  return JSON.stringify(queryKey, (_2, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
    result[key] = val[key];
    return result;
  }, {}) : val);
}
function partialMatchKey(a, b) {
  return partialDeepEqual(a, b);
}
function partialDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]));
  }
  return false;
}
function replaceEqualDeep(a, b) {
  if (a === b) {
    return a;
  }
  const array = isPlainArray(a) && isPlainArray(b);
  if (array || isPlainObject(a) && isPlainObject(b)) {
    const aSize = array ? a.length : Object.keys(a).length;
    const bItems = array ? b : Object.keys(b);
    const bSize = bItems.length;
    const copy = array ? [] : {};
    let equalItems = 0;
    for (let i2 = 0; i2 < bSize; i2++) {
      const key = array ? i2 : bItems[i2];
      copy[key] = replaceEqualDeep(a[key], b[key]);
      if (copy[key] === a[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
  }
  return b;
}
function shallowEqualObjects(a, b) {
  if (a && !b || b && !a) {
    return false;
  }
  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject(o2) {
  if (!hasObjectPrototype(o2)) {
    return false;
  }
  const ctor = o2.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function sleep(timeout) {
  return new Promise((resolve) => {
    setTimeout(resolve, timeout);
  });
}
function scheduleMicrotask(callback) {
  sleep(0).then(callback);
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
  return;
}
function replaceData(prevData, data, options) {
  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
    return prevData;
  } else if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data);
  } else if (options.structuralSharing !== false) {
    return replaceEqualDeep(prevData, data);
  }
  return data;
}

// node_modules/@tanstack/query-core/build/lib/focusManager.mjs
var FocusManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    const changed = this.focused !== focused;
    if (changed) {
      this.focused = focused;
      this.onFocus();
    }
  }
  onFocus() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
};
var focusManager = new FocusManager();

// node_modules/@tanstack/query-core/build/lib/onlineManager.mjs
var onlineEvents = ["online", "offline"];
var OnlineManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        onlineEvents.forEach((event) => {
          window.addEventListener(event, listener, false);
        });
        return () => {
          onlineEvents.forEach((event) => {
            window.removeEventListener(event, listener);
          });
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((online) => {
      if (typeof online === "boolean") {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    const changed = this.online !== online;
    if (changed) {
      this.online = online;
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  }
};
var onlineManager = new OnlineManager();

// node_modules/@tanstack/query-core/build/lib/retryer.mjs
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
  return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
}
var CancelledError = class {
  constructor(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  }
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createRetryer(config) {
  let isRetryCancelled = false;
  let failureCount = 0;
  let isResolved = false;
  let continueFn;
  let promiseResolve;
  let promiseReject;
  const promise = new Promise((outerResolve, outerReject) => {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  const cancel = (cancelOptions) => {
    if (!isResolved) {
      reject(new CancelledError(cancelOptions));
      config.abort == null ? void 0 : config.abort();
    }
  };
  const cancelRetry = () => {
    isRetryCancelled = true;
  };
  const continueRetry = () => {
    isRetryCancelled = false;
  };
  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
  const resolve = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  const reject = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  const pause = () => {
    return new Promise((continueResolve) => {
      continueFn = (value) => {
        const canContinue = isResolved || !shouldPause();
        if (canContinue) {
          continueResolve(value);
        }
        return canContinue;
      };
      config.onPause == null ? void 0 : config.onPause();
    }).then(() => {
      continueFn = void 0;
      if (!isResolved) {
        config.onContinue == null ? void 0 : config.onContinue();
      }
    });
  };
  const run = () => {
    if (isResolved) {
      return;
    }
    let promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
      var _config$retry, _config$retryDelay;
      if (isResolved) {
        return;
      }
      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
      const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
      if (isRetryCancelled || !shouldRetry) {
        reject(error);
        return;
      }
      failureCount++;
      config.onFail == null ? void 0 : config.onFail(failureCount, error);
      sleep(delay).then(() => {
        if (shouldPause()) {
          return pause();
        }
        return;
      }).then(() => {
        if (isRetryCancelled) {
          reject(error);
        } else {
          run();
        }
      });
    });
  };
  if (canFetch(config.networkMode)) {
    run();
  } else {
    pause().then(run);
  }
  return {
    promise,
    cancel,
    continue: () => {
      const didContinue = continueFn == null ? void 0 : continueFn();
      return didContinue ? promise : Promise.resolve();
    },
    cancelRetry,
    continueRetry
  };
}

// node_modules/@tanstack/query-core/build/lib/logger.mjs
var defaultLogger = console;

// node_modules/@tanstack/query-core/build/lib/notifyManager.mjs
function createNotifyManager() {
  let queue = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  const batch = (callback) => {
    let result;
    transactions++;
    try {
      result = callback();
    } finally {
      transactions--;
      if (!transactions) {
        flush();
      }
    }
    return result;
  };
  const schedule = (callback) => {
    if (transactions) {
      queue.push(callback);
    } else {
      scheduleMicrotask(() => {
        notifyFn(callback);
      });
    }
  };
  const batchCalls = (callback) => {
    return (...args) => {
      schedule(() => {
        callback(...args);
      });
    };
  };
  const flush = () => {
    const originalQueue = queue;
    queue = [];
    if (originalQueue.length) {
      scheduleMicrotask(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  const setNotifyFunction = (fn2) => {
    notifyFn = fn2;
  };
  const setBatchNotifyFunction = (fn2) => {
    batchNotifyFn = fn2;
  };
  return {
    batch,
    batchCalls,
    schedule,
    setNotifyFunction,
    setBatchNotifyFunction
  };
}
var notifyManager = createNotifyManager();

// node_modules/@tanstack/query-core/build/lib/removable.mjs
var Removable = class {
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(() => {
        this.optionalRemove();
      }, this.cacheTime);
    }
  }
  updateCacheTime(newCacheTime) {
    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
  }
  clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  }
};

// node_modules/@tanstack/query-core/build/lib/query.mjs
var Query = class extends Removable {
  constructor(config) {
    super();
    this.abortSignalConsumed = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.logger = config.logger || defaultLogger;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || getDefaultState(this.options);
    this.state = this.initialState;
    this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  optionalRemove() {
    if (!this.observers.length && this.state.fetchStatus === "idle") {
      this.cache.remove(this);
    }
  }
  setData(newData, options) {
    const data = replaceData(this.state.data, newData, this.options);
    this.dispatch({
      data,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt,
      manual: options == null ? void 0 : options.manual
    });
    return data;
  }
  setState(state, setStateOptions) {
    this.dispatch({
      type: "setState",
      state,
      setStateOptions
    });
  }
  cancel(options) {
    var _this$retryer;
    const promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop).catch(noop) : Promise.resolve();
  }
  destroy() {
    super.destroy();
    this.cancel({
      silent: true
    });
  }
  reset() {
    this.destroy();
    this.setState(this.initialState);
  }
  isActive() {
    return this.observers.some((observer) => observer.options.enabled !== false);
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
  }
  isStaleByTime(staleTime = 0) {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  }
  onFocus() {
    var _this$retryer2;
    const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  }
  onOnline() {
    var _this$retryer3;
    const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    if (this.observers.includes(observer)) {
      this.observers = this.observers.filter((x2) => x2 !== observer);
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        this.scheduleGc();
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  }
  fetch(options, fetchOptions) {
    var _this$options$behavio, _context$fetchOptions;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      const observer = this.observers.find((x2) => x2.options.queryFn);
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    if (true) {
      if (!Array.isArray(this.options.queryKey)) {
        this.logger.error("As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']");
      }
    }
    const abortController = getAbortController();
    const queryFnContext = {
      queryKey: this.queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    const addSignalProperty = (object) => {
      Object.defineProperty(object, "signal", {
        enumerable: true,
        get: () => {
          if (abortController) {
            this.abortSignalConsumed = true;
            return abortController.signal;
          }
          return void 0;
        }
      });
    };
    addSignalProperty(queryFnContext);
    const fetchFn = () => {
      if (!this.options.queryFn) {
        return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
      }
      this.abortSignalConsumed = false;
      return this.options.queryFn(queryFnContext);
    };
    const context = {
      fetchOptions,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn
    };
    addSignalProperty(context);
    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
    this.revertState = this.state;
    if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    const onError = (error) => {
      if (!(isCancelledError(error) && error.silent)) {
        this.dispatch({
          type: "error",
          error
        });
      }
      if (!isCancelledError(error)) {
        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
        if (true) {
          this.logger.error(error);
        }
      }
      if (!this.isFetchingOptimistic) {
        this.scheduleGc();
      }
      this.isFetchingOptimistic = false;
    };
    this.retryer = createRetryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
      onSuccess: (data) => {
        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
        if (typeof data === "undefined") {
          if (true) {
            this.logger.error("Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: " + this.queryHash);
          }
          onError(new Error(this.queryHash + " data is undefined"));
          return;
        }
        this.setData(data);
        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);
        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      },
      onError,
      onFail: (failureCount, error) => {
        this.dispatch({
          type: "failed",
          failureCount,
          error
        });
      },
      onPause: () => {
        this.dispatch({
          type: "pause"
        });
      },
      onContinue: () => {
        this.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay,
      networkMode: context.options.networkMode
    });
    this.promise = this.retryer.promise;
    return this.promise;
  }
  dispatch(action) {
    const reducer = (state) => {
      var _action$meta, _action$dataUpdatedAt;
      switch (action.type) {
        case "failed":
          return {
            ...state,
            fetchFailureCount: action.failureCount,
            fetchFailureReason: action.error
          };
        case "pause":
          return {
            ...state,
            fetchStatus: "paused"
          };
        case "continue":
          return {
            ...state,
            fetchStatus: "fetching"
          };
        case "fetch":
          return {
            ...state,
            fetchFailureCount: 0,
            fetchFailureReason: null,
            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
            fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
            ...!state.dataUpdatedAt && {
              error: null,
              status: "loading"
            }
          };
        case "success":
          return {
            ...state,
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
            error: null,
            isInvalidated: false,
            status: "success",
            ...!action.manual && {
              fetchStatus: "idle",
              fetchFailureCount: 0,
              fetchFailureReason: null
            }
          };
        case "error":
          const error = action.error;
          if (isCancelledError(error) && error.revert && this.revertState) {
            return {
              ...this.revertState,
              fetchStatus: "idle"
            };
          }
          return {
            ...state,
            error,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          };
        case "invalidate":
          return {
            ...state,
            isInvalidated: true
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate(action);
      });
      this.cache.notify({
        query: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState(options) {
  const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
  const hasData = typeof data !== "undefined";
  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
  return {
    data,
    dataUpdateCount: 0,
    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: false,
    status: hasData ? "success" : "loading",
    fetchStatus: "idle"
  };
}

// node_modules/@tanstack/query-core/build/lib/queryCache.mjs
var QueryCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.queries = [];
    this.queriesMap = {};
  }
  build(client, options, state) {
    var _options$queryHash;
    const queryKey = options.queryKey;
    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    let query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        logger: client.getLogger(),
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey)
      });
      this.add(query);
    }
    return query;
  }
  add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "added",
        query
      });
    }
  }
  remove(query) {
    const queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter((x2) => x2 !== query);
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "removed",
        query
      });
    }
  }
  clear() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return this.queriesMap[queryHash];
  }
  getAll() {
    return this.queries;
  }
  find(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find((query) => matchQuery(filters, query));
  }
  findAll(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onOnline();
      });
    });
  }
};

// node_modules/@tanstack/query-core/build/lib/mutation.mjs
var Mutation = class extends Removable {
  constructor(config) {
    super();
    this.defaultOptions = config.defaultOptions;
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.logger = config.logger || defaultLogger;
    this.observers = [];
    this.state = config.state || getDefaultState2();
    this.setOptions(config.options);
    this.scheduleGc();
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  get meta() {
    return this.options.meta;
  }
  setState(state) {
    this.dispatch({
      type: "setState",
      state
    });
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.mutationCache.notify({
        type: "observerAdded",
        mutation: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    this.observers = this.observers.filter((x2) => x2 !== observer);
    this.scheduleGc();
    this.mutationCache.notify({
      type: "observerRemoved",
      mutation: this,
      observer
    });
  }
  optionalRemove() {
    if (!this.observers.length) {
      if (this.state.status === "loading") {
        this.scheduleGc();
      } else {
        this.mutationCache.remove(this);
      }
    }
  }
  continue() {
    var _this$retryer$continu, _this$retryer;
    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
  }
  async execute() {
    const executeMutation = () => {
      var _this$options$retry;
      this.retryer = createRetryer({
        fn: () => {
          if (!this.options.mutationFn) {
            return Promise.reject("No mutationFn found");
          }
          return this.options.mutationFn(this.state.variables);
        },
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
        retryDelay: this.options.retryDelay,
        networkMode: this.options.networkMode
      });
      return this.retryer.promise;
    };
    const restored = this.state.status === "loading";
    try {
      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
      if (!restored) {
        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
        this.dispatch({
          type: "loading",
          variables: this.options.variables
        });
        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
        if (context !== this.state.context) {
          this.dispatch({
            type: "loading",
            context,
            variables: this.state.variables
          });
        }
      }
      const data = await executeMutation();
      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));
      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));
      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));
      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));
      this.dispatch({
        type: "success",
        data
      });
      return data;
    } catch (error) {
      try {
        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
        if (true) {
          this.logger.error(error);
        }
        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
        throw error;
      } finally {
        this.dispatch({
          type: "error",
          error
        });
      }
    }
  }
  dispatch(action) {
    const reducer = (state) => {
      switch (action.type) {
        case "failed":
          return {
            ...state,
            failureCount: action.failureCount,
            failureReason: action.error
          };
        case "pause":
          return {
            ...state,
            isPaused: true
          };
        case "continue":
          return {
            ...state,
            isPaused: false
          };
        case "loading":
          return {
            ...state,
            context: action.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: !canFetch(this.options.networkMode),
            status: "loading",
            variables: action.variables
          };
        case "success":
          return {
            ...state,
            data: action.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          };
        case "error":
          return {
            ...state,
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            failureReason: action.error,
            isPaused: false,
            status: "error"
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onMutationUpdate(action);
      });
      this.mutationCache.notify({
        mutation: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState2() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}

// node_modules/@tanstack/query-core/build/lib/mutationCache.mjs
var MutationCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.mutations = [];
    this.mutationId = 0;
  }
  build(client, options, state) {
    const mutation = new Mutation({
      mutationCache: this,
      logger: client.getLogger(),
      mutationId: ++this.mutationId,
      options: client.defaultMutationOptions(options),
      state,
      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    this.mutations.push(mutation);
    this.notify({
      type: "added",
      mutation
    });
  }
  remove(mutation) {
    this.mutations = this.mutations.filter((x2) => x2 !== mutation);
    this.notify({
      type: "removed",
      mutation
    });
  }
  clear() {
    notifyManager.batch(() => {
      this.mutations.forEach((mutation) => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return this.mutations;
  }
  find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find((mutation) => matchMutation(filters, mutation));
  }
  findAll(filters) {
    return this.mutations.filter((mutation) => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    var _this$resuming;
    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
      const pausedMutations = this.mutations.filter((x2) => x2.state.isPaused);
      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));
    }).then(() => {
      this.resuming = void 0;
    });
    return this.resuming;
  }
};

// node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs
function infiniteQueryBehavior() {
  return {
    onFetch: (context) => {
      context.fetchFn = () => {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        let newPageParams = oldPageParams;
        let cancelled = false;
        const addSignalProperty = (object) => {
          Object.defineProperty(object, "signal", {
            enumerable: true,
            get: () => {
              var _context$signal;
              if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                cancelled = true;
              } else {
                var _context$signal2;
                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                  cancelled = true;
                });
              }
              return context.signal;
            }
          });
        };
        const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
        const buildNewPages = (pages, param, page, previous) => {
          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];
          return previous ? [page, ...pages] : [...pages, page];
        };
        const fetchPage = (pages, manual, param, previous) => {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param === "undefined" && !manual && pages.length) {
            return Promise.resolve(pages);
          }
          const queryFnContext = {
            queryKey: context.queryKey,
            pageParam: param,
            meta: context.options.meta
          };
          addSignalProperty(queryFnContext);
          const queryFnResult = queryFn(queryFnContext);
          const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous));
          return promise2;
        };
        let promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param, true);
        } else {
          newPageParams = [];
          const manual = typeof context.options.getNextPageParam === "undefined";
          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
          for (let i2 = 1; i2 < oldPages.length; i2++) {
            promise = promise.then((pages) => {
              const shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
              if (shouldFetchNextPage) {
                const param = manual ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                return fetchPage(pages, manual, param);
              }
              return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
            });
          }
        }
        const finalPromise = promise.then((pages) => ({
          pages,
          pageParams: newPageParams
        }));
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
function hasNextPage(options, pages) {
  if (options.getNextPageParam && Array.isArray(pages)) {
    const nextPageParam = getNextPageParam(options, pages);
    return typeof nextPageParam !== "undefined" && nextPageParam !== null && nextPageParam !== false;
  }
  return;
}
function hasPreviousPage(options, pages) {
  if (options.getPreviousPageParam && Array.isArray(pages)) {
    const previousPageParam = getPreviousPageParam(options, pages);
    return typeof previousPageParam !== "undefined" && previousPageParam !== null && previousPageParam !== false;
  }
  return;
}

// node_modules/@tanstack/query-core/build/lib/queryClient.mjs
var QueryClient = class {
  constructor(config = {}) {
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.logger = config.logger || defaultLogger;
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
    this.mountCount = 0;
    if (config.logger) {
      this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.");
    }
  }
  mount() {
    this.mountCount++;
    if (this.mountCount !== 1)
      return;
    this.unsubscribeFocus = focusManager.subscribe(() => {
      if (focusManager.isFocused()) {
        this.resumePausedMutations();
        this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(() => {
      if (onlineManager.isOnline()) {
        this.resumePausedMutations();
        this.queryCache.onOnline();
      }
    });
  }
  unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    this.mountCount--;
    if (this.mountCount !== 0)
      return;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    this.unsubscribeFocus = void 0;
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
    this.unsubscribeOnline = void 0;
  }
  isFetching(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    filters.fetchStatus = "fetching";
    return this.queryCache.findAll(filters).length;
  }
  isMutating(filters) {
    return this.mutationCache.findAll({
      ...filters,
      fetching: true
    }).length;
  }
  getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  }
  ensureQueryData(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const cachedData = this.getQueryData(parsedOptions.queryKey);
    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
  }
  getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey,
      state
    }) => {
      const data = state.data;
      return [queryKey, data];
    });
  }
  setQueryData(queryKey, updater, options) {
    const query = this.queryCache.find(queryKey);
    const prevData = query == null ? void 0 : query.state.data;
    const data = functionalUpdate(updater, prevData);
    if (typeof data === "undefined") {
      return void 0;
    }
    const parsedOptions = parseQueryArgs(queryKey);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(data, {
      ...options,
      manual: true
    });
  }
  setQueriesData(queryKeyOrFilters, updater, options) {
    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey
    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
  }
  getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  }
  removeQueries(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    const queryCache = this.queryCache;
    notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        queryCache.remove(query);
      });
    });
  }
  resetQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const queryCache = this.queryCache;
    const refetchFilters = {
      type: "active",
      ...filters
    };
    return notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        query.reset();
      });
      return this.refetchQueries(refetchFilters, options);
    });
  }
  cancelQueries(arg1, arg2, arg3) {
    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
    return Promise.all(promises).then(noop).catch(noop);
  }
  invalidateQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    return notifyManager.batch(() => {
      var _ref, _filters$refetchType;
      this.queryCache.findAll(filters).forEach((query) => {
        query.invalidate();
      });
      if (filters.refetchType === "none") {
        return Promise.resolve();
      }
      const refetchFilters = {
        ...filters,
        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
      };
      return this.refetchQueries(refetchFilters, options);
    });
  }
  refetchQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
      var _options$cancelRefetc;
      return query.fetch(void 0, {
        ...options,
        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
        meta: {
          refetchPage: filters.refetchPage
        }
      });
    }));
    let promise = Promise.all(promises).then(noop);
    if (!(options != null && options.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  fetchQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    const query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  }
  prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  fetchInfiniteQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  }
  prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  resumePausedMutations() {
    return this.mutationCache.resumePausedMutations();
  }
  getQueryCache() {
    return this.queryCache;
  }
  getMutationCache() {
    return this.mutationCache;
  }
  getLogger() {
    return this.logger;
  }
  getDefaultOptions() {
    return this.defaultOptions;
  }
  setDefaultOptions(options) {
    this.defaultOptions = options;
  }
  setQueryDefaults(queryKey, options) {
    const result = this.queryDefaults.find((x2) => hashQueryKey(queryKey) === hashQueryKey(x2.queryKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  }
  getQueryDefaults(queryKey) {
    if (!queryKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.queryDefaults.find((x2) => partialMatchKey(queryKey, x2.queryKey));
    if (true) {
      const matchingDefaults = this.queryDefaults.filter((x2) => partialMatchKey(queryKey, x2.queryKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several query defaults match with key '" + JSON.stringify(queryKey) + "'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  setMutationDefaults(mutationKey, options) {
    const result = this.mutationDefaults.find((x2) => hashQueryKey(mutationKey) === hashQueryKey(x2.mutationKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  }
  getMutationDefaults(mutationKey) {
    if (!mutationKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.mutationDefaults.find((x2) => partialMatchKey(mutationKey, x2.mutationKey));
    if (true) {
      const matchingDefaults = this.mutationDefaults.filter((x2) => partialMatchKey(mutationKey, x2.mutationKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several mutation defaults match with key '" + JSON.stringify(mutationKey) + "'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  defaultQueryOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    const defaultedOptions = {
      ...this.defaultOptions.queries,
      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
      ...options,
      _defaulted: true
    };
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
    }
    if (typeof defaultedOptions.useErrorBoundary === "undefined") {
      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
    }
    return defaultedOptions;
  }
  defaultMutationOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    return {
      ...this.defaultOptions.mutations,
      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
      ...options,
      _defaulted: true
    };
  }
  clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  }
};

// node_modules/@tanstack/query-core/build/lib/queryObserver.mjs
var QueryObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.options = options;
    this.trackedProps = /* @__PURE__ */ new Set();
    this.selectError = null;
    this.bindMethods();
    this.setOptions(options);
  }
  bindMethods() {
    this.remove = this.remove.bind(this);
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      this.currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.currentQuery, this.options)) {
        this.executeFetch();
      }
      this.updateTimers();
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.destroy();
    }
  }
  shouldFetchOnReconnect() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
  }
  shouldFetchOnWindowFocus() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set();
    this.clearStaleTimeout();
    this.clearRefetchInterval();
    this.currentQuery.removeObserver(this);
  }
  setOptions(options, notifyOptions) {
    const prevOptions = this.options;
    const prevQuery = this.currentQuery;
    this.options = this.client.defaultQueryOptions(options);
    if (typeof (options == null ? void 0 : options.isDataEqual) !== "undefined") {
      this.client.getLogger().error("The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option");
    }
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getQueryCache().notify({
        type: "observerOptionsUpdated",
        query: this.currentQuery,
        observer: this
      });
    }
    if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
      throw new Error("Expected enabled to be a boolean");
    }
    if (!this.options.queryKey) {
      this.options.queryKey = prevOptions.queryKey;
    }
    this.updateQuery();
    const mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
      this.executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
      this.updateStaleTimeout();
    }
    const nextRefetchInterval = this.computeRefetchInterval();
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
      this.updateRefetchInterval(nextRefetchInterval);
    }
  }
  getOptimisticResult(options) {
    const query = this.client.getQueryCache().build(this.client, options);
    const result = this.createResult(query, options);
    if (shouldAssignObserverCurrentProperties(this, result, options)) {
      this.currentResult = result;
      this.currentResultOptions = this.options;
      this.currentResultState = this.currentQuery.state;
    }
    return result;
  }
  getCurrentResult() {
    return this.currentResult;
  }
  trackResult(result) {
    const trackedResult = {};
    Object.keys(result).forEach((key) => {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: () => {
          this.trackedProps.add(key);
          return result[key];
        }
      });
    });
    return trackedResult;
  }
  getCurrentQuery() {
    return this.currentQuery;
  }
  remove() {
    this.client.getQueryCache().remove(this.currentQuery);
  }
  refetch({
    refetchPage,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        refetchPage
      }
    });
  }
  fetchOptimistic(options) {
    const defaultedOptions = this.client.defaultQueryOptions(options);
    const query = this.client.getQueryCache().build(this.client, defaultedOptions);
    query.isFetchingOptimistic = true;
    return query.fetch().then(() => this.createResult(query, defaultedOptions));
  }
  fetch(fetchOptions) {
    var _fetchOptions$cancelR;
    return this.executeFetch({
      ...fetchOptions,
      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true
    }).then(() => {
      this.updateResult();
      return this.currentResult;
    });
  }
  executeFetch(fetchOptions) {
    this.updateQuery();
    let promise = this.currentQuery.fetch(this.options, fetchOptions);
    if (!(fetchOptions != null && fetchOptions.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  updateStaleTimeout() {
    this.clearStaleTimeout();
    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
      return;
    }
    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
    const timeout = time + 1;
    this.staleTimeoutId = setTimeout(() => {
      if (!this.currentResult.isStale) {
        this.updateResult();
      }
    }, timeout);
  }
  computeRefetchInterval() {
    var _this$options$refetch;
    return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
  }
  updateRefetchInterval(nextInterval) {
    this.clearRefetchInterval();
    this.currentRefetchInterval = nextInterval;
    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
      return;
    }
    this.refetchIntervalId = setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        this.executeFetch();
      }
    }, this.currentRefetchInterval);
  }
  updateTimers() {
    this.updateStaleTimeout();
    this.updateRefetchInterval(this.computeRefetchInterval());
  }
  clearStaleTimeout() {
    if (this.staleTimeoutId) {
      clearTimeout(this.staleTimeoutId);
      this.staleTimeoutId = void 0;
    }
  }
  clearRefetchInterval() {
    if (this.refetchIntervalId) {
      clearInterval(this.refetchIntervalId);
      this.refetchIntervalId = void 0;
    }
  }
  createResult(query, options) {
    const prevQuery = this.currentQuery;
    const prevOptions = this.options;
    const prevResult = this.currentResult;
    const prevResultState = this.currentResultState;
    const prevResultOptions = this.currentResultOptions;
    const queryChange = query !== prevQuery;
    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
    const {
      state
    } = query;
    let {
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      fetchStatus,
      status
    } = state;
    let isPreviousData = false;
    let isPlaceholderData = false;
    let data;
    if (options._optimisticResults) {
      const mounted = this.hasListeners();
      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        fetchStatus = canFetch(query.options.networkMode) ? "fetching" : "paused";
        if (!dataUpdatedAt) {
          status = "loading";
        }
      }
      if (options._optimisticResults === "isRestoring") {
        fetchStatus = "idle";
      }
    }
    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== "error") {
      data = prevQueryResult.data;
      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
      status = prevQueryResult.status;
      isPreviousData = true;
    } else if (options.select && typeof state.data !== "undefined") {
      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
        data = this.selectResult;
      } else {
        try {
          this.selectFn = options.select;
          data = options.select(state.data);
          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
          this.selectResult = data;
          this.selectError = null;
        } catch (selectError) {
          if (true) {
            this.client.getLogger().error(selectError);
          }
          this.selectError = selectError;
        }
      }
    } else {
      data = state.data;
    }
    if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && status === "loading") {
      let placeholderData;
      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
        if (options.select && typeof placeholderData !== "undefined") {
          try {
            placeholderData = options.select(placeholderData);
            this.selectError = null;
          } catch (selectError) {
            if (true) {
              this.client.getLogger().error(selectError);
            }
            this.selectError = selectError;
          }
        }
      }
      if (typeof placeholderData !== "undefined") {
        status = "success";
        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);
        isPlaceholderData = true;
      }
    }
    if (this.selectError) {
      error = this.selectError;
      data = this.selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    const isFetching = fetchStatus === "fetching";
    const isLoading = status === "loading";
    const isError2 = status === "error";
    const result = {
      status,
      fetchStatus,
      isLoading,
      isSuccess: status === "success",
      isError: isError2,
      isInitialLoading: isLoading && isFetching,
      data,
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: state.fetchFailureCount,
      failureReason: state.fetchFailureReason,
      errorUpdateCount: state.errorUpdateCount,
      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && !isLoading,
      isLoadingError: isError2 && state.dataUpdatedAt === 0,
      isPaused: fetchStatus === "paused",
      isPlaceholderData,
      isPreviousData,
      isRefetchError: isError2 && state.dataUpdatedAt !== 0,
      isStale: isStale(query, options),
      refetch: this.refetch,
      remove: this.remove
    };
    return result;
  }
  updateResult(notifyOptions) {
    const prevResult = this.currentResult;
    const nextResult = this.createResult(this.currentQuery, this.options);
    this.currentResultState = this.currentQuery.state;
    this.currentResultOptions = this.options;
    if (shallowEqualObjects(nextResult, prevResult)) {
      return;
    }
    this.currentResult = nextResult;
    const defaultNotifyOptions = {
      cache: true
    };
    const shouldNotifyListeners = () => {
      if (!prevResult) {
        return true;
      }
      const {
        notifyOnChangeProps
      } = this.options;
      const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
      if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !this.trackedProps.size) {
        return true;
      }
      const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);
      if (this.options.useErrorBoundary) {
        includedProps.add("error");
      }
      return Object.keys(this.currentResult).some((key) => {
        const typedKey = key;
        const changed = this.currentResult[typedKey] !== prevResult[typedKey];
        return changed && includedProps.has(typedKey);
      });
    };
    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
      defaultNotifyOptions.listeners = true;
    }
    this.notify({
      ...defaultNotifyOptions,
      ...notifyOptions
    });
  }
  updateQuery() {
    const query = this.client.getQueryCache().build(this.client, this.options);
    if (query === this.currentQuery) {
      return;
    }
    const prevQuery = this.currentQuery;
    this.currentQuery = query;
    this.currentQueryInitialState = query.state;
    this.previousQueryResult = this.currentResult;
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  }
  onQueryUpdate(action) {
    const notifyOptions = {};
    if (action.type === "success") {
      notifyOptions.onSuccess = !action.manual;
    } else if (action.type === "error" && !isCancelledError(action.error)) {
      notifyOptions.onError = true;
    }
    this.updateResult(notifyOptions);
    if (this.hasListeners()) {
      this.updateTimers();
    }
  }
  notify(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.onSuccess) {
        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;
        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);
        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);
      } else if (notifyOptions.onError) {
        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;
        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);
        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, void 0, this.currentResult.error);
      }
      if (notifyOptions.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
      if (notifyOptions.cache) {
        this.client.getQueryCache().notify({
          query: this.currentQuery,
          type: "observerResultsUpdated"
        });
      }
    });
  }
};
function shouldLoadOnMount(query, options) {
  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (options.enabled !== false) {
    const value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return query.isStaleByTime(options.staleTime);
}
function shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {
  if (options.keepPreviousData) {
    return false;
  }
  if (options.placeholderData !== void 0) {
    return optimisticResult.isPlaceholderData;
  }
  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
    return true;
  }
  return false;
}

// node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs
var InfiniteQueryObserver = class extends QueryObserver {
  // Type override
  // Type override
  // Type override
  // eslint-disable-next-line @typescript-eslint/no-useless-constructor
  constructor(client, options) {
    super(client, options);
  }
  bindMethods() {
    super.bindMethods();
    this.fetchNextPage = this.fetchNextPage.bind(this);
    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
  }
  setOptions(options, notifyOptions) {
    super.setOptions({
      ...options,
      behavior: infiniteQueryBehavior()
    }, notifyOptions);
  }
  getOptimisticResult(options) {
    options.behavior = infiniteQueryBehavior();
    return super.getOptimisticResult(options);
  }
  fetchNextPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "forward",
          pageParam
        }
      }
    });
  }
  fetchPreviousPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "backward",
          pageParam
        }
      }
    });
  }
  createResult(query, options) {
    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;
    const {
      state
    } = query;
    const result = super.createResult(query, options);
    const {
      isFetching,
      isRefetching
    } = result;
    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === "forward";
    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === "backward";
    return {
      ...result,
      fetchNextPage: this.fetchNextPage,
      fetchPreviousPage: this.fetchPreviousPage,
      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),
      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),
      isFetchingNextPage,
      isFetchingPreviousPage,
      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage
    };
  }
};

// node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs
var MutationObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.setOptions(options);
    this.bindMethods();
    this.updateResult();
  }
  bindMethods() {
    this.mutate = this.mutate.bind(this);
    this.reset = this.reset.bind(this);
  }
  setOptions(options) {
    var _this$currentMutation;
    const prevOptions = this.options;
    this.options = this.client.defaultMutationOptions(options);
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getMutationCache().notify({
        type: "observerOptionsUpdated",
        mutation: this.currentMutation,
        observer: this
      });
    }
    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$currentMutation2;
      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);
    }
  }
  onMutationUpdate(action) {
    this.updateResult();
    const notifyOptions = {
      listeners: true
    };
    if (action.type === "success") {
      notifyOptions.onSuccess = true;
    } else if (action.type === "error") {
      notifyOptions.onError = true;
    }
    this.notify(notifyOptions);
  }
  getCurrentResult() {
    return this.currentResult;
  }
  reset() {
    this.currentMutation = void 0;
    this.updateResult();
    this.notify({
      listeners: true
    });
  }
  mutate(variables, options) {
    this.mutateOptions = options;
    if (this.currentMutation) {
      this.currentMutation.removeObserver(this);
    }
    this.currentMutation = this.client.getMutationCache().build(this.client, {
      ...this.options,
      variables: typeof variables !== "undefined" ? variables : this.options.variables
    });
    this.currentMutation.addObserver(this);
    return this.currentMutation.execute();
  }
  updateResult() {
    const state = this.currentMutation ? this.currentMutation.state : getDefaultState2();
    const result = {
      ...state,
      isLoading: state.status === "loading",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    };
    this.currentResult = result;
  }
  notify(options) {
    notifyManager.batch(() => {
      if (this.mutateOptions && this.hasListeners()) {
        if (options.onSuccess) {
          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;
          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);
        } else if (options.onError) {
          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;
          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, void 0, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
        }
      }
      if (options.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
    });
  }
};

// node_modules/@tanstack/react-query/build/lib/reactBatchedUpdates.mjs
var ReactDOM = __toESM(require_react_dom(), 1);
var unstable_batchedUpdates2 = ReactDOM.unstable_batchedUpdates;

// node_modules/@tanstack/react-query/build/lib/setBatchUpdatesFn.mjs
notifyManager.setBatchNotifyFunction(unstable_batchedUpdates2);

// node_modules/@tanstack/react-query/build/lib/useQueries.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs
var import_shim = __toESM(require_shim(), 1);
var useSyncExternalStore = import_shim.useSyncExternalStore;

// node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs
var React = __toESM(require_react(), 1);
var defaultContext = React.createContext(void 0);
var QueryClientSharingContext = React.createContext(false);
function getQueryClientContext(context, contextSharing) {
  if (context) {
    return context;
  }
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
var useQueryClient = ({
  context
} = {}) => {
  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));
  if (!queryClient) {
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  }
  return queryClient;
};
var QueryClientProvider = ({
  client,
  children,
  context,
  contextSharing = false
}) => {
  React.useEffect(() => {
    client.mount();
    return () => {
      client.unmount();
    };
  }, [client]);
  if (contextSharing) {
    client.getLogger().error("The contextSharing option has been deprecated and will be removed in the next major version");
  }
  const Context = getQueryClientContext(context, contextSharing);
  return React.createElement(QueryClientSharingContext.Provider, {
    value: !context && contextSharing
  }, React.createElement(Context.Provider, {
    value: client
  }, children));
};

// node_modules/@tanstack/react-query/build/lib/isRestoring.mjs
var React2 = __toESM(require_react(), 1);
var IsRestoringContext = React2.createContext(false);
var useIsRestoring = () => React2.useContext(IsRestoringContext);
var IsRestoringProvider = IsRestoringContext.Provider;

// node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs
var React3 = __toESM(require_react(), 1);
function createValue() {
  let isReset = false;
  return {
    clearReset: () => {
      isReset = false;
    },
    reset: () => {
      isReset = true;
    },
    isReset: () => {
      return isReset;
    }
  };
}
var QueryErrorResetBoundaryContext = React3.createContext(createValue());
var useQueryErrorResetBoundary = () => React3.useContext(QueryErrorResetBoundaryContext);

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var React4 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/utils.mjs
function shouldThrowError(_useErrorBoundary, params) {
  if (typeof _useErrorBoundary === "function") {
    return _useErrorBoundary(...params);
  }
  return !!_useErrorBoundary;
}

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {
  if (options.suspense || options.useErrorBoundary) {
    if (!errorResetBoundary.isReset()) {
      options.retryOnMount = false;
    }
  }
};
var useClearResetErrorBoundary = (errorResetBoundary) => {
  React4.useEffect(() => {
    errorResetBoundary.clearReset();
  }, [errorResetBoundary]);
};
var getHasError = ({
  result,
  errorResetBoundary,
  useErrorBoundary,
  query
}) => {
  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);
};

// node_modules/@tanstack/react-query/build/lib/suspense.mjs
var ensureStaleTime = (defaultedOptions) => {
  if (defaultedOptions.suspense) {
    if (typeof defaultedOptions.staleTime !== "number") {
      defaultedOptions.staleTime = 1e3;
    }
  }
};
var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
var shouldSuspend = (defaultedOptions, result, isRestoring) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);
var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).then(({
  data
}) => {
  defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
}).catch((error) => {
  errorResetBoundary.clearReset();
  defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error);
});

// node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs
var React6 = __toESM(require_react(), 1);
function useBaseQuery(options, Observer) {
  const queryClient = useQueryClient({
    context: options.context
  });
  const isRestoring = useIsRestoring();
  const errorResetBoundary = useQueryErrorResetBoundary();
  const defaultedOptions = queryClient.defaultQueryOptions(options);
  defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
  if (defaultedOptions.onError) {
    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
  }
  if (defaultedOptions.onSuccess) {
    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
  }
  if (defaultedOptions.onSettled) {
    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
  }
  ensureStaleTime(defaultedOptions);
  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
  useClearResetErrorBoundary(errorResetBoundary);
  const [observer] = React6.useState(() => new Observer(queryClient, defaultedOptions));
  const result = observer.getOptimisticResult(defaultedOptions);
  useSyncExternalStore(React6.useCallback((onStoreChange) => {
    const unsubscribe = isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange));
    observer.updateResult();
    return unsubscribe;
  }, [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  React6.useEffect(() => {
    observer.setOptions(defaultedOptions, {
      listeners: false
    });
  }, [defaultedOptions, observer]);
  if (shouldSuspend(defaultedOptions, result, isRestoring)) {
    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
  }
  if (getHasError({
    result,
    errorResetBoundary,
    useErrorBoundary: defaultedOptions.useErrorBoundary,
    query: observer.getCurrentQuery()
  })) {
    throw result.error;
  }
  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
}

// node_modules/@tanstack/react-query/build/lib/useQuery.mjs
function useQuery(arg1, arg2, arg3) {
  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(parsedOptions, QueryObserver);
}

// node_modules/@tanstack/react-query/build/lib/Hydrate.mjs
var React7 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsFetching.mjs
var React8 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsMutating.mjs
var React9 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useMutation.mjs
var React10 = __toESM(require_react(), 1);
function useMutation(arg1, arg2, arg3) {
  const options = parseMutationArgs(arg1, arg2, arg3);
  const queryClient = useQueryClient({
    context: options.context
  });
  const [observer] = React10.useState(() => new MutationObserver(queryClient, options));
  React10.useEffect(() => {
    observer.setOptions(options);
  }, [observer, options]);
  const result = useSyncExternalStore(React10.useCallback((onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  const mutate = React10.useCallback((variables, mutateOptions) => {
    observer.mutate(variables, mutateOptions).catch(noop2);
  }, [observer]);
  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {
    throw result.error;
  }
  return {
    ...result,
    mutate,
    mutateAsync: result.mutate
  };
}
function noop2() {
}

// node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs
function useInfiniteQuery(arg1, arg2, arg3) {
  const options = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(options, InfiniteQueryObserver);
}

// node_modules/@refinedev/devtools-internal/dist/esm/index.js
var import_error_stack_parser = __toESM(require_error_stack_parser());
var import_react = __toESM(require_react());
var v = "renderWithHooks";
var m = (r) => {
  let e = r.findIndex((s) => s.functionName === v);
  return e !== -1 ? r.slice(0, e) : r;
};
var i = false ? /node_modules\/refinedev\/(?<name>.*?)\// : /\/refine\/packages\/(?<name>.*?)\//;
var y = (r) => r ? !!r.match(i) : false;
var d2 = (r) => {
  var n;
  if (!r)
    return;
  let e = r.match(i), s = (n = e == null ? void 0 : e.groups) == null ? void 0 : n.name;
  if (s)
    return `@refinedev/${s}`;
};
function p2() {
  if (false)
    return [];
  try {
    let r = new Error(), e = import_error_stack_parser.default.parse(r);
    return m(e).map((t) => ({ file: t.fileName, line: t.lineNumber, column: t.columnNumber, function: t.functionName, isRefine: y(t.fileName), packageName: d2(t.fileName) })).filter((t) => t.function).slice(1);
  } catch {
    return [];
  }
}
var E = (r, e) => {
  if (p[r] === "auth")
    return null;
  if (r === "useCan")
    return e ? "key[1].resource" : "key[1]";
  if (p[r] === "audit-log")
    return r === "useLog" ? "variables.resource" : "key[1]";
  if (p[r] === "data") {
    if (r === "useCustom" || r === "useCustomMutation")
      return null;
    switch (r) {
      case "useList":
      case "useInfiniteList":
      case "useOne":
      case "useMany":
        return e ? "key[1]" : "key[2]";
      case "useCreate":
      case "useCreateMany":
      case "useDelete":
      case "useDeleteMany":
      case "useUpdate":
      case "useUpdateMany":
        return "variables.resource";
    }
  }
  return null;
};
function P(r, e) {
  if (false)
    return { hookName: "", trace: [], resourcePath: null, legacyKey: false };
  {
    let s = p2().slice(1), n = E(r, e);
    return { hookName: r, trace: s, resourcePath: n, legacyKey: e };
  }
}
var l = (r, e) => {
  let s = e == null ? void 0 : e.map((t) => `${t.file}:${t.line}:${t.column}#${t.function}-${t.packageName}-${t.isRefine ? 1 : 0}`);
  return JSON.stringify([...r ?? [], ...s ?? []]);
};
var R = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a, o2;
    d(r, T.ACTIVITY, { type: "mutation", identifier: l(e == null ? void 0 : e.options.mutationKey, (a = e == null ? void 0 : e.meta) == null ? void 0 : a.trace), key: e == null ? void 0 : e.options.mutationKey, status: e == null ? void 0 : e.state.status, state: e == null ? void 0 : e.state, variables: (o2 = e == null ? void 0 : e.state) == null ? void 0 : o2.variables, ...s }), t();
  });
};
var g = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a;
    d(r, T.ACTIVITY, { type: "query", identifier: l(e.queryKey, (a = e.meta) == null ? void 0 : a.trace), key: e.queryKey, status: e.state.status, state: e.state, ...s }), t();
  });
};
var C = false ? () => ({}) : (r) => {
  let { ws: e } = (0, import_react.useContext)(O), s = import_react.default.useRef(), n = import_react.default.useRef();
  return import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getQueryCache(), a = g(e);
    return t.getAll().forEach(a), s.current = t.subscribe(({ query: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = s.current) == null || o2.call(s);
    };
  }, [e, r]), import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getMutationCache(), a = R(e);
    return t.getAll().forEach(a), n.current = t.subscribe(({ mutation: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = n.current) == null || o2.call(n);
    };
  }, [e, r]), {};
};

// node_modules/@refinedev/core/dist/esm/index.js
var import_qs = __toESM(require_lib());

// node_modules/lodash-es/_arrayPush.js
function arrayPush(array, values) {
  var index = -1, length = values.length, offset = array.length;
  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}
var arrayPush_default = arrayPush;

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/lodash-es/isArguments.js
var objectProto3 = Object.prototype;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var propertyIsEnumerable = objectProto3.propertyIsEnumerable;
var isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_default = isArguments;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_isFlattenable.js
var spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
function isFlattenable(value) {
  return isArray_default(value) || isArguments_default(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
var isFlattenable_default = isFlattenable;

// node_modules/lodash-es/_baseFlatten.js
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1, length = array.length;
  predicate || (predicate = isFlattenable_default);
  result || (result = []);
  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush_default(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}
var baseFlatten_default = baseFlatten;

// node_modules/lodash-es/identity.js
function identity(value) {
  return value;
}
var identity_default = identity;

// node_modules/lodash-es/_apply.js
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var apply_default = apply;

// node_modules/lodash-es/_overRest.js
var nativeMax = Math.max;
function overRest(func, start, transform) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply_default(func, this, otherArgs);
  };
}
var overRest_default = overRest;

// node_modules/lodash-es/constant.js
function constant(value) {
  return function() {
    return value;
  };
}
var constant_default = constant;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto4 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString2.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var defineProperty_default = defineProperty;

// node_modules/lodash-es/_baseSetToString.js
var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
  return defineProperty_default(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant_default(string),
    "writable": true
  });
};
var baseSetToString_default = baseSetToString;

// node_modules/lodash-es/_shortOut.js
var HOT_COUNT = 800;
var HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var shortOut_default = shortOut;

// node_modules/lodash-es/_setToString.js
var setToString = shortOut_default(baseSetToString_default);
var setToString_default = setToString;

// node_modules/lodash-es/_baseRest.js
function baseRest(func, start) {
  return setToString_default(overRest_default(func, start, identity_default), func + "");
}
var baseRest_default = baseRest;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty4.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto6 = Object.prototype;
var hasOwnProperty5 = objectProto6.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty5.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/_setCacheAdd.js
var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED3);
  return this;
}
var setCacheAdd_default = setCacheAdd;

// node_modules/lodash-es/_setCacheHas.js
function setCacheHas(value) {
  return this.__data__.has(value);
}
var setCacheHas_default = setCacheHas;

// node_modules/lodash-es/_SetCache.js
function SetCache(values) {
  var index = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache_default();
  while (++index < length) {
    this.add(values[index]);
  }
}
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
SetCache.prototype.has = setCacheHas_default;
var SetCache_default = SetCache;

// node_modules/lodash-es/_baseFindIndex.js
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}
var baseFindIndex_default = baseFindIndex;

// node_modules/lodash-es/_baseIsNaN.js
function baseIsNaN(value) {
  return value !== value;
}
var baseIsNaN_default = baseIsNaN;

// node_modules/lodash-es/_strictIndexOf.js
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1, length = array.length;
  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}
var strictIndexOf_default = strictIndexOf;

// node_modules/lodash-es/_baseIndexOf.js
function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf_default(array, value, fromIndex) : baseFindIndex_default(array, baseIsNaN_default, fromIndex);
}
var baseIndexOf_default = baseIndexOf;

// node_modules/lodash-es/_arrayIncludes.js
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf_default(array, value, 0) > -1;
}
var arrayIncludes_default = arrayIncludes;

// node_modules/lodash-es/_arrayIncludesWith.js
function arrayIncludesWith(array, value, comparator) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}
var arrayIncludesWith_default = arrayIncludesWith;

// node_modules/lodash-es/_cacheHas.js
function cacheHas(cache, key) {
  return cache.has(key);
}
var cacheHas_default = cacheHas;

// node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set");
var Set_default = Set2;

// node_modules/lodash-es/noop.js
function noop3() {
}
var noop_default = noop3;

// node_modules/lodash-es/_setToArray.js
function setToArray(set) {
  var index = -1, result = Array(set.size);
  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}
var setToArray_default = setToArray;

// node_modules/lodash-es/_createSet.js
var INFINITY = 1 / 0;
var createSet = !(Set_default && 1 / setToArray_default(new Set_default([, -0]))[1] == INFINITY) ? noop_default : function(values) {
  return new Set_default(values);
};
var createSet_default = createSet;

// node_modules/lodash-es/_baseUniq.js
var LARGE_ARRAY_SIZE = 200;
function baseUniq(array, iteratee, comparator) {
  var index = -1, includes = arrayIncludes_default, length = array.length, isCommon = true, result = [], seen = result;
  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith_default;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet_default(array);
    if (set) {
      return setToArray_default(set);
    }
    isCommon = false;
    includes = cacheHas_default;
    seen = new SetCache_default();
  } else {
    seen = iteratee ? [] : result;
  }
  outer:
    while (++index < length) {
      var value = array[index], computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
  return result;
}
var baseUniq_default = baseUniq;

// node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var isLength_default = isLength;

// node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/lodash-es/isArrayLikeObject.js
function isArrayLikeObject(value) {
  return isObjectLike_default(value) && isArrayLike_default(value);
}
var isArrayLikeObject_default = isArrayLikeObject;

// node_modules/lodash-es/last.js
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
var last_default = last;

// node_modules/lodash-es/unionWith.js
var unionWith = baseRest_default(function(arrays) {
  var comparator = last_default(arrays);
  comparator = typeof comparator == "function" ? comparator : void 0;
  return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true), void 0, comparator);
});
var unionWith_default = unionWith;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_baseDifference.js
var LARGE_ARRAY_SIZE2 = 200;
function baseDifference(array, values, iteratee, comparator) {
  var index = -1, includes = arrayIncludes_default, isCommon = true, length = array.length, result = [], valuesLength = values.length;
  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap_default(values, baseUnary_default(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith_default;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE2) {
    includes = cacheHas_default;
    isCommon = false;
    values = new SetCache_default(values);
  }
  outer:
    while (++index < length) {
      var value = array[index], computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }
        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }
  return result;
}
var baseDifference_default = baseDifference;

// node_modules/lodash-es/differenceWith.js
var differenceWith = baseRest_default(function(array, values) {
  var comparator = last_default(values);
  if (isArrayLikeObject_default(comparator)) {
    comparator = void 0;
  }
  return isArrayLikeObject_default(array) ? baseDifference_default(array, baseFlatten_default(values, 1, isArrayLikeObject_default, true), void 0, comparator) : [];
});
var differenceWith_default = differenceWith;

// node_modules/@refinedev/core/dist/esm/index.js
var import_warn_once = __toESM(require_warn_once());

// node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var arrayFilter_default = arrayFilter;

// node_modules/lodash-es/_baseProperty.js
function baseProperty(key) {
  return function(object) {
    return object == null ? void 0 : object[key];
  };
}
var baseProperty_default = baseProperty;

// node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/lodash-es/unzip.js
var nativeMax2 = Math.max;
function unzip(array) {
  if (!(array && array.length)) {
    return [];
  }
  var length = 0;
  array = arrayFilter_default(array, function(group) {
    if (isArrayLikeObject_default(group)) {
      length = nativeMax2(group.length, length);
      return true;
    }
  });
  return baseTimes_default(length, function(index) {
    return arrayMap_default(array, baseProperty_default(index));
  });
}
var unzip_default = unzip;

// node_modules/lodash-es/zip.js
var zip = baseRest_default(unzip_default);
var zip_default = zip;

// node_modules/lodash-es/fromPairs.js
function fromPairs(pairs) {
  var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}
var fromPairs_default = fromPairs;

// node_modules/@refinedev/core/dist/esm/index.js
var import_pluralize = __toESM(require_pluralize());
var import_react3 = __toESM(require_react());
var import_pluralize2 = __toESM(require_pluralize());
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var import_react8 = __toESM(require_react());
var import_react9 = __toESM(require_react());
var import_react10 = __toESM(require_react());
var import_react11 = __toESM(require_react());
var import_react12 = __toESM(require_react());
var import_react13 = __toESM(require_react());
var import_qs2 = __toESM(require_lib());
var import_react14 = __toESM(require_react());
var import_qs3 = __toESM(require_lib());
var import_react15 = __toESM(require_react());
var import_react16 = __toESM(require_react());

// node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default();
  this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
var stackDelete_default = stackDelete;

// node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE3 = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE3 - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache_default(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var stackSet_default = stackSet;

// node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype["delete"] = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/lodash-es/_arraySome.js
function arraySome(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}
var arraySome_default = arraySome;

// node_modules/lodash-es/_equalArrays.js
var COMPARE_PARTIAL_FLAG = 1;
var COMPARE_UNORDERED_FLAG = 2;
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index < arrLength) {
    var arrValue = array[index], othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome_default(other, function(othValue2, othIndex) {
        if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result;
}
var equalArrays_default = equalArrays;

// node_modules/lodash-es/_Uint8Array.js
var Uint8Array2 = root_default.Uint8Array;
var Uint8Array_default = Uint8Array2;

// node_modules/lodash-es/_mapToArray.js
function mapToArray(map) {
  var index = -1, result = Array(map.size);
  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}
var mapToArray_default = mapToArray;

// node_modules/lodash-es/_equalByTag.js
var COMPARE_PARTIAL_FLAG2 = 1;
var COMPARE_UNORDERED_FLAG2 = 2;
var boolTag = "[object Boolean]";
var dateTag = "[object Date]";
var errorTag = "[object Error]";
var mapTag = "[object Map]";
var numberTag = "[object Number]";
var regexpTag = "[object RegExp]";
var setTag = "[object Set]";
var stringTag = "[object String]";
var symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]";
var dataViewTag = "[object DataView]";
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag:
      return eq_default(+object, +other);
    case errorTag:
      return object.name == other.name && object.message == other.message;
    case regexpTag:
    case stringTag:
      return object == other + "";
    case mapTag:
      var convert = mapToArray_default;
    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
      convert || (convert = setToArray_default);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG2;
      stack.set(object, other);
      var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}
var equalByTag_default = equalByTag;

// node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/lodash-es/_getSymbols.js
var objectProto7 = Object.prototype;
var propertyIsEnumerable2 = objectProto7.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable2.call(object, symbol);
  });
};
var getSymbols_default = getSymbols;

// node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return false;
}
var stubFalse_default = stubFalse;

// node_modules/lodash-es/isBuffer.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer2 = moduleExports ? root_default.Buffer : void 0;
var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse_default;
var isBuffer_default = isBuffer;

// node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER2 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var isIndex_default = isIndex;

// node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]";
var arrayTag = "[object Array]";
var boolTag2 = "[object Boolean]";
var dateTag2 = "[object Date]";
var errorTag2 = "[object Error]";
var funcTag2 = "[object Function]";
var mapTag2 = "[object Map]";
var numberTag2 = "[object Number]";
var objectTag = "[object Object]";
var regexpTag2 = "[object RegExp]";
var setTag2 = "[object Set]";
var stringTag2 = "[object String]";
var weakMapTag = "[object WeakMap]";
var arrayBufferTag2 = "[object ArrayBuffer]";
var dataViewTag2 = "[object DataView]";
var float32Tag = "[object Float32Array]";
var float64Tag = "[object Float64Array]";
var int8Tag = "[object Int8Array]";
var int16Tag = "[object Int16Array]";
var int32Tag = "[object Int32Array]";
var uint8Tag = "[object Uint8Array]";
var uint8ClampedTag = "[object Uint8ClampedArray]";
var uint16Tag = "[object Uint16Array]";
var uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag2] = typedArrayTags[boolTag2] = typedArrayTags[dataViewTag2] = typedArrayTags[dateTag2] = typedArrayTags[errorTag2] = typedArrayTags[funcTag2] = typedArrayTags[mapTag2] = typedArrayTags[numberTag2] = typedArrayTags[objectTag] = typedArrayTags[regexpTag2] = typedArrayTags[setTag2] = typedArrayTags[stringTag2] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/lodash-es/_nodeUtil.js
var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
var freeProcess = moduleExports2 && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/isTypedArray.js
var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
var isTypedArray_default = isTypedArray;

// node_modules/lodash-es/_arrayLikeKeys.js
var objectProto8 = Object.prototype;
var hasOwnProperty6 = objectProto8.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty6.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex_default(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/lodash-es/_isPrototype.js
var objectProto9 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto9;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object);
var nativeKeys_default = nativeKeys;

// node_modules/lodash-es/_baseKeys.js
var objectProto10 = Object.prototype;
var hasOwnProperty7 = objectProto10.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object)) {
    return nativeKeys_default(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty7.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/lodash-es/_equalObjects.js
var COMPARE_PARTIAL_FLAG3 = 1;
var objectProto11 = Object.prototype;
var hasOwnProperty8 = objectProto11.hasOwnProperty;
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty8.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var equalObjects_default = equalObjects;

// node_modules/lodash-es/_DataView.js
var DataView2 = getNative_default(root_default, "DataView");
var DataView_default = DataView2;

// node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise");
var Promise_default = Promise2;

// node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap");
var WeakMap_default = WeakMap2;

// node_modules/lodash-es/_getTag.js
var mapTag3 = "[object Map]";
var objectTag2 = "[object Object]";
var promiseTag = "[object Promise]";
var setTag3 = "[object Set]";
var weakMapTag2 = "[object WeakMap]";
var dataViewTag3 = "[object DataView]";
var dataViewCtorString = toSource_default(DataView_default);
var mapCtorString = toSource_default(Map_default);
var promiseCtorString = toSource_default(Promise_default);
var setCtorString = toSource_default(Set_default);
var weakMapCtorString = toSource_default(WeakMap_default);
var getTag = baseGetTag_default;
if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
  getTag = function(value) {
    var result = baseGetTag_default(value), Ctor = result == objectTag2 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag3;
        case mapCtorString:
          return mapTag3;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag3;
        case weakMapCtorString:
          return weakMapTag2;
      }
    }
    return result;
  };
}
var getTag_default = getTag;

// node_modules/lodash-es/_baseIsEqualDeep.js
var COMPARE_PARTIAL_FLAG4 = 1;
var argsTag3 = "[object Arguments]";
var arrayTag2 = "[object Array]";
var objectTag3 = "[object Object]";
var objectProto12 = Object.prototype;
var hasOwnProperty9 = objectProto12.hasOwnProperty;
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
  objTag = objTag == argsTag3 ? objectTag3 : objTag;
  othTag = othTag == argsTag3 ? objectTag3 : othTag;
  var objIsObj = objTag == objectTag3, othIsObj = othTag == objectTag3, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer_default(object)) {
    if (!isBuffer_default(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack_default());
    return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
    var objIsWrapped = objIsObj && hasOwnProperty9.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty9.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack_default());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack_default());
  return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
}
var baseIsEqualDeep_default = baseIsEqualDeep;

// node_modules/lodash-es/_baseIsEqual.js
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
}
var baseIsEqual_default = baseIsEqual;

// node_modules/lodash-es/isEqual.js
function isEqual(value, other) {
  return baseIsEqual_default(value, other);
}
var isEqual_default = isEqual;

// node_modules/@refinedev/core/dist/esm/index.js
var import_react17 = __toESM(require_react());
var import_react18 = __toESM(require_react());
var import_react19 = __toESM(require_react());
var import_react20 = __toESM(require_react());
var import_react21 = __toESM(require_react());
var import_react22 = __toESM(require_react());
var import_react23 = __toESM(require_react());
var import_react24 = __toESM(require_react());
var import_react25 = __toESM(require_react());
var import_react26 = __toESM(require_react());
var import_react27 = __toESM(require_react());
var import_react28 = __toESM(require_react());
var import_react29 = __toESM(require_react());
var import_react30 = __toESM(require_react());
var import_react31 = __toESM(require_react());
var import_react32 = __toESM(require_react());
var import_react33 = __toESM(require_react());
var import_react34 = __toESM(require_react());
var import_react35 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_react37 = __toESM(require_react());
var import_react38 = __toESM(require_react());
var import_react39 = __toESM(require_react());
var import_react40 = __toESM(require_react());
var import_react41 = __toESM(require_react());
var import_react42 = __toESM(require_react());
var import_export_to_csv_fix_source_map = __toESM(require_build());
var import_react43 = __toESM(require_react());
var import_warn_once2 = __toESM(require_warn_once());

// node_modules/lodash-es/now.js
var now = function() {
  return root_default.Date.now();
};
var now_default = now;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isSymbol.js
var symbolTag2 = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag2;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax3 = Math.max;
var nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax3(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now_default();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time = now_default(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce;

// node_modules/@refinedev/core/dist/esm/index.js
var import_react44 = __toESM(require_react());
var import_react45 = __toESM(require_react());
var import_react46 = __toESM(require_react());
var import_react47 = __toESM(require_react());
var import_react48 = __toESM(require_react());
var import_warn_once3 = __toESM(require_warn_once());
var import_react49 = __toESM(require_react());
var import_papaparse = __toESM(require_papaparse_min());

// node_modules/lodash-es/_baseSlice.js
function baseSlice(array, start, end) {
  var index = -1, length = array.length;
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}
var baseSlice_default = baseSlice;

// node_modules/lodash-es/_isIterateeCall.js
function isIterateeCall(value, index, object) {
  if (!isObject_default(object)) {
    return false;
  }
  var type = typeof index;
  if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
    return eq_default(object[index], value);
  }
  return false;
}
var isIterateeCall_default = isIterateeCall;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result = toFinite_default(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/chunk.js
var nativeCeil = Math.ceil;
var nativeMax4 = Math.max;
function chunk(array, size, guard) {
  if (guard ? isIterateeCall_default(array, size, guard) : size === void 0) {
    size = 1;
  } else {
    size = nativeMax4(toInteger_default(size), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size < 1) {
    return [];
  }
  var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
  while (index < length) {
    result[resIndex++] = baseSlice_default(array, index, index += size);
  }
  return result;
}
var chunk_default = chunk;

// node_modules/@refinedev/core/dist/esm/index.js
var import_react50 = __toESM(require_react());
var import_react51 = __toESM(require_react());
var import_react52 = __toESM(require_react());
var import_react53 = __toESM(require_react());
var import_react54 = __toESM(require_react());
var import_react55 = __toESM(require_react());
var import_react56 = __toESM(require_react());
var import_react57 = __toESM(require_react());

// node_modules/lodash-es/_baseIsMatch.js
var COMPARE_PARTIAL_FLAG5 = 1;
var COMPARE_UNORDERED_FLAG3 = 2;
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length, length = index, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0], objValue = object[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack_default();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var baseIsMatch_default = baseIsMatch;

// node_modules/lodash-es/_isStrictComparable.js
function isStrictComparable(value) {
  return value === value && !isObject_default(value);
}
var isStrictComparable_default = isStrictComparable;

// node_modules/lodash-es/_getMatchData.js
function getMatchData(object) {
  var result = keys_default(object), length = result.length;
  while (length--) {
    var key = result[length], value = object[key];
    result[length] = [key, value, isStrictComparable_default(value)];
  }
  return result;
}
var getMatchData_default = getMatchData;

// node_modules/lodash-es/_matchesStrictComparable.js
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
  };
}
var matchesStrictComparable_default = matchesStrictComparable;

// node_modules/lodash-es/_baseMatches.js
function baseMatches(source) {
  var matchData = getMatchData_default(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch_default(object, source, matchData);
  };
}
var baseMatches_default = baseMatches;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT2 = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT2);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/_baseToString.js
var INFINITY3 = 1 / 0;
var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto2 ? symbolProto2.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY4 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY4 ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_default = get;

// node_modules/lodash-es/_baseHasIn.js
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}
var baseHasIn_default = baseHasIn;

// node_modules/lodash-es/_hasPath.js
function hasPath(object, path, hasFunc) {
  path = castPath_default(path, object);
  var index = -1, length = path.length, result = false;
  while (++index < length) {
    var key = toKey_default(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object) || isArguments_default(object));
}
var hasPath_default = hasPath;

// node_modules/lodash-es/hasIn.js
function hasIn(object, path) {
  return object != null && hasPath_default(object, path, baseHasIn_default);
}
var hasIn_default = hasIn;

// node_modules/lodash-es/_baseMatchesProperty.js
var COMPARE_PARTIAL_FLAG6 = 1;
var COMPARE_UNORDERED_FLAG4 = 2;
function baseMatchesProperty(path, srcValue) {
  if (isKey_default(path) && isStrictComparable_default(srcValue)) {
    return matchesStrictComparable_default(toKey_default(path), srcValue);
  }
  return function(object) {
    var objValue = get_default(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
  };
}
var baseMatchesProperty_default = baseMatchesProperty;

// node_modules/lodash-es/_basePropertyDeep.js
function basePropertyDeep(path) {
  return function(object) {
    return baseGet_default(object, path);
  };
}
var basePropertyDeep_default = basePropertyDeep;

// node_modules/lodash-es/property.js
function property(path) {
  return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
}
var property_default = property;

// node_modules/lodash-es/_baseIteratee.js
function baseIteratee(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity_default;
  }
  if (typeof value == "object") {
    return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
  }
  return property_default(value);
}
var baseIteratee_default = baseIteratee;

// node_modules/lodash-es/uniqBy.js
function uniqBy(array, iteratee) {
  return array && array.length ? baseUniq_default(array, baseIteratee_default(iteratee, 2)) : [];
}
var uniqBy_default = uniqBy;

// node_modules/@refinedev/core/dist/esm/index.js
var import_react58 = __toESM(require_react());
var import_qs4 = __toESM(require_lib());
var import_warn_once4 = __toESM(require_warn_once());
var import_react59 = __toESM(require_react());
var import_react60 = __toESM(require_react());
var import_react61 = __toESM(require_react());
var import_react62 = __toESM(require_react());
var import_warn_once5 = __toESM(require_warn_once());
var import_react63 = __toESM(require_react());
var import_react64 = __toESM(require_react());
var import_react65 = __toESM(require_react());
var import_react66 = __toESM(require_react());
var import_react67 = __toESM(require_react());
var import_react68 = __toESM(require_react());
var import_react69 = __toESM(require_react());
var import_react70 = __toESM(require_react());
var import_react71 = __toESM(require_react());
var import_react72 = __toESM(require_react());
var import_react73 = __toESM(require_react());
var import_react74 = __toESM(require_react());
var import_react75 = __toESM(require_react());
var import_react76 = __toESM(require_react());
var import_react77 = __toESM(require_react());
var import_react78 = __toESM(require_react());
var import_react79 = __toESM(require_react());
var import_react80 = __toESM(require_react());
var import_react81 = __toESM(require_react());
var fn = Object.defineProperty;
var o = (e, t) => fn(e, "name", { value: t, configurable: true });
var Ft = o((e) => e / 1e3, "userFriendlySecond");
var qt = o((e, t = (r) => r) => {
  let [r, ...s] = e;
  return s.map((n) => fromPairs_default(zip_default(r, n))).map((n, i2, a) => t.call(void 0, n, i2, a));
}, "importCSVMapper");
var er = o((e = "", t) => {
  let r = Vt(e);
  return t === "singular" ? import_pluralize.default.singular(r) : import_pluralize.default.plural(r);
}, "userFriendlyResourceName");
var xo = o((e = {}) => e != null && e.id ? { ...e, id: decodeURIComponent(e.id) } : e, "handleUseParams");
var w = o((...e) => e.find((t) => typeof t < "u"), "pickNotDeprecated");
function je(e, t) {
  return e.findIndex((r, s) => s <= e.length - t.length && t.every((n, i2) => e[s + i2] === n));
}
o(je, "arrayFindIndex");
function Tn(e) {
  if (e[0] === "data") {
    let t = e.slice(1);
    if (t[2] === "many")
      t[2] = "getMany";
    else if (t[2] === "infinite")
      t[2] = "list";
    else if (t[2] === "one")
      t[2] = "detail";
    else if (t[1] === "custom") {
      let r = { ...t[2] };
      return delete r.method, delete r.url, [t[0], t[1], t[2].method, t[2].url, r];
    }
    return t;
  }
  if (e[0] === "audit" && e[2] === "list")
    return ["logList", e[1], e[3]];
  if (e[0] === "access" && e.length === 4)
    return ["useCan", { resource: e[1], action: e[2], ...e[3] }];
  if (e[0] === "auth") {
    if (je(e, ["auth", "login"]) !== -1)
      return ["useLogin"];
    if (je(e, ["auth", "logout"]) !== -1)
      return ["useLogout"];
    if (je(e, ["auth", "identity"]) !== -1)
      return ["getUserIdentity"];
    if (je(e, ["auth", "register"]) !== -1)
      return ["useRegister"];
    if (je(e, ["auth", "forgotPassword"]) !== -1)
      return ["useForgotPassword"];
    if (je(e, ["auth", "check"]) !== -1)
      return ["useAuthenticated", e[2]];
    if (je(e, ["auth", "onError"]) !== -1)
      return ["useCheckError"];
    if (je(e, ["auth", "permissions"]) !== -1)
      return ["usePermissions"];
    if (je(e, ["auth", "updatePassword"]) !== -1)
      return ["useUpdatePassword"];
  }
  return e;
}
o(Tn, "convertToLegacy");
var De = class {
  constructor(t = []) {
    this.segments = [];
    this.segments = t;
  }
  key() {
    return this.segments;
  }
  legacy() {
    return Tn(this.segments);
  }
  get(t) {
    return t ? this.legacy() : this.segments;
  }
};
o(De, "BaseKeyBuilder");
var He = class extends De {
  constructor(t) {
    super(t);
  }
  params(t) {
    return new De([...this.segments, t]);
  }
};
o(He, "ParamsKeyBuilder");
var tr = class extends De {
  constructor(t) {
    super(t);
  }
  id(t) {
    return new He([...this.segments, t ? String(t) : void 0]);
  }
};
o(tr, "DataIdRequiringKeyBuilder");
var rr = class extends De {
  constructor(t) {
    super(t);
  }
  ids(...t) {
    return new He([...this.segments, ...t.length ? [t.map((r) => String(r))] : []]);
  }
};
o(rr, "DataIdsRequiringKeyBuilder");
var or = class extends De {
  constructor(t) {
    super(t);
  }
  action(t) {
    if (t === "one")
      return new tr([...this.segments, t]);
    if (t === "many")
      return new rr([...this.segments, t]);
    if (["list", "infinite"].includes(t))
      return new He([...this.segments, t]);
    throw new Error("Invalid action type");
  }
};
o(or, "DataResourceKeyBuilder");
var sr = class extends De {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new or([...this.segments, t]);
  }
  mutation(t) {
    return new He([...t === "custom" ? this.segments : [this.segments[0]], t]);
  }
};
o(sr, "DataKeyBuilder");
var nr = class extends De {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new He([...this.segments, t]);
  }
};
o(nr, "AuthKeyBuilder");
var ar = class extends De {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new He([...this.segments, t]);
  }
};
o(ar, "AccessResourceKeyBuilder");
var ir = class extends De {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new ar([...this.segments, t]);
  }
};
o(ir, "AccessKeyBuilder");
var ur = class extends De {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new He([...this.segments, t]);
  }
};
o(ur, "AuditActionKeyBuilder");
var cr = class extends De {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new ur([...this.segments, t]);
  }
  action(t) {
    return new He([...this.segments, t]);
  }
};
o(cr, "AuditKeyBuilder");
var xt = class extends De {
  constructor(t) {
    super(t);
  }
  data(t) {
    return new sr(["data", t || "default"]);
  }
  auth() {
    return new nr(["auth"]);
  }
  access() {
    return new ir(["access"]);
  }
  audit() {
    return new cr(["audit"]);
  }
};
o(xt, "KeyBuilder");
var Ge = o(() => new xt([]), "keys");
var Co = o((e, t, r, s) => {
  let n = t || "default", i2 = { all: [n], resourceAll: [n, e || ""], list: (a) => [...i2.resourceAll, "list", { ...a, ...w(r, s) || {} }], many: (a) => [...i2.resourceAll, "getMany", a && a.map(String), { ...w(r, s) || {} }].filter((u) => u !== void 0), detail: (a) => [...i2.resourceAll, "detail", a == null ? void 0 : a.toString(), { ...w(r, s) || {} }], logList: (a) => ["logList", e, a, s].filter((u) => u !== void 0) };
  return i2;
}, "queryKeys");
var Xe = o((e) => (t, r, s, n) => {
  let i2 = r || "default";
  return { all: Ge().data(i2).get(e), resourceAll: Ge().data(r).resource(t ?? "").get(e), list: (u) => Ge().data(r).resource(t ?? "").action("list").params({ ...u, ...w(s, n) || {} }).get(e), many: (u) => Ge().data(r).resource(t ?? "").action("many").ids(...u ?? []).params({ ...w(s, n) || {} }).get(e), detail: (u) => Ge().data(r).resource(t ?? "").action("one").id(u ?? "").params({ ...w(s, n) || {} }).get(e), logList: (u) => [...Ge().audit().resource(t).action("list").params(u).get(e), n].filter((d3) => d3 !== void 0) };
}, "queryKeysReplacement");
var Qr = o((e, t) => !e || !t ? false : !!e.find((r) => r === t), "hasPermission");
var Ct = o((e) => e.startsWith(":"), "isParameter");
var Oe = o((e) => e.split("/").filter((r) => r !== ""), "splitToSegments");
var ho = o((e, t) => {
  let r = Oe(e), s = Oe(t);
  return r.length === s.length;
}, "isSegmentCountsSame");
var Pe = o((e) => e.replace(/^\/|\/$/g, ""), "removeLeadingTrailingSlashes");
var bo = o((e, t) => {
  let r = Pe(e), s = Pe(t);
  if (!ho(r, s))
    return false;
  let n = Oe(r);
  return Oe(s).every((a, u) => Ct(a) || a === n[u]);
}, "checkBySegments");
var vo = o((e, t, r) => {
  let s = Pe(r || ""), n = `${s}${s ? "/" : ""}${e}`;
  return t === "list" ? n = `${n}` : t === "create" ? n = `${n}/create` : t === "edit" ? n = `${n}/edit/:id` : t === "show" ? n = `${n}/show/:id` : t === "clone" && (n = `${n}/clone/:id`), `/${n.replace(/^\//, "")}`;
}, "getDefaultActionPath");
var Se = o((e, t) => {
  var n, i2;
  let r = w((n = e.meta) == null ? void 0 : n.parent, (i2 = e.options) == null ? void 0 : i2.parent, e.parentName);
  return r ? t.find((a) => (a.identifier ?? a.name) === r) ?? { name: r } : void 0;
}, "getParentResource");
var Bt = o((e, t, r) => {
  let s = [], n = Se(e, t);
  for (; n; )
    s.push(n), n = Se(n, t);
  if (s.length !== 0)
    return `/${s.reverse().map((i2) => {
      var u;
      let a = r ? ((u = i2.options) == null ? void 0 : u.route) ?? i2.name : i2.name;
      return Pe(a);
    }).join("/")}`;
}, "getParentPrefixForResource");
var Te = o((e, t, r) => {
  let s = [], n = ["list", "show", "edit", "create", "clone"], i2 = Bt(e, t, r);
  return n.forEach((a) => {
    var c, p3;
    let u = r && a === "clone" ? e.create : e[a], d3;
    typeof u == "function" || r ? d3 = vo(r ? ((c = e.meta) == null ? void 0 : c.route) ?? ((p3 = e.options) == null ? void 0 : p3.route) ?? e.name : e.name, a, r ? i2 : void 0) : typeof u == "string" ? d3 = u : typeof u == "object" && (d3 = u.path), d3 && s.push({ action: a, resource: e, route: `/${d3.replace(/^\//, "")}` });
  }), s;
}, "getActionRoutesFromResource");
var Do = o((e) => {
  var n;
  if (e.length === 0)
    return;
  if (e.length === 1)
    return e[0];
  let t = e.map((i2) => ({ ...i2, splitted: Oe(Pe(i2.route)) })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [...t];
  for (let i2 = 0; i2 < r; i2++) {
    let a = s.filter((u) => !Ct(u.splitted[i2]));
    if (a.length !== 0) {
      if (a.length === 1) {
        s = a;
        break;
      }
      s = a;
    }
  }
  return s[0];
}, "pickMatchedRoute");
var Lo = o((e, t) => {
  let s = t.flatMap((i2) => Te(i2, t)).filter((i2) => bo(e, i2.route)), n = Do(s);
  return { found: !!n, resource: n == null ? void 0 : n.resource, action: n == null ? void 0 : n.action, matchedRoute: n == null ? void 0 : n.route };
}, "matchResourceFromRoute");
var dr = o((e, t) => {
  var n;
  let r, s = Bt(e, t, true);
  if (s) {
    let i2 = w(e.meta, e.options);
    r = `${s}/${(i2 == null ? void 0 : i2.route) ?? e.name}`;
  } else
    r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;
  return `/${r.replace(/^\//, "")}`;
}, "routeGenerator");
var Eo = o((e) => {
  var a;
  let t = [], r = {}, s = {}, n, i2;
  for (let u = 0; u < e.length; u++) {
    n = e[u];
    let d3 = n.route ?? ((a = w(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : a.route) ?? "";
    r[d3] = n, r[d3].children = [], s[n.name] = n, s[n.name].children = [];
  }
  for (let u in r)
    r.hasOwnProperty(u) && (i2 = r[u], i2.parentName && s[i2.parentName] ? s[i2.parentName].children.push(i2) : t.push(i2));
  return t;
}, "createTreeView");
var Vt = o((e) => (e = e.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3"), e = e.toLowerCase().replace(/[_-]+/g, " ").replace(/\s{2,}/g, " ").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), "humanizeString");
var Fr = o(({ children: e }) => import_react4.default.createElement("div", null, e), "DefaultLayout");
var Le = { mutationMode: "pessimistic", syncWithLocation: false, undoableTimeout: 5e3, warnWhenUnsavedChanges: false, liveMode: "off", redirect: { afterCreate: "list", afterClone: "list", afterEdit: "list" }, overtime: { interval: 1e3 }, textTransformers: { humanize: Vt, plural: import_pluralize2.default.plural, singular: import_pluralize2.default.singular }, disableServerSideValidation: false };
var Ee = import_react3.default.createContext({ hasDashboard: false, mutationMode: "pessimistic", warnWhenUnsavedChanges: false, syncWithLocation: false, undoableTimeout: 5e3, Title: void 0, Sider: void 0, Header: void 0, Footer: void 0, Layout: Fr, OffLayoutArea: void 0, liveMode: "off", onLiveEvent: void 0, options: Le });
var Io = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: i2, DashboardPage: a, Title: u, Layout: d3 = Fr, Header: c, Sider: p3, Footer: m2, OffLayoutArea: T2, LoginPage: g2 = Vr, catchAll: R2, liveMode: L = "off", onLiveEvent: U, options: y2 }) => import_react3.default.createElement(Ee.Provider, { value: { hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, Title: u, undoableTimeout: n, Layout: d3, Header: c, Sider: p3, Footer: m2, OffLayoutArea: T2, DashboardPage: a, LoginPage: g2, catchAll: R2, liveMode: L, onLiveEvent: U, options: y2 } }, i2), "RefineContextProvider");
var Br = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: i2, syncWithLocation: a, undoableTimeout: u, warnWhenUnsavedChanges: d3 } = {}) => {
  var T2, g2, R2, L, U, y2, b, D;
  let c = { breadcrumb: e == null ? void 0 : e.breadcrumb, mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? Le.mutationMode, undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? u ?? Le.undoableTimeout, syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? a ?? Le.syncWithLocation, warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? d3 ?? Le.warnWhenUnsavedChanges, liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Le.liveMode, redirect: { afterCreate: ((T2 = e == null ? void 0 : e.redirect) == null ? void 0 : T2.afterCreate) ?? Le.redirect.afterCreate, afterClone: ((g2 = e == null ? void 0 : e.redirect) == null ? void 0 : g2.afterClone) ?? Le.redirect.afterClone, afterEdit: ((R2 = e == null ? void 0 : e.redirect) == null ? void 0 : R2.afterEdit) ?? Le.redirect.afterEdit }, overtime: (e == null ? void 0 : e.overtime) ?? Le.overtime, textTransformers: { humanize: ((L = e == null ? void 0 : e.textTransformers) == null ? void 0 : L.humanize) ?? Le.textTransformers.humanize, plural: ((U = e == null ? void 0 : e.textTransformers) == null ? void 0 : U.plural) ?? Le.textTransformers.plural, singular: ((y2 = e == null ? void 0 : e.textTransformers) == null ? void 0 : y2.singular) ?? Le.textTransformers.singular }, disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Le.disableServerSideValidation, projectId: e == null ? void 0 : e.projectId, useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys }, p3 = (e == null ? void 0 : e.disableTelemetry) ?? t ?? false, m2 = { clientConfig: ((b = e == null ? void 0 : e.reactQuery) == null ? void 0 : b.clientConfig) ?? n ?? {}, devtoolConfig: ((D = e == null ? void 0 : e.reactQuery) == null ? void 0 : D.devtoolConfig) ?? i2 ?? {} };
  return { optionsWithDefaults: c, disableTelemetryWithDefault: p3, reactQueryWithDefaults: m2 };
}, "handleRefineOptions");
var Nr = o(({ redirectFromProps: e, action: t, redirectOptions: r }) => {
  if (e || e === false)
    return e;
  switch (t) {
    case "clone":
      return r.afterClone;
    case "create":
      return r.afterCreate;
    case "edit":
      return r.afterEdit;
    default:
      return false;
  }
}, "redirectPage");
var pr = o(async (e, t, r) => {
  let s = [];
  for (let [n, i2] of e.entries())
    try {
      let a = await i2();
      s.push(t(a, n));
    } catch (a) {
      s.push(r(a, n));
    }
  return s;
}, "sequentialPromises");
var ce = o((e, t = [], r = false) => {
  if (!e)
    return;
  if (r) {
    let n = t.find((a) => Pe(a.route ?? "") === Pe(e));
    return n || t.find((a) => a.name === e);
  }
  let s = t.find((n) => n.identifier === e);
  return s || (s = t.find((n) => n.name === e)), s;
}, "pickResource");
var O2 = o((e, t, r) => {
  if (t)
    return t;
  let s = ce(e, r), n = w(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);
  return n != null && n.dataProviderName ? n.dataProviderName : "default";
}, "pickDataProvider");
var Ze = o(async (e) => ({ data: (await Promise.all(e)).map((t) => t.data) }), "handleMultiple");
var lr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.next)
    return r.next;
  let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, i2 = Math.ceil((e.total || 0) / n);
  return s < i2 ? Number(s) + 1 : void 0;
}, "getNextPageParam");
var mr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.prev)
    return r.prev;
  let s = (t == null ? void 0 : t.current) || 1;
  return s === 1 ? void 0 : s - 1;
}, "getPreviousPageParam");
var fr = o((e) => {
  let t = [];
  return e.forEach((r) => {
    var s, n;
    t.push({ ...r, label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label), route: dr(r, e), canCreate: !!r.create, canEdit: !!r.edit, canShow: !!r.show, canDelete: r.canDelete });
  }), t;
}, "legacyResourceTransform");
var wo = o((e) => Oe(Pe(e)).flatMap((r) => Ct(r) ? [r.slice(1)] : []), "pickRouteParams");
var So = o((e, t = {}) => e.reduce((r, s) => {
  let n = t[s];
  return typeof n < "u" && (r[s] = n), r;
}, {}), "prepareRouteParams");
var Ue = o((e, t = {}, r = {}, s = {}) => {
  let n = wo(e), i2 = So(n, { ...t, ...typeof (r == null ? void 0 : r.id) < "u" ? { id: r.id } : {}, ...typeof (r == null ? void 0 : r.action) < "u" ? { action: r.action } : {}, ...typeof (r == null ? void 0 : r.resource) < "u" ? { resource: r.resource } : {}, ...r == null ? void 0 : r.params, ...s });
  return e.replace(/:([^\/]+)/g, (a, u) => {
    let d3 = i2[u];
    return typeof d3 < "u" ? `${d3}` : a;
  });
}, "composeRoute");
var Ao = import_react5.default.createContext({});
var ko = o(({ children: e, isProvided: t, ...r }) => {
  let { replace: s } = pe(), n = o(async (d3) => {
    var c;
    try {
      return await ((c = r.login) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "loginFunc"), i2 = o(async (d3) => {
    var c;
    try {
      return await ((c = r.register) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "registerFunc"), a = o(async (d3) => {
    var c;
    try {
      return await ((c = r.logout) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "logoutFunc"), u = o(async (d3) => {
    var c;
    try {
      return await ((c = r.checkAuth) == null ? void 0 : c.call(r, d3)), Promise.resolve();
    } catch (p3) {
      return p3 != null && p3.redirectPath && s(p3.redirectPath), Promise.reject(p3);
    }
  }, "checkAuthFunc");
  return import_react5.default.createElement(Ao.Provider, { value: { ...r, login: n, logout: a, checkAuth: u, register: i2, isProvided: t } }, e);
}, "LegacyAuthContextProvider");
var Qo = import_react5.default.createContext({});
var Fo = o(({ children: e, isProvided: t, ...r }) => {
  let s = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.login) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in login: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleLogin"), n = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.register) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in register: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleRegister"), i2 = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.logout) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in logout: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleLogout"), a = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.check) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in check: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleCheck"), u = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.forgotPassword) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in forgotPassword: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleForgotPassword"), d3 = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.updatePassword) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in updatePassword: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleUpdatePassword");
  return import_react5.default.createElement(Qo.Provider, { value: { ...r, login: s, logout: i2, check: a, register: n, forgotPassword: u, updatePassword: d3, isProvided: t } }, e);
}, "AuthBindingsContextProvider");
var se = o(() => import_react5.default.useContext(Ao), "useLegacyAuthContext");
var de = o(() => import_react5.default.useContext(Qo), "useAuthBindingsContext");
var Z = o(() => {
  let e = se(), t = de();
  return t.isProvided ? { isLegacy: false, ...t } : e.isProvided ? { isLegacy: true, ...e, check: e.checkAuth, onError: e.checkError, getIdentity: e.getUserIdentity } : null;
}, "useActiveAuthProvider");
var Nt = o(({ hasPagination: e, pagination: t, configPagination: r } = {}) => {
  let s = e === false ? "off" : "server", n = (t == null ? void 0 : t.mode) ?? s, i2 = w(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, a = w(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;
  return { current: i2, pageSize: a, mode: n };
}, "handlePaginationParams");
var yr = o((e) => {
  let [t, r] = (0, import_react6.useState)(false);
  return (0, import_react6.useEffect)(() => {
    let s = window.matchMedia(e);
    s.matches !== t && r(s.matches);
    let n = o(() => r(s.matches), "listener");
    return window.addEventListener("resize", n), () => window.removeEventListener("resize", n);
  }, [t, e]), t;
}, "useMediaQuery");
var gr = o((e, t, r, s) => {
  let n = s ? e(t, s, r) : e(t, r), i2 = r ?? t;
  return n === t || typeof n > "u" ? i2 : n;
}, "safeTranslate");
function Vo(e, t, r, s, n) {
  var T2;
  let i2 = { create: "Create new ", clone: `#${s ?? ""} Clone `, edit: `#${s ?? ""} Edit `, show: `#${s ?? ""} Show `, list: "" }, a = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), u = (t == null ? void 0 : t.label) ?? ((T2 = t == null ? void 0 : t.meta) == null ? void 0 : T2.label) ?? er(a, r === "list" ? "plural" : "singular"), d3 = n ?? u, c = gr(e, "documentTitle.default", "refine"), p3 = gr(e, "documentTitle.suffix", " | refine"), m2 = c;
  return r && a && (m2 = gr(e, `documentTitle.${a}.${r}`, `${i2[r] ?? ""}${d3}${p3}`, { id: s })), m2;
}
o(Vo, "generateDefaultDocumentTitle");
var $e = o(() => {
  let { mutationMode: e, undoableTimeout: t } = (0, import_react7.useContext)(Ee);
  return { mutationMode: e, undoableTimeout: t };
}, "useMutationMode");
var Kr = import_react9.default.createContext({});
var No = o(({ children: e }) => {
  let [t, r] = (0, import_react9.useState)(false);
  return import_react9.default.createElement(Kr.Provider, { value: { warnWhen: t, setWarnWhen: r } }, e);
}, "UnsavedWarnContextProvider");
var Kt = o(() => {
  let { warnWhenUnsavedChanges: e } = (0, import_react8.useContext)(Ee), { warnWhen: t, setWarnWhen: r } = (0, import_react8.useContext)(Kr);
  return { warnWhenUnsavedChanges: e, warnWhen: !!t, setWarnWhen: r ?? (() => {
  }) };
}, "useWarnAboutChange");
var Hr = o(() => {
  let { syncWithLocation: e } = (0, import_react10.useContext)(Ee);
  return { syncWithLocation: e };
}, "useSyncWithLocation");
var Dn = o(() => {
  let { Title: e } = (0, import_react11.useContext)(Ee);
  return e;
}, "useTitle");
var oe = o(() => {
  let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i2, hasDashboard: a, mutationMode: u, syncWithLocation: d3, undoableTimeout: c, warnWhenUnsavedChanges: p3, DashboardPage: m2, LoginPage: T2, catchAll: g2, options: R2 } = (0, import_react12.useContext)(Ee);
  return { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i2, hasDashboard: a, mutationMode: u, syncWithLocation: d3, undoableTimeout: c, warnWhenUnsavedChanges: p3, DashboardPage: m2, LoginPage: T2, catchAll: g2, options: R2 };
}, "useRefineContext");
var bt = o(() => {
  let { options: { textTransformers: e } } = oe();
  return o((r = "", s) => {
    let n = e.humanize(r);
    return s === "singular" ? e.singular(n) : e.plural(n);
  }, "getFriendlyName");
}, "useUserFriendlyName");
var Ho = o((e) => typeof e == "object" && e !== null, "isNested");
var En = o((e) => Array.isArray(e), "isArray");
var Tr = o((e, t = "") => Ho(e) ? Object.keys(e).reduce((r, s) => {
  let n = t.length ? t + "." : "";
  return Ho(e[s]) && Object.keys(e[s]).length ? En(e[s]) && e[s].length ? e[s].forEach((i2, a) => {
    Object.assign(r, Tr(i2, n + s + "." + a));
  }) : Object.assign(r, Tr(e[s], n + s)) : r[n + s] = e[s], r;
}, {}) : { [t]: e }, "flattenObjectKeys");
var Go = o((e) => e.split(".").map((t) => isNaN(Number(t)) ? t : Number(t)), "propertyPathToArray");
var Rr = o((e) => {
  let { current: t, pageSize: r, sorter: s, sorters: n, filters: i2 } = import_qs.default.parse(e.substring(1));
  return { parsedCurrent: t && Number(t), parsedPageSize: r && Number(r), parsedSorter: w(n, s) ?? [], parsedFilters: i2 ?? [] };
}, "parseTableParams");
var Mn = o((e) => {
  let t = import_qs.default.stringify(e);
  return Rr(`/${t}`);
}, "parseTableParamsFromQuery");
var Pr = o((e) => {
  let t = { skipNulls: true, arrayFormat: "indices", encode: false }, { pagination: r, sorter: s, sorters: n, filters: i2, ...a } = e;
  return import_qs.default.stringify({ ...a, ...r || {}, sorters: w(n, s), filters: i2 }, t);
}, "stringifyTableParams");
var zo = o((e, t) => e.operator !== "and" && e.operator !== "or" && t.operator !== "and" && t.operator !== "or" ? ("field" in e ? e.field : void 0) == ("field" in t ? t.field : void 0) && e.operator == t.operator : ("key" in e ? e.key : void 0) == ("key" in t ? t.key : void 0) && e.operator == t.operator, "compareFilters");
var Oo = o((e, t) => e.field == t.field, "compareSorters");
var vt = o((e, t, r = []) => (t.filter((n) => (n.operator === "or" || n.operator === "and") && !n.key).length > 1 && (0, import_warn_once.default)(true, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. 
For more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), unionWith_default(e, t, r, zo).filter((n) => n.value !== void 0 && n.value !== null && (n.operator !== "or" || n.operator === "or" && n.value.length !== 0) && (n.operator !== "and" || n.operator === "and" && n.value.length !== 0))), "unionFilters");
var xr = o((e, t) => unionWith_default(e, t, Oo).filter((r) => r.order !== void 0 && r.order !== null), "unionSorters");
var Cr = o((e, t) => [...differenceWith_default(t, e, zo), ...e], "setInitialFilters");
var hr = o((e, t) => [...differenceWith_default(t, e, Oo), ...e], "setInitialSorters");
var In = o((e, t) => {
  if (!t)
    return;
  let r = t.find((s) => s.field === e);
  if (r)
    return r.order;
}, "getDefaultSortOrder");
var wn = o((e, t, r = "eq") => {
  let s = t == null ? void 0 : t.find((n) => {
    if (n.operator !== "or" && n.operator !== "and" && "field" in n) {
      let { operator: i2, field: a } = n;
      return a === e && i2 === r;
    }
  });
  if (s)
    return s.value || [];
}, "getDefaultFilter");
var Sn = o((e) => new Promise((t, r) => {
  let s = new FileReader(), n = o(() => {
    s.result && (s.removeEventListener("load", n, false), t(s.result));
  }, "resultHandler");
  s.addEventListener("load", n, false), s.readAsDataURL(e.originFileObj), s.onerror = (i2) => (s.removeEventListener("load", n, false), r(i2));
}), "file2Base64");
var K = o(() => {
  let { options: { useNewQueryKeys: e } } = oe();
  return { keys: Ge, preferLegacyKeys: !e };
}, "useKeys");
function An({ v3LegacyAuthProviderCompatible: e = false, options: t } = {}) {
  let { getPermissions: r } = se(), { getPermissions: s } = de(), { keys: n, preferLegacyKeys: i2 } = K(), a = useQuery(n().auth().action("permissions").get(i2), s ?? (() => Promise.resolve(void 0)), { enabled: !e && !!s, ...e ? {} : t, meta: { ...e ? {} : t == null ? void 0 : t.meta, ...P("usePermissions", i2) } }), u = useQuery([...n().auth().action("permissions").get(i2), "v3LegacyAuthProviderCompatible"], r ?? (() => Promise.resolve(void 0)), { enabled: e && !!r, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("usePermissions", i2) } });
  return e ? u : a;
}
o(An, "usePermissions");
function $r({ v3LegacyAuthProviderCompatible: e = false, queryOptions: t } = {}) {
  let { getUserIdentity: r } = se(), { getIdentity: s } = de(), { keys: n, preferLegacyKeys: i2 } = K(), a = useQuery(n().auth().action("identity").get(i2), s ?? (() => Promise.resolve({})), { enabled: !e && !!s, retry: false, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useGetIdentity", i2) } }), u = useQuery([...n().auth().action("identity").get(i2), "v3LegacyAuthProviderCompatible"], r ?? (() => Promise.resolve({})), { enabled: e && !!r, retry: false, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useGetIdentity", i2) } });
  return e ? u : a;
}
o($r, "useGetIdentity");
var Dt = o(() => {
  let e = useQueryClient(), { keys: t, preferLegacyKeys: r } = K();
  return o(async () => {
    await Promise.all(["check", "identity", "permissions"].map((n) => e.invalidateQueries(t().auth().action(n).get(r))));
  }, "invalidate");
}, "useInvalidateAuthStore");
function br({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Dt(), s = q(), n = le(), { push: i2 } = pe(), { open: a, close: u } = Me(), { logout: d3 } = se(), { logout: c } = de(), { keys: p3, preferLegacyKeys: m2 } = K(), T2 = useMutation(p3().auth().action("logout").get(m2), c, { onSuccess: async (R2, L) => {
    let { success: U, error: y2, redirectTo: b } = R2, { redirectPath: D } = L ?? {}, S = D ?? b;
    U && (u == null || u("useLogout-error")), (y2 || !U) && (a == null || a(Wr(y2))), await r(), S !== false && (s === "legacy" ? i2(S ?? "/login") : S && n({ to: S }));
  }, onError: (R2) => {
    a == null || a(Wr(R2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogout", m2) } }), g2 = useMutation([...p3().auth().action("logout").get(m2), "v3LegacyAuthProviderCompatible"], d3, { onSuccess: async (R2, L) => {
    let U = (L == null ? void 0 : L.redirectPath) ?? R2;
    if (await r(), U !== false) {
      if (U) {
        s === "legacy" ? i2(U) : n({ to: U });
        return;
      }
      s === "legacy" ? i2("/login") : n({ to: "/login" });
    }
  }, onError: (R2) => {
    a == null || a(Wr(R2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogout", m2) } });
  return e ? g2 : T2;
}
o(br, "useLogout");
var Wr = o((e) => ({ key: "useLogout-error", type: "error", message: (e == null ? void 0 : e.name) || "Logout Error", description: (e == null ? void 0 : e.message) || "Something went wrong during logout" }), "buildNotification");
function Ht({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Dt(), s = q(), n = le(), { replace: i2 } = pe(), a = fe(), { useLocation: u } = ne(), { search: d3 } = u(), { close: c, open: p3 } = Me(), { login: m2 } = se(), { login: T2 } = de(), { keys: g2, preferLegacyKeys: R2 } = K(), L = import_react13.default.useMemo(() => {
    var b;
    return s === "legacy" ? import_qs2.default.parse(d3, { ignoreQueryPrefix: true }).to : (b = a.params) == null ? void 0 : b.to;
  }, [s, a.params, d3]), U = useMutation(g2().auth().action("login").get(R2), T2, { onSuccess: async ({ success: b, redirectTo: D, error: S }) => {
    b && (c == null || c("login-error")), (S || !b) && (p3 == null || p3(zr(S))), await r(), L && b ? s === "legacy" ? i2(L) : n({ to: L, type: "replace" }) : D ? s === "legacy" ? i2(D) : n({ to: D, type: "replace" }) : s === "legacy" && i2("/");
  }, onError: (b) => {
    p3 == null || p3(zr(b));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogin", R2) } }), y2 = useMutation([...g2().auth().action("login").get(R2), "v3LegacyAuthProviderCompatible"], m2, { onSuccess: async (b) => {
    await r(), L && i2(L), b !== false && !L && (typeof b == "string" ? s === "legacy" ? i2(b) : n({ to: b, type: "replace" }) : s === "legacy" ? i2("/") : n({ to: "/", type: "replace" })), c == null || c("login-error");
  }, onError: (b) => {
    p3 == null || p3(zr(b));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogin", R2) } });
  return e ? y2 : U;
}
o(Ht, "useLogin");
var zr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Login Error", description: (e == null ? void 0 : e.message) || "Invalid credentials", key: "login-error", type: "error" }), "buildNotification");
function _r({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Dt(), s = q(), n = le(), { replace: i2 } = pe(), { register: a } = se(), { register: u } = de(), { close: d3, open: c } = Me(), { keys: p3, preferLegacyKeys: m2 } = K(), T2 = useMutation(p3().auth().action("register").get(m2), u, { onSuccess: async ({ success: R2, redirectTo: L, error: U }) => {
    R2 && (d3 == null || d3("register-error")), (U || !R2) && (c == null || c(Or(U))), await r(), L ? s === "legacy" ? i2(L) : n({ to: L, type: "replace" }) : s === "legacy" && i2("/");
  }, onError: (R2) => {
    c == null || c(Or(R2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useRegister", m2) } }), g2 = useMutation([...p3().auth().action("register").get(m2), "v3LegacyAuthProviderCompatible"], a, { onSuccess: async (R2) => {
    await r(), R2 !== false && (R2 ? s === "legacy" ? i2(R2) : n({ to: R2, type: "replace" }) : s === "legacy" ? i2("/") : n({ to: "/", type: "replace" }), d3 == null || d3("register-error"));
  }, onError: (R2) => {
    c == null || c(Or(R2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useRegister", m2) } });
  return e ? g2 : T2;
}
o(_r, "useRegister");
var Or = o((e) => ({ message: (e == null ? void 0 : e.name) || "Register Error", description: (e == null ? void 0 : e.message) || "Error while registering", key: "register-error", type: "error" }), "buildNotification");
function Xr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = q(), s = le(), { replace: n } = pe(), { forgotPassword: i2 } = se(), { forgotPassword: a } = de(), { close: u, open: d3 } = Me(), { keys: c, preferLegacyKeys: p3 } = K(), m2 = useMutation(c().auth().action("forgotPassword").get(p3), a, { onSuccess: ({ success: g2, redirectTo: R2, error: L }) => {
    g2 && (u == null || u("forgot-password-error")), (L || !g2) && (d3 == null || d3(jr(L))), R2 && (r === "legacy" ? n(R2) : s({ to: R2, type: "replace" }));
  }, onError: (g2) => {
    d3 == null || d3(jr(g2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useForgotPassword", p3) } }), T2 = useMutation([...c().auth().action("forgotPassword").get(p3), "v3LegacyAuthProviderCompatible"], i2, { onSuccess: (g2) => {
    g2 !== false && g2 && (r === "legacy" ? n(g2) : s({ to: g2, type: "replace" })), u == null || u("forgot-password-error");
  }, onError: (g2) => {
    d3 == null || d3(jr(g2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useForgotPassword", p3) } });
  return e ? T2 : m2;
}
o(Xr, "useForgotPassword");
var jr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Forgot Password Error", description: (e == null ? void 0 : e.message) || "Error while resetting password", key: "forgot-password-error", type: "error" }), "buildNotification");
function Yr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = q(), s = le(), { replace: n } = pe(), { updatePassword: i2 } = se(), { updatePassword: a } = de(), { close: u, open: d3 } = Me(), { keys: c, preferLegacyKeys: p3 } = K(), m2 = fe(), { useLocation: T2 } = ne(), { search: g2 } = T2(), R2 = import_react14.default.useMemo(() => r === "legacy" ? import_qs3.default.parse(g2, { ignoreQueryPrefix: true }) ?? {} : m2.params ?? {}, [g2, m2, r]), L = useMutation(c().auth().action("updatePassword").get(p3), async (y2) => a == null ? void 0 : a({ ...R2, ...y2 }), { onSuccess: ({ success: y2, redirectTo: b, error: D }) => {
    y2 && (u == null || u("update-password-error")), (D || !y2) && (d3 == null || d3(Zr(D))), b && (r === "legacy" ? n(b) : s({ to: b, type: "replace" }));
  }, onError: (y2) => {
    d3 == null || d3(Zr(y2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useUpdatePassword", p3) } }), U = useMutation([...c().auth().action("updatePassword").get(p3), "v3LegacyAuthProviderCompatible"], async (y2) => i2 == null ? void 0 : i2({ ...R2, ...y2 }), { onSuccess: (y2) => {
    y2 !== false && y2 && (r === "legacy" ? n(y2) : s({ to: y2, type: "replace" })), u == null || u("update-password-error");
  }, onError: (y2) => {
    d3 == null || d3(Zr(y2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useUpdatePassword", p3) } });
  return e ? U : L;
}
o(Yr, "useUpdatePassword");
var Zr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Update Password Error", description: (e == null ? void 0 : e.message) || "Error while updating password", key: "update-password-error", type: "error" }), "buildNotification");
function vr({ v3LegacyAuthProviderCompatible: e = false, params: t } = {}) {
  let { checkAuth: r } = se(), { check: s } = de(), { keys: n, preferLegacyKeys: i2 } = K(), a = useQuery(n().auth().action("check").params(t).get(i2), async () => await (s == null ? void 0 : s(t)) ?? {}, { retry: false, enabled: !e, meta: { ...P("useIsAuthenticated", i2) } }), u = useQuery([...n().auth().action("check").params(t).get(i2), "v3LegacyAuthProviderCompatible"], async () => await (r == null ? void 0 : r(t)) ?? {}, { retry: false, enabled: e, meta: { ...P("useIsAuthenticated", i2) } });
  return e ? u : a;
}
o(vr, "useIsAuthenticated");
var Nn = vr;
function ae({ v3LegacyAuthProviderCompatible: e = false } = {}) {
  let t = q(), r = le(), { replace: s } = pe(), { checkError: n } = se(), { onError: i2 } = de(), { keys: a, preferLegacyKeys: u } = K(), { mutate: d3 } = br({ v3LegacyAuthProviderCompatible: !!e }), { mutate: c } = br({ v3LegacyAuthProviderCompatible: !!e }), p3 = useMutation(a().auth().action("onError").get(u), i2, { onSuccess: ({ logout: T2, redirectTo: g2 }) => {
    if (T2) {
      c({ redirectPath: g2 });
      return;
    }
    if (g2) {
      t === "legacy" ? s(g2) : r({ to: g2, type: "replace" });
      return;
    }
  }, meta: { ...P("useOnError", u) } }), m2 = useMutation([...a().auth().action("onError").get(u), "v3LegacyAuthProviderCompatible"], n, { onError: (T2) => {
    d3({ redirectPath: T2 });
  }, meta: { ...P("useOnError", u) } });
  return e ? m2 : p3;
}
o(ae, "useOnError");
var Kn = ae;
var Jr = o(() => {
  let { isProvided: e } = se(), { isProvided: t } = de();
  return !!(t || e);
}, "useIsExistAuthentication");
var ee = o(({ isLoading: e, interval: t, onInterval: r }) => {
  let [s, n] = (0, import_react15.useState)(void 0), { options: i2 } = oe(), { overtime: a } = i2, u = t ?? a.interval, d3 = r ?? (a == null ? void 0 : a.onInterval);
  return (0, import_react15.useEffect)(() => {
    let c;
    return e && (c = setInterval(() => {
      n((p3) => p3 === void 0 ? u : p3 + u);
    }, u)), () => {
      clearInterval(c), n(void 0);
    };
  }, [e, u]), (0, import_react15.useEffect)(() => {
    d3 && s && d3(s);
  }, [s]), { elapsedTime: s };
}, "useLoadingOvertime");
var Gt = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i2, queryOptions: a, successNotification: u, errorNotification: d3, meta: c, metaData: p3, liveMode: m2, onLiveEvent: T2, liveParams: g2, dataProviderName: R2, overtimeOptions: L } = {}) => {
  let { resources: U, resource: y2, identifier: b } = N(e), D = te(), S = _(), x2 = Z(), { mutate: l2 } = ae({ v3LegacyAuthProviderCompatible: !!(x2 != null && x2.isLegacy) }), f2 = ie(), C2 = Y(), { keys: P2, preferLegacyKeys: h } = K(), M = O2(b, R2, U), v2 = w(c, p3), E2 = w(r, t == null ? void 0 : t.filters), k = w(i2, t == null ? void 0 : t.sort), I2 = w(s, t == null ? void 0 : t.hasPagination), F = Nt({ pagination: n, configPagination: t == null ? void 0 : t.pagination, hasPagination: I2 }), A = F.mode === "server", V = C2({ resource: y2, meta: v2 }), B = { meta: V, metaData: V, filters: E2, hasPagination: A, pagination: F, sorters: k, config: { ...t, sort: k } }, Q = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === true, { getList: G } = D(M);
  st({ resource: b, types: ["*"], params: { meta: V, metaData: V, pagination: F, hasPagination: A, sort: k, sorters: k, filters: E2, subscriptionType: "useList", ...g2 }, channel: `resources/${y2 == null ? void 0 : y2.name}`, enabled: Q, liveMode: m2, onLiveEvent: T2, dataProviderName: M, meta: { ...c, dataProviderName: R2 } });
  let $ = useQuery(P2().data(M).resource(b ?? "").action("list").params({ ...v2 || {}, filters: E2, hasPagination: A, ...A && { pagination: F }, ...i2 && { sorters: i2 }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(h), ({ queryKey: H, pageParam: W, signal: X }) => G({ resource: (y2 == null ? void 0 : y2.name) ?? "", pagination: F, hasPagination: A, filters: E2, sort: k, sorters: k, meta: { ...V, queryContext: { queryKey: H, pageParam: W, signal: X } }, metaData: { ...V, queryContext: { queryKey: H, pageParam: W, signal: X } } }), { ...a, enabled: typeof (a == null ? void 0 : a.enabled) < "u" ? a == null ? void 0 : a.enabled : !!(y2 != null && y2.name), select: (H) => {
    var xe;
    let W = H, { current: X, mode: j, pageSize: J } = F;
    return j === "client" && (W = { ...W, data: W.data.slice((X - 1) * J, X * J), total: W.total }), a != null && a.select ? (xe = a == null ? void 0 : a.select) == null ? void 0 : xe.call(a, W) : W;
  }, onSuccess: (H) => {
    var X;
    (X = a == null ? void 0 : a.onSuccess) == null || X.call(a, H);
    let W = typeof u == "function" ? u(H, B, b) : u;
    f2(W);
  }, onError: (H) => {
    var X;
    l2(H), (X = a == null ? void 0 : a.onError) == null || X.call(a, H);
    let W = typeof d3 == "function" ? d3(H, B, b) : d3;
    f2(W, { key: `${b}-useList-notification`, message: S("notifications.error", { statusCode: H.statusCode }, `Error (status code: ${H.statusCode})`), description: H.message, type: "error" });
  }, meta: { ...a == null ? void 0 : a.meta, ...P("useList", h) } }), { elapsedTime: z } = ee({ isLoading: $.isFetching, interval: L == null ? void 0 : L.interval, onInterval: L == null ? void 0 : L.onInterval });
  return { ...$, overtime: { elapsedTime: z } };
}, "useList");
var $t = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i2, metaData: a, liveMode: u, onLiveEvent: d3, liveParams: c, dataProviderName: p3, overtimeOptions: m2 }) => {
  let { resources: T2, resource: g2, identifier: R2 } = N(e), L = te(), U = _(), y2 = Z(), { mutate: b } = ae({ v3LegacyAuthProviderCompatible: !!(y2 != null && y2.isLegacy) }), D = ie(), S = Y(), { keys: x2, preferLegacyKeys: l2 } = K(), f2 = w(i2, a), C2 = O2(R2, p3, T2), { getOne: P2 } = L(C2), h = S({ resource: g2, meta: f2 });
  st({ resource: R2, types: ["*"], channel: `resources/${g2 == null ? void 0 : g2.name}`, params: { ids: t ? [t] : [], id: t, meta: h, metaData: h, subscriptionType: "useOne", ...c }, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof (g2 == null ? void 0 : g2.name) < "u" && typeof t < "u", liveMode: u, onLiveEvent: d3, dataProviderName: C2, meta: { ...i2, dataProviderName: p3 } });
  let M = useQuery(x2().data(C2).resource(R2 ?? "").action("one").id(t ?? "").params({ ...f2 || {} }).get(l2), ({ queryKey: E2, pageParam: k, signal: I2 }) => P2({ resource: (g2 == null ? void 0 : g2.name) ?? "", id: t, meta: { ...h, queryContext: { queryKey: E2, pageParam: k, signal: I2 } }, metaData: { ...h, queryContext: { queryKey: E2, pageParam: k, signal: I2 } } }), { ...r, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof t < "u", onSuccess: (E2) => {
    var I2;
    (I2 = r == null ? void 0 : r.onSuccess) == null || I2.call(r, E2);
    let k = typeof s == "function" ? s(E2, { id: t, ...h }, R2) : s;
    D(k);
  }, onError: (E2) => {
    var I2;
    b(E2), (I2 = r == null ? void 0 : r.onError) == null || I2.call(r, E2);
    let k = typeof n == "function" ? n(E2, { id: t, ...h }, R2) : n;
    D(k, { key: `${t}-${R2}-getOne-notification`, message: U("notifications.error", { statusCode: E2.statusCode }, `Error (status code: ${E2.statusCode})`), description: E2.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useOne", l2) } }), { elapsedTime: v2 } = ee({ isLoading: M.isFetching, interval: m2 == null ? void 0 : m2.interval, onInterval: m2 == null ? void 0 : m2.onInterval });
  return { ...M, overtime: { elapsedTime: v2 } };
}, "useOne");
var qr = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i2, metaData: a, liveMode: u, onLiveEvent: d3, liveParams: c, dataProviderName: p3, overtimeOptions: m2 }) => {
  let { resources: T2, resource: g2, identifier: R2 } = N(e), L = te(), U = _(), y2 = Z(), { mutate: b } = ae({ v3LegacyAuthProviderCompatible: !!(y2 != null && y2.isLegacy) }), D = ie(), S = Y(), { keys: x2, preferLegacyKeys: l2 } = K(), f2 = w(i2, a), C2 = O2(R2, p3, T2), P2 = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === true, { getMany: h, getOne: M } = L(C2), v2 = S({ resource: g2, meta: f2 });
  st({ resource: R2, types: ["*"], params: { ids: t, meta: v2, metaData: v2, subscriptionType: "useMany", ...c }, channel: `resources/${g2.name}`, enabled: P2, liveMode: u, onLiveEvent: d3, dataProviderName: C2, meta: { ...i2, dataProviderName: p3 } });
  let E2 = useQuery(x2().data(C2).resource(R2).action("many").ids(...t).params({ ...f2 || {} }).get(l2), ({ queryKey: I2, pageParam: F, signal: A }) => h ? h({ resource: g2 == null ? void 0 : g2.name, ids: t, meta: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } }, metaData: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } } }) : Ze(t.map((V) => M({ resource: g2 == null ? void 0 : g2.name, id: V, meta: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } }, metaData: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } } }))), { ...r, onSuccess: (I2) => {
    var A;
    (A = r == null ? void 0 : r.onSuccess) == null || A.call(r, I2);
    let F = typeof s == "function" ? s(I2, t, R2) : s;
    D(F);
  }, onError: (I2) => {
    var A;
    b(I2), (A = r == null ? void 0 : r.onError) == null || A.call(r, I2);
    let F = typeof n == "function" ? n(I2, t, R2) : n;
    D(F, { key: `${t[0]}-${R2}-getMany-notification`, message: U("notifications.error", { statusCode: I2.statusCode }, `Error (status code: ${I2.statusCode})`), description: I2.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useMany", l2) } }), { elapsedTime: k } = ee({ isLoading: E2.isFetching, interval: m2 == null ? void 0 : m2.interval, onInterval: m2 == null ? void 0 : m2.onInterval });
  return { ...E2, overtime: { elapsedTime: k } };
}, "useMany");
var Dr = import_react16.default.createContext({ notifications: [], notificationDispatch: () => false });
var Xn = [];
var Zn = o((e, t) => {
  switch (t.type) {
    case "ADD":
      return [...e.filter((s) => !(isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource)), { ...t.payload, isRunning: true }];
    case "REMOVE":
      return e.filter((s) => !(isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource));
    case "DECREASE_NOTIFICATION_SECOND":
      return e.map((s) => isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource ? { ...s, seconds: t.payload.seconds - 1e3 } : s);
    default:
      return e;
  }
}, "undoableQueueReducer");
var ro = o(({ children: e }) => {
  let [t, r] = (0, import_react16.useReducer)(Zn, Xn), s = { notifications: t, notificationDispatch: r };
  return import_react16.default.createElement(Dr.Provider, { value: s }, e, typeof window < "u" && t.map((n) => import_react16.default.createElement(ls, { key: `${n.id}-${n.resource}-queue`, notification: n })));
}, "UndoableQueueContextProvider");
var Lr = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: s } = N(), n = useQueryClient(), i2 = te(), { mutationMode: a, undoableTimeout: u } = $e(), d3 = _(), c = Z(), { mutate: p3 } = ae({ v3LegacyAuthProviderCompatible: !!(c != null && c.isLegacy) }), m2 = Fe(), { log: T2 } = Ve(), { notificationDispatch: g2 } = _e(), R2 = ie(), L = Ce(), U = Y(), { options: { textTransformers: y2 } } = oe(), { keys: b, preferLegacyKeys: D } = K(), S = useMutation(({ id: l2, values: f2, resource: C2, mutationMode: P2, undoableTimeout: h, onCancel: M, meta: v2, metaData: E2, dataProviderName: k }) => {
    let { resource: I2, identifier: F } = s(C2), A = U({ resource: I2, meta: w(v2, E2) }), V = P2 ?? a, B = h ?? u;
    return V !== "undoable" ? i2(O2(F, k, r)).update({ resource: I2.name, id: l2, variables: f2, meta: A, metaData: A }) : new Promise((G, $) => {
      let z = o(() => {
        i2(O2(F, k, r)).update({ resource: I2.name, id: l2, variables: f2, meta: A, metaData: A }).then((W) => G(W)).catch((W) => $(W));
      }, "doMutation"), H = o(() => {
        $({ message: "mutationCancelled" });
      }, "cancelMutation");
      M && M(H), g2({ type: "ADD", payload: { id: l2, resource: F, cancelMutation: H, doMutation: z, seconds: B, isSilent: !!M } });
    });
  }, { onMutate: async ({ resource: l2, id: f2, mutationMode: C2, values: P2, dataProviderName: h, meta: M, metaData: v2, optimisticUpdateMap: E2 = { list: true, many: true, detail: true } }) => {
    let { identifier: k } = s(l2), I2 = w(M, v2), F = Xe(D)(k, O2(k, h, r), I2), A = b().data(O2(k, h, r)).resource(k), V = n.getQueriesData(A.get(D)), B = C2 ?? a;
    return await n.cancelQueries(A.get(D), void 0, { silent: true }), B !== "pessimistic" && (E2.list && n.setQueriesData(A.action("list").params(I2 ?? {}).get(D), (Q) => {
      if (typeof E2.list == "function")
        return E2.list(Q, P2, f2);
      if (!Q)
        return null;
      let G = Q.data.map(($) => {
        var z;
        return ((z = $.id) == null ? void 0 : z.toString()) === (f2 == null ? void 0 : f2.toString()) ? { id: f2, ...$, ...P2 } : $;
      });
      return { ...Q, data: G };
    }), E2.many && n.setQueriesData(A.action("many").get(D), (Q) => {
      if (typeof E2.many == "function")
        return E2.many(Q, P2, f2);
      if (!Q)
        return null;
      let G = Q.data.map(($) => {
        var z;
        return ((z = $.id) == null ? void 0 : z.toString()) === (f2 == null ? void 0 : f2.toString()) && ($ = { id: f2, ...$, ...P2 }), $;
      });
      return { ...Q, data: G };
    }), E2.detail && n.setQueriesData(A.action("one").id(f2).params(I2 ?? {}).get(D), (Q) => typeof E2.detail == "function" ? E2.detail(Q, P2, f2) : Q ? { ...Q, data: { ...Q.data, ...P2 } } : null)), { previousQueries: V, queryKey: F };
  }, onSettled: (l2, f2, { id: C2, resource: P2, dataProviderName: h, invalidates: M = ["list", "many", "detail"] }) => {
    let { identifier: v2 } = s(P2);
    L({ resource: v2, dataProviderName: O2(v2, h, r), invalidates: M, id: C2 }), g2({ type: "REMOVE", payload: { id: C2, resource: v2 } });
  }, onSuccess: (l2, { id: f2, resource: C2, successNotification: P2, dataProviderName: h, values: M, meta: v2, metaData: E2 }, k) => {
    var X;
    let { resource: I2, identifier: F } = s(C2), A = y2.singular(F), V = O2(F, h, r), B = U({ resource: I2, meta: w(v2, E2) }), Q = typeof P2 == "function" ? P2(l2, { id: f2, values: M }, F) : P2;
    R2(Q, { key: `${f2}-${F}-notification`, description: d3("notifications.success", "Successful"), message: d3("notifications.editSuccess", { resource: d3(`${F}.${F}`, A) }, `Successfully updated ${A}`), type: "success" }), m2 == null || m2({ channel: `resources/${I2.name}`, type: "updated", payload: { ids: (X = l2.data) != null && X.id ? [l2.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...B, dataProviderName: V } });
    let G;
    if (k) {
      let j = n.getQueryData(k.queryKey.detail(f2));
      G = Object.keys(M || {}).reduce((J, xe) => {
        var be;
        return J[xe] = (be = j == null ? void 0 : j.data) == null ? void 0 : be[xe], J;
      }, {});
    }
    let { fields: $, operation: z, variables: H, ...W } = B || {};
    T2 == null || T2.mutate({ action: "update", resource: I2.name, data: M, previousData: G, meta: { id: f2, dataProviderName: V, ...W } });
  }, onError: (l2, { id: f2, resource: C2, errorNotification: P2, values: h }, M) => {
    let { identifier: v2 } = s(C2);
    if (M)
      for (let E2 of M.previousQueries)
        n.setQueryData(E2[0], E2[1]);
    if (l2.message !== "mutationCancelled") {
      p3 == null || p3(l2);
      let E2 = y2.singular(v2), k = typeof P2 == "function" ? P2(l2, { id: f2, values: h }, v2) : P2;
      R2(k, { key: `${f2}-${v2}-notification`, message: d3("notifications.editError", { resource: d3(`${v2}.${v2}`, E2), statusCode: l2.statusCode }, `Error when updating ${E2} (status code: ${l2.statusCode})`), description: l2.message, type: "error" });
    }
  }, mutationKey: b().data().mutation("update").get(D), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdate", D) } }), { elapsedTime: x2 } = ee({ isLoading: S.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...S, overtime: { elapsedTime: x2 } };
}, "useUpdate");
var Wt = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Z(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = te(), i2 = Ce(), { resources: a, select: u } = N(), d3 = _(), c = Fe(), { log: p3 } = Ve(), m2 = ie(), T2 = Y(), { options: { textTransformers: g2 } } = oe(), { keys: R2, preferLegacyKeys: L } = K(), U = useMutation(({ resource: b, values: D, meta: S, metaData: x2, dataProviderName: l2 }) => {
    let { resource: f2, identifier: C2 } = u(b), P2 = T2({ resource: f2, meta: w(S, x2) });
    return n(O2(C2, l2, a)).create({ resource: f2.name, variables: D, meta: P2, metaData: P2 });
  }, { onSuccess: (b, { resource: D, successNotification: S, dataProviderName: x2, invalidates: l2 = ["list", "many"], values: f2, meta: C2, metaData: P2 }) => {
    var Q, G;
    let { resource: h, identifier: M } = u(D), v2 = g2.singular(M), E2 = O2(M, x2, a), k = T2({ resource: h, meta: w(C2, P2) }), I2 = typeof S == "function" ? S(b, f2, M) : S;
    m2(I2, { key: `create-${M}-notification`, message: d3("notifications.createSuccess", { resource: d3(`${M}.${M}`, v2) }, `Successfully created ${v2}`), description: d3("notifications.success", "Success"), type: "success" }), i2({ resource: M, dataProviderName: E2, invalidates: l2 }), c == null || c({ channel: `resources/${h.name}`, type: "created", payload: { ids: (Q = b == null ? void 0 : b.data) != null && Q.id ? [b.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...k, dataProviderName: E2 } });
    let { fields: F, operation: A, variables: V, ...B } = k || {};
    p3 == null || p3.mutate({ action: "create", resource: h.name, data: f2, meta: { dataProviderName: E2, id: ((G = b == null ? void 0 : b.data) == null ? void 0 : G.id) ?? void 0, ...B } });
  }, onError: (b, { resource: D, errorNotification: S, values: x2 }) => {
    s(b);
    let { identifier: l2 } = u(D), f2 = g2.singular(l2), C2 = typeof S == "function" ? S(b, x2, l2) : S;
    m2(C2, { key: `create-${l2}-notification`, description: b.message, message: d3("notifications.createError", { resource: d3(`${l2}.${l2}`, f2), statusCode: b.statusCode }, `There was an error creating ${f2} (status code: ${b.statusCode})`), type: "error" });
  }, mutationKey: R2().data().mutation("create").get(L), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreate", L) } }), { elapsedTime: y2 } = ee({ isLoading: U.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...U, overtime: { elapsedTime: y2 } };
}, "useCreate");
var na = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Z(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = te(), { resources: i2, select: a } = N(), u = useQueryClient(), { mutationMode: d3, undoableTimeout: c } = $e(), { notificationDispatch: p3 } = _e(), m2 = _(), T2 = Fe(), { log: g2 } = Ve(), R2 = ie(), L = Ce(), U = Y(), { options: { textTransformers: y2 } } = oe(), { keys: b, preferLegacyKeys: D } = K(), S = useMutation(({ id: l2, mutationMode: f2, undoableTimeout: C2, resource: P2, onCancel: h, meta: M, metaData: v2, dataProviderName: E2, values: k }) => {
    let { resource: I2, identifier: F } = a(P2), A = U({ resource: I2, meta: w(M, v2) }), V = f2 ?? d3, B = C2 ?? c;
    return V !== "undoable" ? n(O2(F, E2, i2)).deleteOne({ resource: I2.name, id: l2, meta: A, metaData: A, variables: k }) : new Promise((G, $) => {
      let z = o(() => {
        n(O2(F, E2, i2)).deleteOne({ resource: I2.name, id: l2, meta: A, metaData: A, variables: k }).then((W) => G(W)).catch((W) => $(W));
      }, "doMutation"), H = o(() => {
        $({ message: "mutationCancelled" });
      }, "cancelMutation");
      h && h(H), p3({ type: "ADD", payload: { id: l2, resource: F, cancelMutation: H, doMutation: z, seconds: B, isSilent: !!h } });
    });
  }, { onMutate: async ({ id: l2, resource: f2, mutationMode: C2, dataProviderName: P2, meta: h, metaData: M }) => {
    let { identifier: v2 } = a(f2), E2 = w(h, M), k = Xe(D)(v2, O2(v2, P2, i2), E2), I2 = b().data(O2(v2, P2, i2)).resource(v2), F = C2 ?? d3;
    await u.cancelQueries(I2.get(D), void 0, { silent: true });
    let A = u.getQueriesData(I2.get(D));
    return F !== "pessimistic" && (u.setQueriesData(I2.action("list").params(E2 ?? {}).get(D), (V) => V ? { data: V.data.filter((Q) => {
      var G;
      return ((G = Q.id) == null ? void 0 : G.toString()) !== l2.toString();
    }), total: V.total - 1 } : null), u.setQueriesData(I2.action("many").get(D), (V) => {
      if (!V)
        return null;
      let B = V.data.filter((Q) => {
        var G;
        return ((G = Q.id) == null ? void 0 : G.toString()) !== (l2 == null ? void 0 : l2.toString());
      });
      return { ...V, data: B };
    })), { previousQueries: A, queryKey: k };
  }, onSettled: (l2, f2, { id: C2, resource: P2, dataProviderName: h, invalidates: M = ["list", "many"] }) => {
    let { identifier: v2 } = a(P2);
    L({ resource: v2, dataProviderName: O2(v2, h, i2), invalidates: M }), p3({ type: "REMOVE", payload: { id: C2, resource: v2 } });
  }, onSuccess: (l2, { id: f2, resource: C2, successNotification: P2, dataProviderName: h, meta: M, metaData: v2 }, E2) => {
    let { resource: k, identifier: I2 } = a(C2), F = y2.singular(I2), A = O2(I2, h, i2), V = U({ resource: k, meta: w(M, v2) });
    u.removeQueries(E2 == null ? void 0 : E2.queryKey.detail(f2));
    let B = typeof P2 == "function" ? P2(l2, f2, I2) : P2;
    R2(B, { key: `${f2}-${I2}-notification`, description: m2("notifications.success", "Success"), message: m2("notifications.deleteSuccess", { resource: m2(`${I2}.${I2}`, F) }, `Successfully deleted a ${F}`), type: "success" }), T2 == null || T2({ channel: `resources/${k.name}`, type: "deleted", payload: { ids: [f2] }, date: /* @__PURE__ */ new Date(), meta: { ...V, dataProviderName: A } });
    let { fields: Q, operation: G, variables: $, ...z } = V || {};
    g2 == null || g2.mutate({ action: "delete", resource: k.name, meta: { id: f2, dataProviderName: A, ...z } }), u.removeQueries(E2 == null ? void 0 : E2.queryKey.detail(f2));
  }, onError: (l2, { id: f2, resource: C2, errorNotification: P2 }, h) => {
    let { identifier: M } = a(C2);
    if (h)
      for (let v2 of h.previousQueries)
        u.setQueryData(v2[0], v2[1]);
    if (l2.message !== "mutationCancelled") {
      s(l2);
      let v2 = y2.singular(M), E2 = typeof P2 == "function" ? P2(l2, f2, M) : P2;
      R2(E2, { key: `${f2}-${M}-notification`, message: m2("notifications.deleteError", { resource: v2, statusCode: l2.statusCode }, `Error (status code: ${l2.statusCode})`), description: l2.message, type: "error" });
    }
  }, mutationKey: b().data().mutation("delete").get(D), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDelete", D) } }), { elapsedTime: x2 } = ee({ isLoading: S.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...S, overtime: { elapsedTime: x2 } };
}, "useDelete");
var oo = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = te(), { resources: s, select: n } = N(), i2 = _(), a = Fe(), u = ie(), d3 = Ce(), { log: c } = Ve(), p3 = Y(), { options: { textTransformers: m2 } } = oe(), { keys: T2, preferLegacyKeys: g2 } = K(), R2 = useMutation(({ resource: U, values: y2, meta: b, metaData: D, dataProviderName: S }) => {
    let { resource: x2, identifier: l2 } = n(U), f2 = p3({ resource: x2, meta: w(b, D) }), C2 = r(O2(l2, S, s));
    return C2.createMany ? C2.createMany({ resource: x2.name, variables: y2, meta: f2, metaData: f2 }) : Ze(y2.map((P2) => C2.create({ resource: x2.name, variables: P2, meta: f2, metaData: f2 })));
  }, { onSuccess: (U, { resource: y2, successNotification: b, dataProviderName: D, invalidates: S = ["list", "many"], values: x2, meta: l2, metaData: f2 }) => {
    let { resource: C2, identifier: P2 } = n(y2), h = m2.plural(P2), M = O2(P2, D, s), v2 = p3({ resource: C2, meta: w(l2, f2) }), E2 = typeof b == "function" ? b(U, x2, P2) : b;
    u(E2, { key: `createMany-${P2}-notification`, message: i2("notifications.createSuccess", { resource: i2(`${P2}.${P2}`, P2) }, `Successfully created ${h}`), description: i2("notifications.success", "Success"), type: "success" }), d3({ resource: P2, dataProviderName: M, invalidates: S });
    let k = U == null ? void 0 : U.data.filter((B) => (B == null ? void 0 : B.id) !== void 0).map((B) => B.id);
    a == null || a({ channel: `resources/${C2.name}`, type: "created", payload: { ids: k }, date: /* @__PURE__ */ new Date(), meta: { ...v2, dataProviderName: M } });
    let { fields: I2, operation: F, variables: A, ...V } = v2 || {};
    c == null || c.mutate({ action: "createMany", resource: C2.name, data: x2, meta: { dataProviderName: M, ids: k, ...V } });
  }, onError: (U, { resource: y2, errorNotification: b, values: D }) => {
    let { identifier: S } = n(y2), x2 = typeof b == "function" ? b(U, D, S) : b;
    u(x2, { key: `createMany-${S}-notification`, description: U.message, message: i2("notifications.createError", { resource: i2(`${S}.${S}`, S), statusCode: U.statusCode }, `There was an error creating ${S} (status code: ${U.statusCode}`), type: "error" });
  }, mutationKey: T2().data().mutation("createMany").get(g2), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreateMany", g2) } }), { elapsedTime: L } = ee({ isLoading: R2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...R2, overtime: { elapsedTime: L } };
}, "useCreateMany");
var pa = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: s } = N(), n = useQueryClient(), i2 = te(), a = _(), { mutationMode: u, undoableTimeout: d3 } = $e(), c = Z(), { mutate: p3 } = ae({ v3LegacyAuthProviderCompatible: !!(c != null && c.isLegacy) }), { notificationDispatch: m2 } = _e(), T2 = Fe(), g2 = ie(), R2 = Ce(), { log: L } = Ve(), U = Y(), { options: { textTransformers: y2 } } = oe(), { keys: b, preferLegacyKeys: D } = K(), S = useMutation(({ ids: l2, values: f2, resource: C2, onCancel: P2, mutationMode: h, undoableTimeout: M, meta: v2, metaData: E2, dataProviderName: k }) => {
    let { resource: I2, identifier: F } = s(C2), A = U({ resource: I2, meta: w(v2, E2) }), V = h ?? u, B = M ?? d3, Q = i2(O2(F, k, r)), G = o(() => Q.updateMany ? Q.updateMany({ resource: I2.name, ids: l2, variables: f2, meta: A, metaData: A }) : Ze(l2.map((z) => Q.update({ resource: I2.name, id: z, variables: f2, meta: A, metaData: A }))), "mutationFn");
    return V !== "undoable" ? G() : new Promise((z, H) => {
      let W = o(() => {
        G().then((j) => z(j)).catch((j) => H(j));
      }, "doMutation"), X = o(() => {
        H({ message: "mutationCancelled" });
      }, "cancelMutation");
      P2 && P2(X), m2({ type: "ADD", payload: { id: l2, resource: F, cancelMutation: X, doMutation: W, seconds: B, isSilent: !!P2 } });
    });
  }, { onMutate: async ({ resource: l2, ids: f2, values: C2, mutationMode: P2, dataProviderName: h, meta: M, metaData: v2, optimisticUpdateMap: E2 = { list: true, many: true, detail: true } }) => {
    let { identifier: k } = s(l2), I2 = w(M, v2), F = Xe(D)(k, O2(k, h, r), w(M, v2)), A = b().data(O2(k, h, r)).resource(k), V = P2 ?? u;
    await n.cancelQueries(A.get(D), void 0, { silent: true });
    let B = n.getQueriesData(A.get(D));
    if (V !== "pessimistic" && (E2.list && n.setQueriesData(A.action("list").params(I2 ?? {}).get(D), (Q) => {
      if (typeof E2.list == "function")
        return E2.list(Q, C2, f2);
      if (!Q)
        return null;
      let G = Q.data.map(($) => $.id !== void 0 && f2.filter((z) => z !== void 0).map(String).includes($.id.toString()) ? { ...$, ...C2 } : $);
      return { ...Q, data: G };
    }), E2.many && n.setQueriesData(A.action("many").get(D), (Q) => {
      if (typeof E2.many == "function")
        return E2.many(Q, C2, f2);
      if (!Q)
        return null;
      let G = Q.data.map(($) => $.id !== void 0 && f2.filter((z) => z !== void 0).map(String).includes($.id.toString()) ? { ...$, ...C2 } : $);
      return { ...Q, data: G };
    }), E2.detail))
      for (let Q of f2)
        n.setQueriesData(A.action("one").id(Q).params(I2 ?? {}).get(D), (G) => {
          if (typeof E2.detail == "function")
            return E2.detail(G, C2, Q);
          if (!G)
            return null;
          let $ = { ...G.data, ...C2 };
          return { ...G, data: $ };
        });
    return { previousQueries: B, queryKey: F };
  }, onSettled: (l2, f2, { ids: C2, resource: P2, dataProviderName: h }) => {
    let { identifier: M } = s(P2);
    R2({ resource: M, invalidates: ["list", "many"], dataProviderName: O2(M, h, r) }), C2.forEach((v2) => R2({ resource: M, invalidates: ["detail"], dataProviderName: O2(M, h, r), id: v2 })), m2({ type: "REMOVE", payload: { id: C2, resource: M } });
  }, onSuccess: (l2, { ids: f2, resource: C2, meta: P2, metaData: h, dataProviderName: M, successNotification: v2, values: E2 }, k) => {
    let { resource: I2, identifier: F } = s(C2), A = y2.singular(F), V = O2(F, M, r), B = U({ resource: I2, meta: w(P2, h) }), Q = typeof v2 == "function" ? v2(l2, { ids: f2, values: E2 }, F) : v2;
    g2(Q, { key: `${f2}-${F}-notification`, description: a("notifications.success", "Successful"), message: a("notifications.editSuccess", { resource: a(`${F}.${F}`, F) }, `Successfully updated ${A}`), type: "success" }), T2 == null || T2({ channel: `resources/${I2.name}`, type: "updated", payload: { ids: f2.map(String) }, date: /* @__PURE__ */ new Date(), meta: { ...B, dataProviderName: V } });
    let G = [];
    k && f2.forEach((X) => {
      let j = n.getQueryData(k.queryKey.detail(X));
      G.push(Object.keys(E2 || {}).reduce((J, xe) => {
        var be;
        return J[xe] = (be = j == null ? void 0 : j.data) == null ? void 0 : be[xe], J;
      }, {}));
    });
    let { fields: $, operation: z, variables: H, ...W } = B || {};
    L == null || L.mutate({ action: "updateMany", resource: I2.name, data: E2, previousData: G, meta: { ids: f2, dataProviderName: V, ...W } });
  }, onError: (l2, { ids: f2, resource: C2, errorNotification: P2, values: h }, M) => {
    let { identifier: v2 } = s(C2);
    if (M)
      for (let E2 of M.previousQueries)
        n.setQueryData(E2[0], E2[1]);
    if (l2.message !== "mutationCancelled") {
      p3 == null || p3(l2);
      let E2 = y2.singular(v2), k = typeof P2 == "function" ? P2(l2, { ids: f2, values: h }, v2) : P2;
      g2(k, { key: `${f2}-${v2}-updateMany-error-notification`, message: a("notifications.editError", { resource: E2, statusCode: l2.statusCode }, `Error when updating ${E2} (status code: ${l2.statusCode})`), description: l2.message, type: "error" });
    }
  }, mutationKey: b().data().mutation("updateMany").get(D), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdateMany", D) } }), { elapsedTime: x2 } = ee({ isLoading: S.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...S, overtime: { elapsedTime: x2 } };
}, "useUpdateMany");
var ya = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Z(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), { mutationMode: n, undoableTimeout: i2 } = $e(), a = te(), { notificationDispatch: u } = _e(), d3 = _(), c = Fe(), p3 = ie(), m2 = Ce(), { log: T2 } = Ve(), { resources: g2, select: R2 } = N(), L = useQueryClient(), U = Y(), { options: { textTransformers: y2 } } = oe(), { keys: b, preferLegacyKeys: D } = K(), S = useMutation(({ resource: l2, ids: f2, mutationMode: C2, undoableTimeout: P2, onCancel: h, meta: M, metaData: v2, dataProviderName: E2, values: k }) => {
    let { resource: I2, identifier: F } = R2(l2), A = U({ resource: I2, meta: w(M, v2) }), V = C2 ?? n, B = P2 ?? i2, Q = a(O2(F, E2, g2)), G = o(() => Q.deleteMany ? Q.deleteMany({ resource: I2.name, ids: f2, meta: A, metaData: A, variables: k }) : Ze(f2.map((z) => Q.deleteOne({ resource: I2.name, id: z, meta: A, metaData: A, variables: k }))), "mutationFn");
    return V !== "undoable" ? G() : new Promise((z, H) => {
      let W = o(() => {
        G().then((j) => z(j)).catch((j) => H(j));
      }, "doMutation"), X = o(() => {
        H({ message: "mutationCancelled" });
      }, "cancelMutation");
      h && h(X), u({ type: "ADD", payload: { id: f2, resource: F, cancelMutation: X, doMutation: W, seconds: B, isSilent: !!h } });
    });
  }, { onMutate: async ({ ids: l2, resource: f2, mutationMode: C2, dataProviderName: P2, meta: h, metaData: M }) => {
    let { identifier: v2 } = R2(f2), E2 = w(h, M), k = Xe(D)(v2, O2(v2, P2, g2), E2), I2 = b().data(O2(v2, P2, g2)).resource(v2), F = C2 ?? n;
    await L.cancelQueries(I2.get(D), void 0, { silent: true });
    let A = L.getQueriesData(I2.get(D));
    if (F !== "pessimistic") {
      L.setQueriesData(I2.action("list").params(E2 ?? {}).get(D), (V) => V ? { data: V.data.filter((Q) => Q.id && !l2.map(String).includes(Q.id.toString())), total: V.total - 1 } : null), L.setQueriesData(I2.action("many").get(D), (V) => {
        if (!V)
          return null;
        let B = V.data.filter((Q) => Q.id ? !l2.map(String).includes(Q.id.toString()) : false);
        return { ...V, data: B };
      });
      for (let V of l2)
        L.setQueriesData(I2.action("one").id(V).params(E2).get(D), (B) => !B || B.data.id == V ? null : { ...B });
    }
    return { previousQueries: A, queryKey: k };
  }, onSettled: (l2, f2, { resource: C2, ids: P2, dataProviderName: h, invalidates: M = ["list", "many"] }) => {
    let { identifier: v2 } = R2(C2);
    m2({ resource: v2, dataProviderName: O2(v2, h, g2), invalidates: M }), u({ type: "REMOVE", payload: { id: P2, resource: v2 } });
  }, onSuccess: (l2, { ids: f2, resource: C2, meta: P2, metaData: h, dataProviderName: M, successNotification: v2 }, E2) => {
    let { resource: k, identifier: I2 } = R2(C2), F = O2(I2, M, g2), A = U({ resource: k, meta: w(P2, h) });
    f2.forEach((z) => L.removeQueries(E2 == null ? void 0 : E2.queryKey.detail(z)));
    let V = typeof v2 == "function" ? v2(l2, f2, I2) : v2;
    p3(V, { key: `${f2}-${I2}-notification`, description: d3("notifications.success", "Success"), message: d3("notifications.deleteSuccess", { resource: d3(`${I2}.${I2}`, I2) }, `Successfully deleted ${I2}`), type: "success" }), c == null || c({ channel: `resources/${k.name}`, type: "deleted", payload: { ids: f2 }, date: /* @__PURE__ */ new Date(), meta: { ...A, dataProviderName: F } });
    let { fields: B, operation: Q, variables: G, ...$ } = A || {};
    T2 == null || T2.mutate({ action: "deleteMany", resource: k.name, meta: { ids: f2, dataProviderName: F, ...$ } }), f2.forEach((z) => L.removeQueries(E2 == null ? void 0 : E2.queryKey.detail(z)));
  }, onError: (l2, { ids: f2, resource: C2, errorNotification: P2 }, h) => {
    let { identifier: M } = R2(C2);
    if (h)
      for (let v2 of h.previousQueries)
        L.setQueryData(v2[0], v2[1]);
    if (l2.message !== "mutationCancelled") {
      s(l2);
      let v2 = y2.singular(M), E2 = typeof P2 == "function" ? P2(l2, f2, M) : P2;
      p3(E2, { key: `${f2}-${M}-notification`, message: d3("notifications.deleteError", { resource: v2, statusCode: l2.statusCode }, `Error (status code: ${l2.statusCode})`), description: l2.message, type: "error" });
    }
  }, mutationKey: b().data().mutation("deleteMany").get(D), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDeleteMany", D) } }), { elapsedTime: x2 } = ee({ isLoading: S.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...S, overtime: { elapsedTime: x2 } };
}, "useDeleteMany");
var ga = o((e) => {
  var n;
  let t = te(), { resource: r } = N(), { getApiUrl: s } = t(e ?? ((n = w(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));
  return s();
}, "useApiUrl");
var Pa = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: i2, meta: a, metaData: u, dataProviderName: d3, overtimeOptions: c }) => {
  let p3 = te(), m2 = Z(), { mutate: T2 } = ae({ v3LegacyAuthProviderCompatible: !!(m2 != null && m2.isLegacy) }), g2 = _(), R2 = ie(), L = Y(), { keys: U, preferLegacyKeys: y2 } = K(), b = w(a, u), { custom: D } = p3(d3), S = L({ meta: b });
  if (D) {
    let x2 = useQuery({ queryKey: U().data(d3).mutation("custom").params({ method: t, url: e, ...r, ...b || {} }).get(y2), queryFn: ({ queryKey: f2, pageParam: C2, signal: P2 }) => D({ url: e, method: t, ...r, meta: { ...S, queryContext: { queryKey: f2, pageParam: C2, signal: P2 } }, metaData: { ...S, queryContext: { queryKey: f2, pageParam: C2, signal: P2 } } }), ...s, onSuccess: (f2) => {
      var P2;
      (P2 = s == null ? void 0 : s.onSuccess) == null || P2.call(s, f2);
      let C2 = typeof n == "function" ? n(f2, { ...r, ...S }) : n;
      R2(C2);
    }, onError: (f2) => {
      var P2;
      T2(f2), (P2 = s == null ? void 0 : s.onError) == null || P2.call(s, f2);
      let C2 = typeof i2 == "function" ? i2(f2, { ...r, ...S }) : i2;
      R2(C2, { key: `${t}-notification`, message: g2("notifications.error", { statusCode: f2.statusCode }, `Error (status code: ${f2.statusCode})`), description: f2.message, type: "error" });
    }, meta: { ...s == null ? void 0 : s.meta, ...P("useCustom", y2) } }), { elapsedTime: l2 } = ee({ isLoading: x2.isFetching, interval: c == null ? void 0 : c.interval, onInterval: c == null ? void 0 : c.onInterval });
    return { ...x2, overtime: { elapsedTime: l2 } };
  } else
    throw Error("Not implemented custom on data provider.");
}, "useCustom");
var ha = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Z(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = ie(), i2 = te(), a = _(), u = Y(), { keys: d3, preferLegacyKeys: c } = K(), p3 = useMutation(({ url: T2, method: g2, values: R2, meta: L, metaData: U, dataProviderName: y2, config: b }) => {
    let D = u({ meta: w(L, U) }), { custom: S } = i2(y2);
    if (S)
      return S({ url: T2, method: g2, payload: R2, meta: D, metaData: D, headers: { ...b == null ? void 0 : b.headers } });
    throw Error("Not implemented custom on data provider.");
  }, { onSuccess: (T2, { successNotification: g2, config: R2, meta: L, metaData: U }) => {
    let y2 = typeof g2 == "function" ? g2(T2, { ...R2, ...w(L, U) || {} }) : g2;
    n(y2);
  }, onError: (T2, { errorNotification: g2, method: R2, config: L, meta: U, metaData: y2 }) => {
    s(T2);
    let b = typeof g2 == "function" ? g2(T2, { ...L, ...w(U, y2) || {} }) : g2;
    n(b, { key: `${R2}-notification`, message: a("notifications.error", { statusCode: T2.statusCode }, `Error (status code: ${T2.statusCode})`), description: T2.message, type: "error" });
  }, mutationKey: d3().data().mutation("customMutation").get(c), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCustomMutation", c) } }), { elapsedTime: m2 } = ee({ isLoading: p3.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...p3, overtime: { elapsedTime: m2 } };
}, "useCustomMutation");
var ba = o(() => ({ default: { create: () => Promise.resolve({ data: { id: 1 } }), createMany: () => Promise.resolve({ data: [] }), deleteOne: () => Promise.resolve({ data: { id: 1 } }), deleteMany: () => Promise.resolve({ data: [] }), getList: () => Promise.resolve({ data: [], total: 0 }), getMany: () => Promise.resolve({ data: [] }), getOne: () => Promise.resolve({ data: { id: 1 } }), update: () => Promise.resolve({ data: { id: 1 } }), updateMany: () => Promise.resolve({ data: [] }), custom: () => Promise.resolve({ data: {} }), getApiUrl: () => "" } }), "defaultDataProvider");
var zt = import_react18.default.createContext(ba());
var fs = o(({ children: e, ...t }) => {
  let r;
  return !t.getList || !t.getOne ? r = t : r = { default: t }, import_react18.default.createElement(zt.Provider, { value: r }, e);
}, "DataContextProvider");
var te = o(() => {
  let e = (0, import_react17.useContext)(zt);
  return (0, import_react17.useCallback)((r) => {
    if (r) {
      if (!e[r])
        throw new Error(`"${r}" Data provider not found`);
      return e[r];
    }
    if (e.default)
      return e.default;
    throw new Error('There is no "default" data provider. Please pass dataProviderName.');
  }, [e]);
}, "useDataProvider");
var Ua = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i2, queryOptions: a, successNotification: u, errorNotification: d3, meta: c, metaData: p3, liveMode: m2, onLiveEvent: T2, liveParams: g2, dataProviderName: R2, overtimeOptions: L }) => {
  let { resources: U, resource: y2, identifier: b } = N(e), D = te(), S = _(), x2 = Z(), { mutate: l2 } = ae({ v3LegacyAuthProviderCompatible: !!(x2 != null && x2.isLegacy) }), f2 = ie(), C2 = Y(), { keys: P2, preferLegacyKeys: h } = K(), M = O2(b, R2, U), v2 = w(c, p3), E2 = w(r, t == null ? void 0 : t.filters), k = w(i2, t == null ? void 0 : t.sort), I2 = w(s, t == null ? void 0 : t.hasPagination), F = Nt({ pagination: n, configPagination: t == null ? void 0 : t.pagination, hasPagination: I2 }), A = F.mode === "server", V = { meta: v2, metaData: v2, filters: E2, hasPagination: A, pagination: F, sorters: k, config: { ...t, sort: k } }, B = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === true, Q = C2({ resource: y2, meta: v2 }), { getList: G } = D(M);
  st({ resource: b, types: ["*"], params: { meta: Q, metaData: Q, pagination: F, hasPagination: A, sort: k, sorters: k, filters: E2, subscriptionType: "useList", ...g2 }, channel: `resources/${y2.name}`, enabled: B, liveMode: m2, onLiveEvent: T2, dataProviderName: M, meta: { ...Q, dataProviderName: R2 } });
  let $ = useInfiniteQuery(P2().data(M).resource(b).action("infinite").params({ ...v2 || {}, filters: E2, hasPagination: A, ...A && { pagination: F }, ...i2 && { sorters: i2 }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(h), ({ queryKey: H, pageParam: W, signal: X }) => {
    let j = { ...F, current: W };
    return G({ resource: y2.name, pagination: j, hasPagination: A, filters: E2, sort: k, sorters: k, meta: { ...Q, queryContext: { queryKey: H, pageParam: W, signal: X } }, metaData: { ...Q, queryContext: { queryKey: H, pageParam: W, signal: X } } }).then(({ data: J, total: xe, ...be }) => ({ data: J, total: xe, pagination: j, ...be }));
  }, { getNextPageParam: (H) => lr(H), getPreviousPageParam: (H) => mr(H), ...a, onSuccess: (H) => {
    var X;
    (X = a == null ? void 0 : a.onSuccess) == null || X.call(a, H);
    let W = typeof u == "function" ? u(H, V, b) : u;
    f2(W);
  }, onError: (H) => {
    var X;
    l2(H), (X = a == null ? void 0 : a.onError) == null || X.call(a, H);
    let W = typeof d3 == "function" ? d3(H, V, b) : d3;
    f2(W, { key: `${b}-useInfiniteList-notification`, message: S("notifications.error", { statusCode: H.statusCode }, `Error (status code: ${H.statusCode})`), description: H.message, type: "error" });
  }, meta: { ...a == null ? void 0 : a.meta, ...P("useInfiniteList", h) } }), { elapsedTime: z } = ee({ isLoading: $.isFetching, interval: L == null ? void 0 : L.interval, onInterval: L == null ? void 0 : L.onInterval });
  return { ...$, overtime: { elapsedTime: z } };
}, "useInfiniteList");
var Ye = import_react19.default.createContext(void 0);
var gs = o(({ liveProvider: e, children: t }) => import_react19.default.createElement(Ye.Provider, { value: e }, t), "LiveContextProvider");
var Ts = o((e) => {
  let t = (0, import_react24.useRef)(e);
  return isEqual_default(t.current, e) || (t.current = e), t.current;
}, "useMemoized");
var Er = o((e, t) => {
  let r = Ts(t);
  return (0, import_react23.useMemo)(e, r);
}, "useDeepMemo");
var nt = import_react22.default.createContext({ resources: [] });
var Ps = o(({ resources: e, children: t }) => {
  let r = Er(() => fr(e ?? []), [e]);
  return import_react22.default.createElement(nt.Provider, { value: { resources: r } }, t);
}, "ResourceContextProvider");
var Cs = import_react25.default.createContext("new");
var hs = Cs.Provider;
var q = o(() => import_react25.default.useContext(Cs), "useRouterType");
var bs = {};
var Je = (0, import_react27.createContext)(bs);
var vs = o(({ children: e, router: t }) => import_react27.default.createElement(Je.Provider, { value: t ?? bs }, e), "RouterBindingsProvider");
var so = o(() => {
  let e = (0, import_react28.useContext)(Je);
  return import_react28.default.useMemo(() => (e == null ? void 0 : e.parse) ?? (() => () => ({})), [e == null ? void 0 : e.parse])();
}, "useParse");
var fe = o(() => {
  let e = so();
  return import_react26.default.useMemo(() => e(), [e]);
}, "useParsed");
function N(e) {
  let { resources: t } = (0, import_react21.useContext)(nt), r = q(), s = fe(), n = { resourceName: e && typeof e != "string" ? e.resourceName : e, resourceNameOrRouteName: e && typeof e != "string" ? e.resourceNameOrRouteName : e, recordItemId: e && typeof e != "string" ? e.recordItemId : void 0 }, i2 = o((m2, T2 = true) => {
    let R2 = ce(m2, t, r === "legacy");
    if (R2)
      return { resource: R2, identifier: R2.identifier ?? R2.name };
    if (T2) {
      let L = { name: m2, identifier: m2 }, U = L.identifier ?? L.name;
      return { resource: L, identifier: U };
    }
  }, "select"), a = Ds(), { useParams: u } = ne(), d3 = u();
  if (r === "legacy") {
    let m2 = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : d3.resource, T2 = m2 ? a(m2) : void 0, g2 = (n == null ? void 0 : n.recordItemId) ?? d3.id, R2 = d3.action, L = (n == null ? void 0 : n.resourceName) ?? (T2 == null ? void 0 : T2.name), U = (T2 == null ? void 0 : T2.identifier) ?? (T2 == null ? void 0 : T2.name);
    return { resources: t, resource: T2, resourceName: L, id: g2, action: R2, select: i2, identifier: U };
  }
  let c, p3 = typeof e == "string" ? e : n == null ? void 0 : n.resourceNameOrRouteName;
  if (p3) {
    let m2 = ce(p3, t);
    m2 ? c = m2 : c = { name: p3 };
  } else
    s != null && s.resource && (c = s.resource);
  return { resources: t, resource: c, resourceName: c == null ? void 0 : c.name, id: s.id, action: s.action, select: i2, identifier: (c == null ? void 0 : c.identifier) ?? (c == null ? void 0 : c.name) };
}
o(N, "useResource");
var Ds = o(() => {
  let { resources: e } = (0, import_react29.useContext)(nt);
  return (0, import_react29.useCallback)((r) => {
    let s = ce(r, e, true);
    return s || { name: r, route: r };
  }, [e]);
}, "useResourceWithRoute");
var Ce = o(() => {
  let { resources: e } = N(), t = useQueryClient(), { keys: r, preferLegacyKeys: s } = K();
  return (0, import_react20.useCallback)(async ({ resource: i2, dataProviderName: a, invalidates: u, id: d3, invalidationFilters: c = { type: "all", refetchType: "active" }, invalidationOptions: p3 = { cancelRefetch: false } }) => {
    if (u === false)
      return;
    let m2 = O2(i2, a, e), T2 = r().data(m2).resource(i2 ?? "");
    await Promise.all(u.map((g2) => {
      switch (g2) {
        case "all":
          return t.invalidateQueries(r().data(m2).get(s), c, p3);
        case "list":
          return t.invalidateQueries(T2.action("list").get(s), c, p3);
        case "many":
          return t.invalidateQueries(T2.action("many").get(s), c, p3);
        case "resourceAll":
          return t.invalidateQueries(T2.get(s), c, p3);
        case "detail":
          return t.invalidateQueries(T2.action("one").id(d3 || "").get(s), c, p3);
        default:
          return;
      }
    }));
  }, []);
}, "useInvalidate");
var st = o(({ resource: e, params: t, channel: r, types: s, enabled: n = true, liveMode: i2, onLiveEvent: a, dataProviderName: u, meta: d3 }) => {
  var y2;
  let { resource: c, identifier: p3 } = N(e), m2 = (0, import_react30.useContext)(Ye), { liveMode: T2, onLiveEvent: g2 } = (0, import_react30.useContext)(Ee), R2 = i2 ?? T2, L = Ce(), U = u ?? (d3 == null ? void 0 : d3.dataProviderName) ?? ((y2 = c == null ? void 0 : c.meta) == null ? void 0 : y2.dataProviderName);
  (0, import_react30.useEffect)(() => {
    let b, D = o((S) => {
      R2 === "auto" && L({ resource: p3, dataProviderName: U, invalidates: ["resourceAll"], invalidationFilters: { type: "active", refetchType: "active" }, invalidationOptions: { cancelRefetch: false } }), a == null || a(S), g2 == null || g2(S);
    }, "callback");
    return R2 && R2 !== "off" && n && (b = m2 == null ? void 0 : m2.subscribe({ channel: r, params: { resource: c == null ? void 0 : c.name, ...t }, types: s, callback: D, dataProviderName: U, meta: { ...d3, dataProviderName: U } })), () => {
      b && (m2 == null || m2.unsubscribe(b));
    };
  }, [n]);
}, "useResourceSubscription");
var Es = o((e) => {
  let { liveMode: t } = (0, import_react31.useContext)(Ee);
  return e ?? t;
}, "useLiveMode");
var qR = o(({ params: e, channel: t, types: r = ["*"], enabled: s = true, onLiveEvent: n, dataProviderName: i2 = "default", meta: a }) => {
  let u = (0, import_react32.useContext)(Ye);
  (0, import_react32.useEffect)(() => {
    let d3;
    return s && (d3 = u == null ? void 0 : u.subscribe({ channel: t, params: e, types: r, callback: n, dataProviderName: i2, meta: { ...a, dataProviderName: i2 } })), () => {
      d3 && (u == null || u.unsubscribe(d3));
    };
  }, [s]);
}, "useSubscription");
var Fe = o(() => {
  let e = (0, import_react33.useContext)(Ye);
  return e == null ? void 0 : e.publish;
}, "usePublish");
var _e = o(() => {
  let { notifications: e, notificationDispatch: t } = (0, import_react34.useContext)(Dr);
  return { notifications: e, notificationDispatch: t };
}, "useCancelNotification");
var Ot = (0, import_react36.createContext)({});
var Us = o(({ open: e, close: t, children: r }) => import_react36.default.createElement(Ot.Provider, { value: { open: e, close: t } }, r), "NotificationContextProvider");
var Me = o(() => {
  let { open: e, close: t } = (0, import_react35.useContext)(Ot);
  return { open: e, close: t };
}, "useNotification");
var ie = o(() => {
  let { open: e } = Me();
  return (0, import_react37.useCallback)((r, s) => {
    r !== false && (r ? e == null || e(r) : s && (e == null || e(s)));
  }, []);
}, "useHandleNotification");
var Be = import_react39.default.createContext({});
var Is = o(({ children: e, i18nProvider: t }) => import_react39.default.createElement(Be.Provider, { value: { i18nProvider: t } }, e), "TranslationContextProvider");
var ei = o(() => {
  let { i18nProvider: e } = (0, import_react38.useContext)(Be);
  return (0, import_react38.useCallback)((t) => e == null ? void 0 : e.changeLocale(t), []);
}, "useSetLocale");
var _ = o(() => {
  let { i18nProvider: e } = (0, import_react40.useContext)(Be);
  return (0, import_react40.useMemo)(() => {
    function r(s, n, i2) {
      return (e == null ? void 0 : e.translate(s, n, i2)) ?? i2 ?? (typeof n == "string" && typeof i2 > "u" ? n : s);
    }
    return o(r, "translate"), r;
  }, [e]);
}, "useTranslate");
var ni = o(() => {
  let { i18nProvider: e } = (0, import_react41.useContext)(Be);
  return (0, import_react41.useCallback)(() => e == null ? void 0 : e.getLocale(), []);
}, "useGetLocale");
var zP = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: i2, pageSize: a = 20, mapData: u = o((g2) => g2, "mapData"), exportOptions: d3, meta: c, metaData: p3, dataProviderName: m2, onError: T2 } = {}) => {
  let [g2, R2] = (0, import_react42.useState)(false), L = te(), U = Y(), { resource: y2, resources: b, identifier: D } = N(w(t, e)), x2 = `${bt()(D, "plural")}-${(/* @__PURE__ */ new Date()).toLocaleString()}`, { getList: l2 } = L(O2(D, m2, b)), f2 = U({ resource: y2, meta: w(c, p3) });
  return { isLoading: g2, triggerExport: o(async () => {
    R2(true);
    let P2 = [], h = 1, M = true;
    for (; M; )
      try {
        let { data: E2, total: k } = await l2({ resource: (y2 == null ? void 0 : y2.name) ?? "", filters: n, sort: w(s, r), sorters: w(s, r), pagination: { current: h, pageSize: a, mode: "server" }, meta: f2, metaData: f2 });
        h++, P2.push(...E2), i2 && P2.length >= i2 && (P2 = P2.slice(0, i2), M = false), k === P2.length && (M = false);
      } catch (E2) {
        R2(false), M = false, T2 == null || T2(E2);
        return;
      }
    new import_export_to_csv_fix_source_map.ExportToCsv({ filename: x2, useKeysAsHeaders: true, ...d3 }).generateCsv(P2.map(u)), R2(false);
  }, "triggerExport") };
}, "useExport");
var ax = o(({ resource: e, action: t, id: r, onMutationSuccess: s, onMutationError: n, redirect: i2, successNotification: a, errorNotification: u, meta: d3, metaData: c, queryMeta: p3, mutationMeta: m2, mutationMode: T2, liveMode: g2, onLiveEvent: R2, liveParams: L, undoableTimeout: U, dataProviderName: y2, invalidates: b, queryOptions: D, createMutationOptions: S, updateMutationOptions: x2, overtimeOptions: l2, autoSave: f2, optimisticUpdateMap: C2 } = {}) => {
  let P2 = Ce(), { options: h } = oe(), M = Y(), { resource: v2, id: E2, action: k, identifier: I2 } = N(e), { identifier: F } = N(), V = o(() => {
    let me = r ?? E2;
    return e && e !== F ? r : me;
  }, "getDefaultId")(), [B, Q] = import_react43.default.useState(V);
  import_react43.default.useEffect(() => {
    Q(V);
  }, [V]);
  let $ = o(() => t || (k === "edit" || k === "clone" ? k : "create"), "getAction")(), z = M({ resource: v2, meta: w(d3, c) }), { mutationMode: H } = $e(), W = T2 ?? H, X = $ === "create", j = $ === "edit", J = $ === "clone";
  (0, import_warn_once2.default)((J || j) && !!e && !r && (D == null ? void 0 : D.enabled) !== false, `[useForm]: action: "${$}", resource: "${I2}", id: ${B} 

If you don't use the \`setId\` method to set the \`id\`, you should pass the \`id\` prop to \`useForm\`. Otherwise, \`useForm\` will not be able to infer the \`id\` from the current URL. 

See https://refine.dev/docs/api-reference/core/hooks/useForm/#resource`);
  let xe = Nr({ redirectFromProps: i2, action: $, redirectOptions: h.redirect }), wt = $t({ resource: I2, id: B ?? "", queryOptions: { enabled: B !== void 0 && (j || J), ...D }, liveMode: g2, onLiveEvent: R2, liveParams: L, meta: { ...z, ...p3 }, metaData: { ...z, ...p3 }, dataProviderName: y2 }), { isFetching: it } = wt, ut = Wt({ mutationOptions: S }), { mutate: yt, isLoading: gt } = ut, Tt = Lr({ mutationOptions: x2 }), { mutate: Xt, isLoading: Sr } = Tt, ze = Lr({}), { setWarnWhen: St } = Kt(), Ke = ws(), Zt = o(async (me) => {
    St(false);
    let ke = o((we) => {
      Ke({ redirect: xe, resource: v2, id: we, meta: w(d3, c) });
    }, "onSuccess");
    return W !== "pessimistic" && setTimeout(() => {
      ke();
    }), new Promise((we, tt) => {
      if (W !== "pessimistic" && we(), !!v2)
        return yt({ values: me, resource: I2 ?? v2.name, successNotification: a, errorNotification: u, meta: { ...z, ...m2 }, metaData: { ...z, ...m2 }, dataProviderName: y2, invalidates: b }, { onSuccess: (ve, rt, ot) => {
          var kt;
          s && s(ve, me, ot);
          let dt = (kt = ve == null ? void 0 : ve.data) == null ? void 0 : kt.id;
          ke(dt), we(ve);
        }, onError: (ve, rt, ot) => {
          if (n)
            return n(ve, me, ot);
          tt();
        } });
    });
  }, "onFinishCreate");
  import_react43.default.useEffect(() => () => {
    f2 != null && f2.invalidateOnUnmount && ze.status === "success" && P2({ id: B, invalidates: b || ["list", "many", "detail"], dataProviderName: y2, resource: I2 });
  }, [f2 == null ? void 0 : f2.invalidateOnUnmount, ze.status]);
  let ct = o((me) => {
    if (!v2 || !j)
      return;
    let ke = { id: B ?? "", values: me, resource: I2 ?? v2.name, successNotification: false, errorNotification: false, meta: { ...z, ...m2 }, metaData: { ...z, ...m2 }, dataProviderName: y2, invalidates: [], mutationMode: "pessimistic" };
    return ze.mutate(ke, { onSuccess: (we, tt, ve) => {
      s && s(we, me, ve, true);
    }, onError: (we, tt, ve) => {
      if (n)
        return n(we, me, ve, true);
    } });
  }, "onFinishAutoSaveMutation"), Rt = debounce_default((me) => ct(me), (f2 == null ? void 0 : f2.debounce) || 1e3), At = X || J ? { formLoading: it || gt, mutationResult: ut, onFinish: Zt } : { formLoading: it || Sr, mutationResult: Tt, onFinish: o(async (me) => {
    if (St(false), !v2)
      return;
    let ke = { id: B ?? "", values: me, resource: I2 ?? v2.name, mutationMode: W, undoableTimeout: U, successNotification: a, errorNotification: u, meta: { ...z, ...m2 }, metaData: { ...z, ...m2 }, dataProviderName: y2, invalidates: b, optimisticUpdateMap: C2 }, we = o(() => {
      Ke({ redirect: xe, resource: v2, id: B, meta: w(d3, c) });
    }, "onSuccess");
    return W !== "pessimistic" && setTimeout(() => {
      we();
    }), new Promise((tt, ve) => (W !== "pessimistic" && tt(), setTimeout(() => {
      Xt(ke, { onSuccess: (rt, ot, dt) => {
        s && s(rt, me, dt), W === "pessimistic" && we(), tt(rt);
      }, onError: (rt, ot, dt) => {
        if (n)
          return n(rt, me, dt);
        ve();
      } });
    })));
  }, "onFinishUpdate") }, { elapsedTime: kr } = ee({ isLoading: At.mutationResult.isLoading || wt.isFetching, interval: l2 == null ? void 0 : l2.interval, onInterval: l2 == null ? void 0 : l2.onInterval });
  return { ...At, queryResult: wt, onFinishAutoSave: Rt, autoSaveProps: { status: ze.status, data: ze.data, error: ze.error }, id: B, setId: Q, redirect: (me, ke) => {
    Ke({ redirect: me !== void 0 ? me : j ? "list" : "edit", resource: v2, id: ke ?? B, meta: w(d3, c) });
  }, overtime: { elapsedTime: kr } };
}, "useForm");
var ws = o(() => {
  let { show: e, edit: t, list: r, create: s } = pe();
  return (0, import_react44.useCallback)(({ redirect: i2, resource: a, id: u, meta: d3 = {} }) => {
    if (i2 && a)
      return a.show && i2 === "show" && u ? e(a, u, void 0, d3) : a.edit && i2 === "edit" && u ? t(a, u, void 0, d3) : a.create && i2 === "create" ? s(a, void 0, d3) : r(a, "push", d3);
  }, []);
}, "useRedirectionAfterSubmission");
var pt = o(() => {
  let e = q(), { resource: t, resources: r } = N(), s = fe();
  return import_react46.default.useCallback(({ resource: i2, action: a, meta: u }) => {
    var T2;
    let d3 = i2 || t;
    if (!d3)
      return;
    let p3 = (T2 = Te(d3, r, e === "legacy").find((g2) => g2.action === a)) == null ? void 0 : T2.route;
    return p3 ? Ue(p3, d3 == null ? void 0 : d3.meta, s, u) : void 0;
  }, [r, t, s]);
}, "useGetToPath");
var le = o(() => {
  let e = (0, import_react45.useContext)(Je), { select: t } = N(), r = pt(), n = import_react45.default.useMemo(() => (e == null ? void 0 : e.go) ?? (() => () => {
  }), [e == null ? void 0 : e.go])();
  return (0, import_react45.useCallback)((a) => {
    if (typeof a.to != "object")
      return n({ ...a, to: a.to });
    let { resource: u } = t(a.to.resource);
    yi(a.to, u);
    let d3 = r({ resource: u, action: a.to.action, meta: { id: a.to.id } });
    return n({ ...a, to: d3 });
  }, [t, n]);
}, "useGo");
var yi = o((e, t) => {
  if (!(e != null && e.action) || !(e != null && e.resource))
    throw new Error('[useGo]: "action" or "resource" is required.');
  if (["edit", "show", "clone"].includes(e == null ? void 0 : e.action) && !e.id)
    throw new Error(`[useGo]: [action: ${e.action}] requires an "id" for resource [resource: ${e.resource}]`);
  if (!t[e.action])
    throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);
}, "handleResourceErrors");
var ao = o(() => {
  let e = (0, import_react47.useContext)(Je);
  return import_react47.default.useMemo(() => (e == null ? void 0 : e.back) ?? (() => () => {
  }), [e == null ? void 0 : e.back])();
}, "useBack");
var pe = o(() => {
  let { resources: e } = N(), t = q(), { useHistory: r } = ne(), s = r(), n = fe(), i2 = le(), a = ao(), u = o((x2, l2 = "push") => {
    t === "legacy" ? s[l2](x2) : i2({ to: x2, type: l2 });
  }, "handleUrl"), d3 = o((x2, l2 = {}) => {
    var f2;
    if (t === "legacy") {
      let C2 = typeof x2 == "string" ? ce(x2, e, true) ?? { name: x2, route: x2 } : x2, P2 = Te(C2, e, true).find((h) => h.action === "create");
      return P2 ? Ue(P2.route, C2 == null ? void 0 : C2.meta, n, l2) : "";
    } else {
      let C2 = typeof x2 == "string" ? ce(x2, e) ?? { name: x2 } : x2, P2 = (f2 = Te(C2, e).find((h) => h.action === "create")) == null ? void 0 : f2.route;
      return P2 ? i2({ to: Ue(P2, C2 == null ? void 0 : C2.meta, n, l2), type: "path" }) : "";
    }
  }, "createUrl"), c = o((x2, l2, f2 = {}) => {
    var P2;
    let C2 = encodeURIComponent(l2);
    if (t === "legacy") {
      let h = typeof x2 == "string" ? ce(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Te(h, e, true).find((v2) => v2.action === "edit");
      return M ? Ue(M.route, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }) : "";
    } else {
      let h = typeof x2 == "string" ? ce(x2, e) ?? { name: x2 } : x2, M = (P2 = Te(h, e).find((v2) => v2.action === "edit")) == null ? void 0 : P2.route;
      return M ? i2({ to: Ue(M, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }), type: "path" }) : "";
    }
  }, "editUrl"), p3 = o((x2, l2, f2 = {}) => {
    var P2;
    let C2 = encodeURIComponent(l2);
    if (t === "legacy") {
      let h = typeof x2 == "string" ? ce(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Te(h, e, true).find((v2) => v2.action === "clone");
      return M ? Ue(M.route, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }) : "";
    } else {
      let h = typeof x2 == "string" ? ce(x2, e) ?? { name: x2 } : x2, M = (P2 = Te(h, e).find((v2) => v2.action === "clone")) == null ? void 0 : P2.route;
      return M ? i2({ to: Ue(M, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }), type: "path" }) : "";
    }
  }, "cloneUrl"), m2 = o((x2, l2, f2 = {}) => {
    var P2;
    let C2 = encodeURIComponent(l2);
    if (t === "legacy") {
      let h = typeof x2 == "string" ? ce(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Te(h, e, true).find((v2) => v2.action === "show");
      return M ? Ue(M.route, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }) : "";
    } else {
      let h = typeof x2 == "string" ? ce(x2, e) ?? { name: x2 } : x2, M = (P2 = Te(h, e).find((v2) => v2.action === "show")) == null ? void 0 : P2.route;
      return M ? i2({ to: Ue(M, h == null ? void 0 : h.meta, n, { ...f2, id: C2 }), type: "path" }) : "";
    }
  }, "showUrl"), T2 = o((x2, l2 = {}) => {
    var f2;
    if (t === "legacy") {
      let C2 = typeof x2 == "string" ? ce(x2, e, true) ?? { name: x2, route: x2 } : x2, P2 = Te(C2, e, true).find((h) => h.action === "list");
      return P2 ? Ue(P2.route, C2 == null ? void 0 : C2.meta, n, l2) : "";
    } else {
      let C2 = typeof x2 == "string" ? ce(x2, e) ?? { name: x2 } : x2, P2 = (f2 = Te(C2, e).find((h) => h.action === "list")) == null ? void 0 : f2.route;
      return P2 ? i2({ to: Ue(P2, C2 == null ? void 0 : C2.meta, n, l2), type: "path" }) : "";
    }
  }, "listUrl");
  return { create: o((x2, l2 = "push", f2 = {}) => {
    u(d3(x2, f2), l2);
  }, "create"), createUrl: d3, edit: o((x2, l2, f2 = "push", C2 = {}) => {
    u(c(x2, l2, C2), f2);
  }, "edit"), editUrl: c, clone: o((x2, l2, f2 = "push", C2 = {}) => {
    u(p3(x2, l2, C2), f2);
  }, "clone"), cloneUrl: p3, show: o((x2, l2, f2 = "push", C2 = {}) => {
    u(m2(x2, l2, C2), f2);
  }, "show"), showUrl: m2, list: o((x2, l2 = "push", f2 = {}) => {
    u(T2(x2, f2), l2);
  }, "list"), listUrl: T2, push: o((x2, ...l2) => {
    t === "legacy" ? s.push(x2, ...l2) : i2({ to: x2, type: "push" });
  }, "push"), replace: o((x2, ...l2) => {
    t === "legacy" ? s.replace(x2, ...l2) : i2({ to: x2, type: "replace" });
  }, "replace"), goBack: o(() => {
    t === "legacy" ? s.goBack() : a();
  }, "goBack") };
}, "useNavigation");
var Xx = o(({ resource: e, id: t, successNotification: r, errorNotification: s, meta: n, metaData: i2, liveMode: a, onLiveEvent: u, dataProviderName: d3, queryOptions: c, overtimeOptions: p3 } = {}) => {
  let { resource: m2, id: T2, identifier: g2 } = N(e), { identifier: R2 } = N(), L = Y(), y2 = o(() => {
    let f2 = t ?? T2;
    return e && e !== R2 ? t : f2;
  }, "getDefaultId")(), [b, D] = (0, import_react48.useState)(y2);
  import_react48.default.useEffect(() => {
    D(y2);
  }, [y2]);
  let S = L({ resource: m2, meta: w(n, i2) });
  (0, import_warn_once3.default)(!!e && !t, `[useShow]: resource: "${g2}", id: ${t} 

If you don't use the \`setShowId\` method to set the \`showId\`, you should pass the \`id\` prop to \`useShow\`. Otherwise, \`useShow\` will not be able to infer the \`id\` from the current URL. 

See https://refine.dev/docs/api-reference/core/hooks/show/useShow/#resource`);
  let x2 = $t({ resource: g2, id: b ?? "", queryOptions: { enabled: b !== void 0, ...c }, successNotification: r, errorNotification: s, meta: S, metaData: S, liveMode: a, onLiveEvent: u, dataProviderName: d3 }), { elapsedTime: l2 } = ee({ isLoading: x2.isFetching, interval: p3 == null ? void 0 : p3.interval, onInterval: p3 == null ? void 0 : p3.onInterval });
  return { queryResult: x2, showId: b, setShowId: D, overtime: { elapsedTime: l2 } };
}, "useShow");
var sC = o(({ resourceName: e, resource: t, mapData: r = o((p3) => p3, "mapData"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: i2, meta: a, metaData: u, onProgress: d3, dataProviderName: c } = {}) => {
  let [p3, m2] = (0, import_react49.useState)(0), [T2, g2] = (0, import_react49.useState)(0), [R2, L] = (0, import_react49.useState)(false), { resource: U, identifier: y2 } = N(t ?? e), b = Y(), D = oo(), S = Wt(), x2 = b({ resource: U, meta: w(a, u) }), l2;
  n === 1 ? l2 = S : l2 = D;
  let f2 = o(() => {
    g2(0), m2(0), L(false);
  }, "handleCleanup"), C2 = o((h) => {
    let M = { succeeded: h.filter((v2) => v2.type === "success"), errored: h.filter((v2) => v2.type === "error") };
    i2 == null || i2(M), L(false);
  }, "handleFinish");
  (0, import_react49.useEffect)(() => {
    d3 == null || d3({ totalAmount: T2, processedAmount: p3 });
  }, [T2, p3]);
  let P2 = o(({ file: h }) => (f2(), new Promise((M) => {
    L(true), (0, import_papaparse.parse)(h, { complete: async ({ data: v2 }) => {
      let E2 = qt(v2, r);
      if (g2(E2.length), n === 1) {
        let k = E2.map((F) => o(async () => ({ response: await S.mutateAsync({ resource: y2 ?? "", values: F, successNotification: false, errorNotification: false, dataProviderName: c, meta: x2, metaData: x2 }), value: F }), "fn")), I2 = await pr(k, ({ response: F, value: A }) => (m2((V) => V + 1), { response: [F.data], type: "success", request: [A] }), (F, A) => ({ response: [F], type: "error", request: [E2[A]] }));
        M(I2);
      } else {
        let k = chunk_default(E2, n), I2 = k.map((A) => o(async () => ({ response: await D.mutateAsync({ resource: y2 ?? "", values: A, successNotification: false, errorNotification: false, dataProviderName: c, meta: x2, metaData: x2 }), value: A, currentBatchLength: A.length }), "fn")), F = await pr(I2, ({ response: A, currentBatchLength: V, value: B }) => (m2((Q) => Q + V), { response: A.data, type: "success", request: B }), (A, V) => ({ response: [A], type: "error", request: k[V] }));
        M(F);
      }
    }, ...s });
  }).then((M) => (C2(M), M))), "handleChange");
  return { inputProps: { type: "file", accept: ".csv", onChange: (h) => {
    h.target.files && h.target.files.length > 0 && P2({ file: h.target.files[0] });
  } }, mutationResult: l2, isLoading: R2, handleChange: P2 };
}, "useImport");
var uC = o(({ defaultVisible: e = false } = {}) => {
  let [t, r] = (0, import_react50.useState)(e), s = (0, import_react50.useCallback)(() => r(true), [t]), n = (0, import_react50.useCallback)(() => r(false), [t]);
  return { visible: t, show: s, close: n };
}, "useModal");
var Di = o(({ resource: e, action: t, meta: r, legacy: s }) => pt()({ resource: e, action: t, meta: r, legacy: s }), "useToPath");
var lt = o(() => {
  let e = (0, import_react51.useContext)(Je);
  return e != null && e.Link ? e.Link : o(({ to: r, ...s }) => import_react51.default.createElement("a", { href: r, ...s }), "FallbackLink");
}, "useLink");
var qe = { useHistory: () => false, useLocation: () => false, useParams: () => ({}), Prompt: () => null, Link: () => null };
var Ui = import_react53.default.createContext(qe);
var _t = Ui;
var ks = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a }) => import_react53.default.createElement(_t.Provider, { value: { useHistory: t ?? qe.useHistory, useLocation: r ?? qe.useLocation, useParams: s ?? qe.useParams, Prompt: n ?? qe.Prompt, Link: i2 ?? qe.Link, routes: a ?? qe.routes } }, e), "LegacyRouterContextProvider");
var ne = o(() => {
  let e = (0, import_react52.useContext)(_t), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a } = e ?? qe;
  return { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a };
}, "useRouterContext");
var at = import_react55.default.createContext({ options: { buttons: { enableAccessControl: true, hideIfUnauthorized: false } } });
var Fs = o(({ can: e, children: t, options: r }) => import_react55.default.createElement(at.Provider, { value: { can: e, options: r ? { ...r, buttons: { enableAccessControl: true, hideIfUnauthorized: false, ...r.buttons } } : { buttons: { enableAccessControl: true, hideIfUnauthorized: false } } } }, t), "AccessControlContextProvider");
var Lt = o((e) => {
  if (!e)
    return;
  let { icon: t, list: r, edit: s, create: n, show: i2, clone: a, children: u, meta: d3, options: c, ...p3 } = e, { icon: m2, ...T2 } = d3 ?? {}, { icon: g2, ...R2 } = c ?? {};
  return { ...p3, ...d3 ? { meta: T2 } : {}, ...c ? { options: R2 } : {} };
}, "sanitizeResource");
var Vs = o(({ action: e, resource: t, params: r, queryOptions: s }) => {
  let { can: n } = (0, import_react54.useContext)(at), { keys: i2, preferLegacyKeys: a } = K(), { resource: u, ...d3 } = r ?? {}, c = Lt(u), p3 = useQuery(i2().access().resource(t).action(e).params({ params: { ...d3, resource: c }, enabled: s == null ? void 0 : s.enabled }).get(a), () => (n == null ? void 0 : n({ action: e, resource: t, params: { ...d3, resource: c } })) ?? Promise.resolve({ can: true }), { enabled: typeof n < "u", ...s, meta: { ...s == null ? void 0 : s.meta, ...P("useCan", a) }, retry: false });
  return typeof n > "u" ? { data: { can: true } } : p3;
}, "useCan");
var YC = o(() => {
  let { can: e } = import_react56.default.useContext(at);
  return { can: import_react56.default.useMemo(() => e ? o(async ({ params: s, ...n }) => {
    let i2 = s != null && s.resource ? Lt(s.resource) : void 0;
    return e({ ...n, ...s ? { params: { ...s, resource: i2 } } : {} });
  }, "canWithSanitizedResource") : void 0, [e]) };
}, "useCanWithoutCache");
var dh = o((e) => {
  let [t, r] = (0, import_react57.useState)([]), [s, n] = (0, import_react57.useState)([]), [i2, a] = (0, import_react57.useState)([]), { resource: u, sort: d3, sorters: c, filters: p3 = [], optionLabel: m2 = "title", optionValue: T2 = "id", debounce: g2 = 300, successNotification: R2, errorNotification: L, defaultValueQueryOptions: U, queryOptions: y2, fetchSize: b, pagination: D, hasPagination: S = false, liveMode: x2, defaultValue: l2 = [], onLiveEvent: f2, onSearch: C2, liveParams: P2, meta: h, metaData: M, dataProviderName: v2, overtimeOptions: E2 } = e, { resource: k, identifier: I2 } = N(u), A = Y()({ resource: k, meta: w(h, M) }), V = Array.isArray(l2) ? l2 : [l2], B = (0, import_react57.useCallback)((j) => {
    a(j.data.map((J) => ({ label: get_default(J, m2), value: get_default(J, T2) })));
  }, [m2, T2]), Q = U ?? y2, G = qr({ resource: I2, ids: V, queryOptions: { ...Q, enabled: V.length > 0 && ((Q == null ? void 0 : Q.enabled) ?? true), onSuccess: (j) => {
    var J;
    B(j), (J = Q == null ? void 0 : Q.onSuccess) == null || J.call(Q, j);
  } }, meta: A, metaData: A, liveMode: "off", dataProviderName: v2 }), $ = (0, import_react57.useCallback)((j) => {
    n(j.data.map((J) => ({ label: get_default(J, m2), value: get_default(J, T2) })));
  }, [m2, T2]), z = Gt({ resource: I2, sorters: w(c, d3), filters: p3.concat(t), pagination: { current: D == null ? void 0 : D.current, pageSize: (D == null ? void 0 : D.pageSize) ?? b, mode: D == null ? void 0 : D.mode }, hasPagination: S, queryOptions: { ...y2, onSuccess: (j) => {
    var J;
    $(j), (J = y2 == null ? void 0 : y2.onSuccess) == null || J.call(y2, j);
  } }, successNotification: R2, errorNotification: L, meta: A, metaData: A, liveMode: x2, liveParams: P2, onLiveEvent: f2, dataProviderName: v2 }), H = o((j) => {
    if (C2) {
      r(C2(j));
      return;
    }
    if (j)
      r([{ field: m2, operator: "contains", value: j }]);
    else {
      r([]);
      return;
    }
  }, "onSearch"), { elapsedTime: W } = ee({ isLoading: z.isFetching || G.isFetching, interval: E2 == null ? void 0 : E2.interval, onInterval: E2 == null ? void 0 : E2.onInterval }), X = (0, import_react57.useMemo)(() => uniqBy_default([...s, ...i2], "value"), [s, i2]);
  return { queryResult: z, defaultValueQueryResult: G, options: X, onSearch: debounce_default(H, g2), overtime: { elapsedTime: W } };
}, "useSelect");
var Gs = [];
var $s = [];
function Dh({ initialCurrent: e, initialPageSize: t, hasPagination: r = true, pagination: s, initialSorter: n, permanentSorter: i2 = $s, defaultSetFilterBehavior: a, initialFilter: u, permanentFilter: d3 = Gs, filters: c, sorters: p3, syncWithLocation: m2, resource: T2, successNotification: g2, errorNotification: R2, queryOptions: L, liveMode: U, onLiveEvent: y2, liveParams: b, meta: D, metaData: S, dataProviderName: x2, overtimeOptions: l2 } = {}) {
  var kt, yo, go, To, Ro;
  let { syncWithLocation: f2 } = Hr(), C2 = m2 ?? f2, P2 = Es(U), h = q(), { useLocation: M } = ne(), { search: v2, pathname: E2 } = M(), k = Y(), I2 = fe(), F = ((c == null ? void 0 : c.mode) || "server") === "server", A = ((p3 == null ? void 0 : p3.mode) || "server") === "server", V = r === false ? "off" : "server", B = ((s == null ? void 0 : s.mode) ?? V) !== "off", Q = w(s == null ? void 0 : s.current, e), G = w(s == null ? void 0 : s.pageSize, t), $ = w(D, S), { parsedCurrent: z, parsedPageSize: H, parsedSorter: W, parsedFilters: X } = Rr(v2 ?? "?"), j = w(c == null ? void 0 : c.initial, u), J = w(c == null ? void 0 : c.permanent, d3) ?? Gs, xe = w(p3 == null ? void 0 : p3.initial, n), be = w(p3 == null ? void 0 : p3.permanent, i2) ?? $s, wt = w(c == null ? void 0 : c.defaultBehavior, a) ?? "merge", it, ut, yt, gt;
  C2 ? (it = ((kt = I2 == null ? void 0 : I2.params) == null ? void 0 : kt.current) || z || Q || 1, ut = ((yo = I2 == null ? void 0 : I2.params) == null ? void 0 : yo.pageSize) || H || G || 10, yt = ((go = I2 == null ? void 0 : I2.params) == null ? void 0 : go.sorters) || (W.length ? W : xe), gt = ((To = I2 == null ? void 0 : I2.params) == null ? void 0 : To.filters) || (X.length ? X : j)) : (it = Q || 1, ut = G || 10, yt = xe, gt = j);
  let { replace: Tt } = pe(), Xt = le(), { resource: Sr, identifier: ze } = N(T2), St = k({ resource: Sr, meta: $ });
  import_react58.default.useEffect(() => {
    (0, import_warn_once4.default)(typeof ze > "u", "useTable: `resource` is not defined.");
  }, [ze]);
  let [Ke, Zt] = (0, import_react58.useState)(hr(be, yt ?? [])), [ct, Rt] = (0, import_react58.useState)(Cr(J, gt ?? [])), [Pt, Ar] = (0, import_react58.useState)(it), [et, At] = (0, import_react58.useState)(ut), kr = o(({ pagination: { current: ge, pageSize: Qe }, sorter: Yt, filters: Jt }) => {
    if (h === "new")
      return Xt({ type: "path", options: { keepHash: true, keepQuery: true }, query: { ...B ? { current: ge, pageSize: Qe } : {}, sorters: Yt, filters: Jt, ...me() } }) ?? "";
    {
      let Qt = import_qs4.default.parse(v2 == null ? void 0 : v2.substring(1)), mn = Pr({ pagination: { pageSize: Qe, current: ge }, sorters: Ke ?? Yt, filters: Jt, ...Qt });
      return `${E2 ?? ""}?${mn ?? ""}`;
    }
  }, "createLinkForSyncWithLocation");
  (0, import_react58.useEffect)(() => {
    v2 === "" && (Ar(it), At(ut), Zt(hr(be, yt ?? [])), Rt(Cr(J, gt ?? [])));
  }, [v2]);
  let me = o(() => {
    if (h === "new") {
      let { sorters: ge, filters: Qe, pageSize: Yt, current: Jt, ...Qt } = (I2 == null ? void 0 : I2.params) ?? {};
      return Qt;
    } else {
      let { sorter: ge, filters: Qe, pageSize: Yt, current: Jt, ...Qt } = import_qs4.default.parse(v2, { ignoreQueryPrefix: true });
      return Qt;
    }
  }, "currentQueryParams");
  (0, import_react58.useEffect)(() => {
    if (C2) {
      let ge = me();
      if (h === "new")
        Xt({ type: "replace", options: { keepQuery: true }, query: { ...B ? { pageSize: et, current: Pt } : {}, sorters: differenceWith_default(Ke, be, isEqual_default), filters: differenceWith_default(ct, J, isEqual_default) } });
      else {
        let Qe = Pr({ ...B ? { pagination: { pageSize: et, current: Pt } } : {}, sorters: differenceWith_default(Ke, be, isEqual_default), filters: differenceWith_default(ct, J, isEqual_default), ...ge });
        return Tt == null ? void 0 : Tt(`${E2}?${Qe}`, void 0, { shallow: true });
      }
    }
  }, [C2, Pt, et, Ke, ct]);
  let ke = Gt({ resource: ze, hasPagination: r, pagination: { current: Pt, pageSize: et, mode: s == null ? void 0 : s.mode }, filters: F ? vt(J, ct) : void 0, sorters: A ? xr(be, Ke) : void 0, queryOptions: L, successNotification: g2, errorNotification: R2, meta: St, metaData: St, liveMode: P2, liveParams: b, onLiveEvent: y2, dataProviderName: x2 }), we = o((ge) => {
    Rt((Qe) => vt(J, ge, Qe));
  }, "setFiltersAsMerge"), tt = o((ge) => {
    Rt(vt(J, ge));
  }, "setFiltersAsReplace"), ve = o((ge) => {
    Rt((Qe) => vt(J, ge(Qe)));
  }, "setFiltersWithSetter"), rt = o((ge, Qe = wt) => {
    typeof ge == "function" ? ve(ge) : Qe === "replace" ? tt(ge) : we(ge);
  }, "setFiltersFn"), ot = o((ge) => {
    Zt(() => xr(be, ge));
  }, "setSortWithUnion"), { elapsedTime: dt } = ee({ isLoading: ke.isFetching, interval: l2 == null ? void 0 : l2.interval, onInterval: l2 == null ? void 0 : l2.onInterval });
  return { tableQueryResult: ke, sorters: Ke, setSorters: ot, sorter: Ke, setSorter: ot, filters: ct, setFilters: rt, current: Pt, setCurrent: Ar, pageSize: et, setPageSize: At, pageCount: et ? Math.ceil((((Ro = ke.data) == null ? void 0 : Ro.total) ?? 0) / et) : 1, createLinkForSyncWithLocation: kr, overtime: { elapsedTime: dt } };
}
o(Dh, "useTable");
var mt = import_react60.default.createContext({});
var zs = o(({ create: e, get: t, update: r, children: s }) => import_react60.default.createElement(mt.Provider, { value: { create: e, get: t, update: r } }, s), "AuditLogContextProvider");
var Ve = o(({ logMutationOptions: e, renameMutationOptions: t } = {}) => {
  let r = useQueryClient(), s = (0, import_react59.useContext)(mt), { keys: n, preferLegacyKeys: i2 } = K(), a = Z(), { resources: u } = (0, import_react59.useContext)(nt), { data: d3, refetch: c, isLoading: p3 } = $r({ v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy), queryOptions: { enabled: !!(s != null && s.create) } }), m2 = useMutation(async (g2) => {
    var y2, b, D, S, x2;
    let R2 = ce(g2.resource, u), L = w((y2 = R2 == null ? void 0 : R2.meta) == null ? void 0 : y2.audit, (b = R2 == null ? void 0 : R2.options) == null ? void 0 : b.audit, (S = (D = R2 == null ? void 0 : R2.options) == null ? void 0 : D.auditLog) == null ? void 0 : S.permissions);
    if (L && !Qr(L, g2.action))
      return;
    let U;
    return p3 && (s != null && s.create) && (U = await c()), await ((x2 = s.create) == null ? void 0 : x2.call(s, { ...g2, author: d3 ?? (U == null ? void 0 : U.data) }));
  }, { mutationKey: n().audit().action("log").get(), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useLog", i2) } }), T2 = useMutation(async (g2) => {
    var R2;
    return await ((R2 = s.update) == null ? void 0 : R2.call(s, g2));
  }, { onSuccess: (g2) => {
    g2 != null && g2.resource && r.invalidateQueries(n().audit().resource((g2 == null ? void 0 : g2.resource) ?? "").action("list").get(i2));
  }, mutationKey: n().audit().action("rename").get(), ...t, meta: { ...t == null ? void 0 : t.meta, ...P("useLog", i2) } });
  return { log: m2, rename: T2 };
}, "useLog");
var Jh = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: i2 }) => {
  let { get: a } = (0, import_react61.useContext)(mt), { keys: u, preferLegacyKeys: d3 } = K();
  return useQuery(u().audit().resource(e).action("list").params(r).get(d3), () => (a == null ? void 0 : a({ resource: e, action: t, author: s, meta: r, metaData: n })) ?? Promise.resolve([]), { enabled: typeof a < "u", ...i2, retry: false, meta: { ...i2 == null ? void 0 : i2.meta, ...P("useLogList", d3) } });
}, "useLogList");
var lb = o(({ meta: e = {} } = {}) => {
  let t = q(), { i18nProvider: r } = (0, import_react62.useContext)(Be), s = fe(), n = _(), { resources: i2, resource: a, action: u } = N(), { options: { textTransformers: d3 } } = oe(), c = [];
  if (!(a != null && a.name))
    return { breadcrumbs: c };
  let p3 = o((m2) => {
    var g2, R2, L, U, y2, b;
    let T2 = typeof m2 == "string" ? ce(m2, i2, t === "legacy") ?? { name: m2 } : m2;
    if (T2) {
      let D = w((g2 = T2 == null ? void 0 : T2.meta) == null ? void 0 : g2.parent, T2 == null ? void 0 : T2.parentName);
      D && p3(D);
      let S = Te(T2, i2, t === "legacy").find((f2) => f2.action === "list"), x2 = (R2 = S == null ? void 0 : S.resource) != null && R2.list ? S == null ? void 0 : S.route : void 0, l2 = x2 ? t === "legacy" ? x2 : Ue(x2, T2 == null ? void 0 : T2.meta, s, e) : void 0;
      c.push({ label: w((L = T2.meta) == null ? void 0 : L.label, (U = T2.options) == null ? void 0 : U.label) ?? n(`${T2.name}.${T2.name}`, d3.humanize(T2.name)), href: l2, icon: w((y2 = T2.meta) == null ? void 0 : y2.icon, (b = T2.options) == null ? void 0 : b.icon, T2.icon) });
    }
  }, "addBreadcrumb");
  if (p3(a), u && u !== "list") {
    let m2 = `actions.${u}`, T2 = n(m2);
    typeof r < "u" && T2 === m2 ? ((0, import_warn_once5.default)(true, `[useBreadcrumb]: Breadcrumb missing translate key for the "${u}" action. Please add "actions.${u}" key to your translation file.
For more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), c.push({ label: n(`buttons.${u}`, d3.humanize(u)) })) : c.push({ label: n(m2, d3.humanize(u)) });
  }
  return { breadcrumbs: c };
}, "useBreadcrumb");
var Et = o((e, t, r = false) => {
  let s = [], n = Se(e, t);
  for (; n; )
    s.push(n), n = Se(n, t);
  return s.reverse(), `/${[...s, e].map((a) => Pe((r ? a.route : void 0) ?? a.identifier ?? a.name)).join("/").replace(/^\//, "")}`;
}, "createResourceKey");
var Xs = o((e, t = false) => {
  let r = { item: { name: "__root__" }, children: {} };
  e.forEach((n) => {
    let i2 = [], a = Se(n, e);
    for (; a; )
      i2.push(a), a = Se(a, e);
    i2.reverse();
    let u = r;
    i2.forEach((c) => {
      let p3 = (t ? c.route : void 0) ?? c.identifier ?? c.name;
      u.children[p3] || (u.children[p3] = { item: c, children: {} }), u = u.children[p3];
    });
    let d3 = (t ? n.route : void 0) ?? n.identifier ?? n.name;
    u.children[d3] || (u.children[d3] = { item: n, children: {} });
  });
  let s = o((n) => {
    let i2 = [];
    return Object.keys(n.children).forEach((a) => {
      let u = Et(n.children[a].item, e, t), d3 = { ...n.children[a].item, key: u, children: s(n.children[a]) };
      i2.push(d3);
    }), i2;
  }, "flatten");
  return s(r);
}, "createTree");
var Zs = o((e) => e.split("?")[0].split("#")[0].replace(/(.+)(\/$)/, "$1"), "getCleanPath");
var Wi = o(({ meta: e, hideOnMissingParameter: t } = { hideOnMissingParameter: true }) => {
  let r = _(), s = pt(), n = q(), { resource: i2, resources: a } = N(), { pathname: u } = fe(), { useLocation: d3 } = ne(), { pathname: c } = d3(), p3 = bt(), T2 = `/${((n === "legacy" ? Zs(c) : u ? Zs(u) : void 0) ?? "").replace(/^\//, "")}`, g2 = i2 ? Et(i2, a, n === "legacy") : T2 ?? "", R2 = import_react63.default.useMemo(() => {
    if (!i2)
      return [];
    let y2 = Se(i2, a), b = [Et(i2, a)];
    for (; y2; )
      b.push(Et(y2, a)), y2 = Se(y2, a);
    return b;
  }, []), L = import_react63.default.useCallback((y2) => {
    var D, S, x2, l2, f2, C2;
    if ((((D = y2 == null ? void 0 : y2.meta) == null ? void 0 : D.hide) ?? ((S = y2 == null ? void 0 : y2.options) == null ? void 0 : S.hide)) || !(y2 != null && y2.list) && y2.children.length === 0)
      return;
    let b = y2.list ? s({ resource: y2, action: "list", legacy: n === "legacy", meta: e }) : void 0;
    if (!(t && b && b.match(/(\/|^):(.+?)(\/|$){1}/)))
      return { ...y2, route: b, icon: w((x2 = y2.meta) == null ? void 0 : x2.icon, (l2 = y2.options) == null ? void 0 : l2.icon, y2.icon), label: w((f2 = y2 == null ? void 0 : y2.meta) == null ? void 0 : f2.label, (C2 = y2 == null ? void 0 : y2.options) == null ? void 0 : C2.label) ?? r(`${y2.name}.${y2.name}`, p3(y2.name, "plural")) };
  }, [n, e, r, t]), U = import_react63.default.useMemo(() => {
    let y2 = Xs(a, n === "legacy"), b = o((D) => D.flatMap((S) => {
      let x2 = b(S.children), l2 = L({ ...S, children: x2 });
      return l2 ? [l2] : [];
    }), "prepare");
    return b(y2);
  }, [a, n, L]);
  return { defaultOpenKeys: R2, selectedKey: g2, menuItems: U };
}, "useMenu");
var Y = o(() => {
  let { params: e } = fe();
  return o(({ resource: r, meta: s } = {}) => {
    let { meta: n } = Lt(r) ?? { meta: {} }, { filters: i2, sorters: a, current: u, pageSize: d3, ...c } = e ?? {};
    return { ...n, ...c, ...s };
  }, "getMetaFn");
}, "useMeta");
var _i = o(() => {
  let [e, t] = (0, import_react2.useState)(), r = _(), { push: s } = pe(), n = le(), i2 = q(), { resource: a, action: u } = N();
  return (0, import_react2.useEffect)(() => {
    a && u && t(r("pages.error.info", { action: u, resource: a.name }, `You may have forgotten to add the "${u}" component to "${a.name}" resource.`));
  }, [a, u]), import_react2.default.createElement(import_react2.default.Fragment, null, import_react2.default.createElement("h1", null, r("pages.error.404", void 0, "Sorry, the page you visited does not exist.")), e && import_react2.default.createElement("p", null, e), import_react2.default.createElement("button", { onClick: () => {
    i2 === "legacy" ? s("/") : n({ to: "/" });
  } }, r("pages.error.backHome", void 0, "Back Home")));
}, "ErrorComponent");
var Vr = o(() => {
  let [e, t] = (0, import_react64.useState)(""), [r, s] = (0, import_react64.useState)(""), n = _(), i2 = Z(), { mutate: a } = Ht({ v3LegacyAuthProviderCompatible: !!(i2 != null && i2.isLegacy) });
  return import_react64.default.createElement(import_react64.default.Fragment, null, import_react64.default.createElement("h1", null, n("pages.login.title", "Sign in your account")), import_react64.default.createElement("form", { onSubmit: (u) => {
    u.preventDefault(), a({ username: e, password: r });
  } }, import_react64.default.createElement("table", null, import_react64.default.createElement("tbody", null, import_react64.default.createElement("tr", null, import_react64.default.createElement("td", null, n("pages.login.username", void 0, "username"), ":"), import_react64.default.createElement("td", null, import_react64.default.createElement("input", { type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", autoFocus: true, required: true, value: e, onChange: (u) => t(u.target.value) }))), import_react64.default.createElement("tr", null, import_react64.default.createElement("td", null, n("pages.login.password", void 0, "password"), ":"), import_react64.default.createElement("td", null, import_react64.default.createElement("input", { type: "password", required: true, size: 20, value: r, onChange: (u) => s(u.target.value) }))))), import_react64.default.createElement("br", null), import_react64.default.createElement("input", { type: "submit", value: "login" })));
}, "LoginPage");
var Js = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: i2, renderContent: a, formProps: u, title: d3 = void 0 }) => {
  let c = q(), p3 = lt(), { Link: m2 } = ne(), T2 = c === "legacy" ? m2 : p3, [g2, R2] = (0, import_react66.useState)(""), [L, U] = (0, import_react66.useState)(""), [y2, b] = (0, import_react66.useState)(false), D = _(), S = Z(), { mutate: x2 } = Ht({ v3LegacyAuthProviderCompatible: !!(S != null && S.isLegacy) }), l2 = o((P2, h) => import_react66.default.createElement(T2, { to: P2 }, h), "renderLink"), f2 = o(() => e ? e.map((P2) => import_react66.default.createElement("div", { key: P2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react66.default.createElement("button", { onClick: () => x2({ providerName: P2.name }), style: { display: "flex", alignItems: "center" } }, P2 == null ? void 0 : P2.icon, P2.label ?? import_react66.default.createElement("label", null, P2.label)))) : null, "renderProviders"), C2 = import_react66.default.createElement("div", { ...n }, import_react66.default.createElement("h1", { style: { textAlign: "center" } }, D("pages.login.title", "Sign in to your account")), f2(), import_react66.default.createElement("hr", null), import_react66.default.createElement("form", { onSubmit: (P2) => {
    P2.preventDefault(), x2({ email: g2, password: L, remember: y2 });
  }, ...u }, import_react66.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react66.default.createElement("label", { htmlFor: "email-input" }, D("pages.login.fields.email", "Email")), import_react66.default.createElement("input", { id: "email-input", name: "email", type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: g2, onChange: (P2) => R2(P2.target.value) }), import_react66.default.createElement("label", { htmlFor: "password-input" }, D("pages.login.fields.password", "Password")), import_react66.default.createElement("input", { id: "password-input", type: "password", name: "password", required: true, size: 20, value: L, onChange: (P2) => U(P2.target.value) }), s ?? import_react66.default.createElement(import_react66.default.Fragment, null, import_react66.default.createElement("label", { htmlFor: "remember-me-input" }, D("pages.login.buttons.rememberMe", "Remember me"), import_react66.default.createElement("input", { id: "remember-me-input", name: "remember", type: "checkbox", size: 20, checked: y2, value: y2.toString(), onChange: () => {
    b(!y2);
  } }))), import_react66.default.createElement("br", null), r ?? l2("/forgot-password", D("pages.login.buttons.forgotPassword", "Forgot password?")), import_react66.default.createElement("input", { type: "submit", value: D("pages.login.signin", "Sign in") }), t ?? import_react66.default.createElement("span", null, D("pages.login.buttons.noAccount", "Don’t have an account?"), " ", l2("/register", D("pages.login.register", "Sign up"))))));
  return import_react66.default.createElement("div", { ...i2 }, a ? a(C2, d3) : C2);
}, "LoginPage");
var en = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: i2, title: a = void 0 }) => {
  let u = q(), d3 = lt(), { Link: c } = ne(), p3 = u === "legacy" ? c : d3, [m2, T2] = (0, import_react67.useState)(""), [g2, R2] = (0, import_react67.useState)(""), L = _(), U = Z(), { mutate: y2, isLoading: b } = _r({ v3LegacyAuthProviderCompatible: !!(U != null && U.isLegacy) }), D = o((l2, f2) => import_react67.default.createElement(p3, { to: l2 }, f2), "renderLink"), S = o(() => e ? e.map((l2) => import_react67.default.createElement("div", { key: l2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react67.default.createElement("button", { onClick: () => y2({ providerName: l2.name }), style: { display: "flex", alignItems: "center" } }, l2 == null ? void 0 : l2.icon, l2.label ?? import_react67.default.createElement("label", null, l2.label)))) : null, "renderProviders"), x2 = import_react67.default.createElement("div", { ...s }, import_react67.default.createElement("h1", { style: { textAlign: "center" } }, L("pages.register.title", "Sign up for your account")), S(), import_react67.default.createElement("hr", null), import_react67.default.createElement("form", { onSubmit: (l2) => {
    l2.preventDefault(), y2({ email: m2, password: g2 });
  }, ...i2 }, import_react67.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react67.default.createElement("label", { htmlFor: "email-input" }, L("pages.register.fields.email", "Email")), import_react67.default.createElement("input", { id: "email-input", name: "email", type: "email", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: m2, onChange: (l2) => T2(l2.target.value) }), import_react67.default.createElement("label", { htmlFor: "password-input" }, L("pages.register.fields.password", "Password")), import_react67.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: g2, onChange: (l2) => R2(l2.target.value) }), import_react67.default.createElement("input", { type: "submit", value: L("pages.register.buttons.submit", "Sign up"), disabled: b }), t ?? import_react67.default.createElement(import_react67.default.Fragment, null, import_react67.default.createElement("span", null, L("pages.login.buttons.haveAccount", "Have an account?"), " ", D("/login", L("pages.login.signin", "Sign in")))))));
  return import_react67.default.createElement("div", { ...r }, n ? n(x2, a) : x2);
}, "RegisterPage");
var tn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: i2 = void 0 }) => {
  let a = _(), u = q(), d3 = lt(), { Link: c } = ne(), p3 = u === "legacy" ? c : d3, [m2, T2] = (0, import_react68.useState)(""), { mutate: g2, isLoading: R2 } = Xr(), L = o((y2, b) => import_react68.default.createElement(p3, { to: y2 }, b), "renderLink"), U = import_react68.default.createElement("div", { ...r }, import_react68.default.createElement("h1", { style: { textAlign: "center" } }, a("pages.forgotPassword.title", "Forgot your password?")), import_react68.default.createElement("hr", null), import_react68.default.createElement("form", { onSubmit: (y2) => {
    y2.preventDefault(), g2({ email: m2 });
  }, ...n }, import_react68.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react68.default.createElement("label", { htmlFor: "email-input" }, a("pages.forgotPassword.fields.email", "Email")), import_react68.default.createElement("input", { id: "email-input", name: "email", type: "mail", autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: m2, onChange: (y2) => T2(y2.target.value) }), import_react68.default.createElement("input", { type: "submit", disabled: R2, value: a("pages.forgotPassword.buttons.submit", "Send reset instructions") }), import_react68.default.createElement("br", null), e ?? import_react68.default.createElement("span", null, a("pages.register.buttons.haveAccount", "Have an account? "), " ", L("/login", a("pages.login.signin", "Sign in"))))));
  return import_react68.default.createElement("div", { ...t }, s ? s(U, i2) : U);
}, "ForgotPasswordPage");
var on = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0 }) => {
  let i2 = _(), a = Z(), { mutate: u, isLoading: d3 } = Yr({ v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy) }), [c, p3] = (0, import_react69.useState)(""), [m2, T2] = (0, import_react69.useState)(""), g2 = import_react69.default.createElement("div", { ...t }, import_react69.default.createElement("h1", { style: { textAlign: "center" } }, i2("pages.updatePassword.title", "Update Password")), import_react69.default.createElement("hr", null), import_react69.default.createElement("form", { onSubmit: (R2) => {
    R2.preventDefault(), u({ password: c, confirmPassword: m2 });
  }, ...s }, import_react69.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react69.default.createElement("label", { htmlFor: "password-input" }, i2("pages.updatePassword.fields.password", "New Password")), import_react69.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: c, onChange: (R2) => p3(R2.target.value) }), import_react69.default.createElement("label", { htmlFor: "confirm-password-input" }, i2("pages.updatePassword.fields.confirmPassword", "Confirm New Password")), import_react69.default.createElement("input", { id: "confirm-password-input", name: "confirmPassword", type: "password", required: true, size: 20, value: m2, onChange: (R2) => T2(R2.target.value) }), import_react69.default.createElement("input", { type: "submit", disabled: d3, value: i2("pages.updatePassword.buttons.submit", "Update") }))));
  return import_react69.default.createElement("div", { ...e }, r ? r(g2, n) : g2);
}, "UpdatePasswordPage");
var Xi = o((e) => {
  let { type: t } = e;
  return import_react65.default.createElement(import_react65.default.Fragment, null, o(() => {
    switch (t) {
      case "register":
        return import_react65.default.createElement(en, { ...e });
      case "forgotPassword":
        return import_react65.default.createElement(tn, { ...e });
      case "updatePassword":
        return import_react65.default.createElement(on, { ...e });
      default:
        return import_react65.default.createElement(Js, { ...e });
    }
  }, "renderView")());
}, "AuthPage");
var lo = o(() => import_react70.default.createElement(import_react70.default.Fragment, null, import_react70.default.createElement("h1", null, "Welcome on board"), import_react70.default.createElement("p", null, "Your configuration is completed."), import_react70.default.createElement("p", null, "Now you can get started by adding your resources to the", " ", import_react70.default.createElement("code", null, "`resources`"), " property of ", import_react70.default.createElement("code", null, "`<Refine>`")), import_react70.default.createElement("div", { style: { display: "flex", gap: 8 } }, import_react70.default.createElement("a", { href: "https://refine.dev", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Documentation")), import_react70.default.createElement("a", { href: "https://refine.dev/examples", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Examples")), import_react70.default.createElement("a", { href: "https://discord.gg/refine", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Community")))), "ReadyPage");
var Yi = [{ title: "Documentation", description: "Learn about the technical details of using refine in your projects.", link: "https://refine.dev/", icon: import_react71.default.createElement("svg", { width: "14", height: "16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { d: "M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V5a1 1 0 0 0-1-1H3a1 1 0 0 1 0-2h10a1 1 0 1 0 0-2H2Z", fill: "#fff" })) }, { title: "Tutorial", description: "Learn how to use refine by building a fully-functioning CRUD app, from scratch to full launch.", link: "https://refine.dev/docs/tutorial/introduction/index/", icon: import_react71.default.createElement("svg", { width: "16", height: "14", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { d: "M0 4.573c0-.475.163-.948.53-1.25a4.57 4.57 0 0 1 .854-.553L5.956.485a4.571 4.571 0 0 1 4.088 0l4.572 2.285c.308.154.594.34.853.553.306.251.47.62.517 1.01.01.055.014.112.014.169v6.5a1 1 0 0 1-2 0V6.684l-3.956 1.978a4.571 4.571 0 0 1-4.088 0L1.384 6.376a4.57 4.57 0 0 1-.853-.553C.163 5.522 0 5.05 0 4.573Z", fill: "#fff" }), import_react71.default.createElement("path", { d: "M5.061 13.305 3 12.274V9.42l2.061 1.031a6.571 6.571 0 0 0 5.878 0L13 9.421v2.853l-2.061 1.03a6.571 6.571 0 0 1-5.878 0Z", fill: "#fff" })) }, { title: "Examples", description: "A collection of reference applications you can use as a starting point.", link: "https://refine.dev/examples", icon: import_react71.default.createElement("svg", { width: "16", height: "16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4H0V2Zm3 2a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm4-1a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm2 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", fill: "#fff" }), import_react71.default.createElement("path", { d: "M0 14V8h16v6a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2Z", fill: "#fff" })) }, { title: "Community", description: "Join our Discord community and keep up with the latest news.", link: "https://discord.gg/refine", icon: import_react71.default.createElement("svg", { width: "16", height: "12", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { d: "M13.553 1.005A13.334 13.334 0 0 0 10.253 0c-.156.276-.298.56-.423.85a12.42 12.42 0 0 0-3.664 0A8.975 8.975 0 0 0 5.744 0 13.43 13.43 0 0 0 2.44 1.007C.351 4.066-.215 7.05.068 9.99A13.36 13.36 0 0 0 4.116 12c.328-.436.618-.9.867-1.384a8.647 8.647 0 0 1-1.365-.645c.115-.082.227-.167.335-.249a9.594 9.594 0 0 0 8.094 0c.11.089.222.173.335.25-.436.254-.894.47-1.368.646.249.484.539.946.867 1.382a13.3 13.3 0 0 0 4.051-2.01c.332-3.41-.568-6.365-2.379-8.985Zm-8.21 7.176c-.79 0-1.442-.709-1.442-1.58 0-.872.63-1.587 1.439-1.587s1.456.715 1.442 1.586c-.014.872-.636 1.58-1.44 1.58Zm5.315 0c-.79 0-1.44-.709-1.44-1.58 0-.872.63-1.587 1.44-1.587.81 0 1.452.715 1.438 1.586-.014.872-.634 1.58-1.438 1.58Z", fill: "#fff" })) }];
var Ji = o(() => {
  let e = yr("(max-width: 1010px)"), t = yr("(max-width: 650px)"), r = o(() => t ? "1, 280px" : e ? "2, 280px" : "4, 208px", "getGridTemplateColumns"), s = o(() => t ? "32px" : e ? "40px" : "48px", "getHeaderFontSize"), n = o(() => t ? "16px" : e ? "20px" : "24px", "getSubHeaderFontSize");
  return import_react71.default.createElement("div", { style: { backgroundImage: "url(https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/welcome-page.webp)", backgroundPosition: "center top", backgroundSize: "cover", backgroundRepeat: "no-repeat", minHeight: "100vh", backgroundColor: "#0D0D12", fontFamily: "Arial", color: "#FFFFFF" } }, import_react71.default.createElement("div", { style: { height: "89px" } }), import_react71.default.createElement("div", { style: { display: "flex", justifyContent: "center" } }, import_react71.default.createElement("img", { src: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/welcome-logo.webp", width: "198", height: "54" })), import_react71.default.createElement("div", { style: { height: e ? "270px" : "22vw", minHeight: e ? "270px" : "313px" } }), import_react71.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px", textAlign: "center" } }, import_react71.default.createElement("h1", { style: { fontSize: s(), fontWeight: 700, margin: "0px" } }, "Welcome Aboard!"), import_react71.default.createElement("h4", { style: { fontSize: n(), fontWeight: 400, margin: "0px" } }, "Your configuration is completed.")), import_react71.default.createElement("div", { style: { height: "64px" } }), import_react71.default.createElement("div", { style: { display: "grid", gridTemplateColumns: `repeat(${r()})`, justifyContent: "center", gap: "48px", paddingRight: "16px", paddingLeft: "16px", maxWidth: "976px", margin: "auto" } }, Yi.map((i2) => import_react71.default.createElement(qi, { key: `welcome-page-${i2.title}`, card: i2 }))), import_react71.default.createElement("div", { style: { height: "64px" } }));
}, "WelcomePage");
var qi = o(({ card: e }) => {
  let { title: t, description: r, icon: s, link: n } = e, [i2, a] = (0, import_react71.useState)(false);
  return import_react71.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px" } }, import_react71.default.createElement("div", { style: { display: "flex", alignItems: "center" } }, import_react71.default.createElement("a", { onPointerEnter: () => a(true), onPointerLeave: () => a(false), style: { display: "flex", alignItems: "center", color: "#fff", textDecoration: "none" }, href: n }, s, import_react71.default.createElement("span", { style: { fontSize: "16px", fontWeight: 700, marginLeft: "13px", marginRight: "14px" } }, t), import_react71.default.createElement("svg", { style: { transition: "transform 0.5s ease-in-out, opacity 0.2s ease-in-out", ...i2 && { transform: "translateX(4px)", opacity: 1 } }, width: "12", height: "8", fill: "none", opacity: "0.5", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { d: "M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z", fill: "#fff" })))), import_react71.default.createElement("span", { style: { fontSize: "12px", opacity: 0.5, lineHeight: "16px" } }, r));
}, "Card");
var eu = "4.44.12";
var sn = o(() => {
  var b;
  let e = Jr(), t = (0, import_react74.useContext)(mt), r = (0, import_react74.useContext)(Ye), s = (0, import_react74.useContext)(_t), n = (0, import_react74.useContext)(zt), { i18nProvider: i2 } = (0, import_react74.useContext)(Be), a = (0, import_react74.useContext)(Ot), u = (0, import_react74.useContext)(at), { resources: d3 } = N(), c = oe(), p3 = !!t.create || !!t.get || !!t.update, m2 = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), T2 = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, g2 = !!n, R2 = !!(i2 != null && i2.changeLocale) || !!(i2 != null && i2.getLocale) || !!(i2 != null && i2.translate), L = !!a.close || !!a.open, U = !!u.can, y2 = (b = c == null ? void 0 : c.options) == null ? void 0 : b.projectId;
  return { providers: { auth: e, auditLog: p3, live: m2, router: T2, data: g2, i18n: R2, notification: L, accessControl: U }, version: eu, resourceCount: d3.length, projectId: y2 };
}, "useTelemetryData");
var tu = o((e) => {
  try {
    let t = JSON.stringify(e || {});
    return typeof btoa < "u" ? btoa(t) : Buffer.from(t).toString("base64");
  } catch {
    return;
  }
}, "encode");
var ru = o((e) => {
  let t = new Image();
  t.src = e;
}, "throughImage");
var ou = o((e) => {
  fetch(e);
}, "throughFetch");
var su = o((e) => {
  typeof Image < "u" ? ru(e) : typeof fetch < "u" && ou(e);
}, "transport");
var an = o(() => {
  let e = sn(), t = import_react73.default.useRef(false);
  return import_react73.default.useEffect(() => {
    if (t.current)
      return;
    let r = tu(e);
    r && (su(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = true);
  }, []), null;
}, "Telemetry");
var un = o((e) => {
  let t = ["go", "parse", "back", "Link"], r = Object.keys(e).filter((n) => !t.includes(n));
  return r.length > 0 ? (console.warn(`Unsupported properties are found in \`routerProvider\` prop. You provided \`${r.join(", ")}\`. Supported properties are \`${t.join(", ")}\`. You may wanted to use \`legacyRouterProvider\` prop instead.`), true) : false;
}, "checkRouterPropMisuse");
var dn = o((e) => {
  let t = import_react75.default.useRef(false);
  import_react75.default.useEffect(() => {
    t.current === false && e && un(e) && (t.current = true);
  }, [e]);
}, "useRouterMisuseWarning");
var iu = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: i2, accessControlProvider: a, auditLogProvider: u, resources: d3, DashboardPage: c, ReadyPage: p3, LoginPage: m2, catchAll: T2, children: g2, liveProvider: R2, i18nProvider: L, Title: U, Layout: y2, Sider: b, Header: D, Footer: S, OffLayoutArea: x2, onLiveEvent: l2, options: f2 }) => {
  let { optionsWithDefaults: C2, disableTelemetryWithDefault: P2, reactQueryWithDefaults: h } = Br({ options: f2 }), M = Er(() => {
    var I2;
    return h.clientConfig instanceof QueryClient ? h.clientConfig : new QueryClient({ ...h.clientConfig, defaultOptions: { ...h.clientConfig.defaultOptions, queries: { refetchOnWindowFocus: false, keepPreviousData: true, ...(I2 = h.clientConfig.defaultOptions) == null ? void 0 : I2.queries } } });
  }, [h.clientConfig]);
  C(M);
  let E2 = import_react72.default.useMemo(() => typeof i2 == "function" ? i2 : () => i2 ?? {}, [i2])();
  if (dn(n), s && !n && (d3 ?? []).length === 0)
    return p3 ? import_react72.default.createElement(p3, null) : import_react72.default.createElement(lo, null);
  let { RouterComponent: k = import_react72.default.Fragment } = n ? {} : s ?? {};
  return import_react72.default.createElement(QueryClientProvider, { client: M }, import_react72.default.createElement(Us, { ...E2 }, import_react72.default.createElement(ko, { ...e ?? {}, isProvided: !!e }, import_react72.default.createElement(Fo, { ...t ?? {}, isProvided: !!t }, import_react72.default.createElement(fs, { ...r }, import_react72.default.createElement(gs, { liveProvider: R2 }, import_react72.default.createElement(hs, { value: s && !n ? "legacy" : "new" }, import_react72.default.createElement(vs, { router: n }, import_react72.default.createElement(ks, { ...s }, import_react72.default.createElement(Ps, { resources: d3 ?? [] }, import_react72.default.createElement(Is, { i18nProvider: L }, import_react72.default.createElement(Fs, { ...a ?? {} }, import_react72.default.createElement(zs, { ...u ?? {} }, import_react72.default.createElement(ro, null, import_react72.default.createElement(Io, { mutationMode: C2.mutationMode, warnWhenUnsavedChanges: C2.warnWhenUnsavedChanges, syncWithLocation: C2.syncWithLocation, Title: U, undoableTimeout: C2.undoableTimeout, catchAll: T2, DashboardPage: c, LoginPage: m2, Layout: y2, Sider: b, Footer: S, Header: D, OffLayoutArea: x2, hasDashboard: !!c, liveMode: C2.liveMode, onLiveEvent: l2, options: C2 }, import_react72.default.createElement(No, null, import_react72.default.createElement(k, null, g2, !P2 && import_react72.default.createElement(an, null), import_react72.default.createElement(mo, null))))))))))))))))));
}, "Refine");
var ls = o(({ notification: e }) => {
  let t = _(), { notificationDispatch: r } = _e(), { open: s } = Me(), [n, i2] = (0, import_react76.useState)(), a = o(() => {
    if (e.isRunning === true && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({ key: `${e.id}-${e.resource}-notification`, type: "progress", message: t("notifications.undoable", { seconds: Ft(e.seconds) }, `You have ${Ft(e.seconds)} seconds to undo`), cancelMutation: e.cancelMutation, undoableTimeout: Ft(e.seconds) }), e.seconds > 0)) {
      n && clearTimeout(n);
      let u = setTimeout(() => {
        r({ type: "DECREASE_NOTIFICATION_SECOND", payload: { id: e.id, seconds: e.seconds, resource: e.resource } });
      }, 1e3);
      i2(u);
    }
  }, "cancelNotification");
  return (0, import_react76.useEffect)(() => {
    a();
  }, [e]), null;
}, "UndoableQueue");
var pu = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: i2, OffLayoutArea: a }) => {
  let { Layout: u, Footer: d3, Header: c, Sider: p3, Title: m2, OffLayoutArea: T2 } = oe();
  return import_react77.default.createElement(t ?? u, { Sider: r ?? p3, Header: s ?? c, Footer: i2 ?? d3, Title: n ?? m2, OffLayoutArea: a ?? T2 }, e, import_react77.default.createElement(lu, null));
}, "LayoutWrapper");
var lu = o(() => {
  let { Prompt: e } = ne(), t = _(), { warnWhen: r, setWarnWhen: s } = Kt(), n = o((i2) => (i2.preventDefault(), i2.returnValue = t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), i2.returnValue), "warnWhenListener");
  return (0, import_react77.useEffect)(() => (r && window.addEventListener("beforeunload", n), window.removeEventListener("beforeunload", n)), [r]), import_react77.default.createElement(e, { when: r, message: t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), setWarnWhen: s });
}, "UnsavedPrompt");
var mu = o(() => {
  let e = le(), [t, r] = import_react78.default.useState(void 0);
  return import_react78.default.useEffect(() => {
    t && e(t);
  }, [t]), import_react78.default.useCallback((n) => {
    t || r(n);
  }, [t]);
}, "useDeferredGo");
function fu({ redirectOnFail: e = true, appendCurrentPathToQuery: t = true, children: r, fallback: s, loading: n }) {
  var C2;
  let i2 = Z(), a = q(), u = !!(i2 != null && i2.isProvided), d3 = !!(i2 != null && i2.isLegacy), c = a === "legacy", p3 = fe(), m2 = le(), T2 = mu(), { replace: g2 } = pe(), { useLocation: R2 } = ne(), L = R2(), { isLoading: U, isFetching: y2, isSuccess: b, data: { authenticated: D, redirectTo: S } = {}, refetch: x2 } = vr({ v3LegacyAuthProviderCompatible: d3 });
  import_react78.default.useEffect(() => {
    x2();
  }, [r, s]);
  let l2 = import_react78.default.useRef({ status: U ? "initial" : "pending", content: n ?? null });
  y2 ? l2.current.status = "pending" : y2 || (l2.current.status = "settled");
  let f2 = u ? d3 ? b : D : true;
  if (l2.current.status === "settled")
    if (f2)
      l2.current.content = import_react78.default.createElement(import_react78.default.Fragment, null, r ?? null);
    else if (typeof s < "u")
      l2.current.content = import_react78.default.createElement(import_react78.default.Fragment, null, s);
    else {
      let P2 = `${c ? L == null ? void 0 : L.pathname : p3.pathname}`.replace(/(\?.*|#.*)$/, ""), h = d3 ? typeof e == "string" ? e : "/login" : typeof e == "string" ? e : S;
      if (h)
        if (c) {
          let M = t ? `?to=${encodeURIComponent(P2)}` : "";
          g2(`${h}${M}`);
        } else
          T2({ to: h, query: t ? { to: (C2 = p3.params) != null && C2.to ? p3.params.to : m2({ to: P2, options: { keepQuery: true }, type: "path" }) } : void 0, type: "replace" });
    }
  return u ? import_react78.default.createElement(import_react78.default.Fragment, null, l2.current.content) : import_react78.default.createElement(import_react78.default.Fragment, null, r ?? null);
}
o(fu, "Authenticated");
var mo = o(() => {
  let { useLocation: e } = ne(), { checkAuth: t } = se(), r = e();
  return (0, import_react79.useEffect)(() => {
    t == null || t().catch(() => false);
  }, [r == null ? void 0 : r.pathname]), null;
}, "RouteChangeHandler");
var Tu = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: i2, ...a }) => {
  let { resource: u, id: d3, action: c } = N(e), { identifier: p3 } = N(), T2 = o(() => {
    let y2 = (r == null ? void 0 : r.id) ?? d3;
    return e && e !== p3 ? r == null ? void 0 : r.id : y2;
  }, "getDefaultId")(), g2 = e ?? (u == null ? void 0 : u.name), R2 = t ?? c ?? "", L = r ?? { id: T2, resource: u }, { data: U } = Vs({ resource: g2, action: R2, params: L });
  return (0, import_react80.useEffect)(() => {
    n && (U == null ? void 0 : U.can) === false && n({ resource: g2, action: R2, reason: U == null ? void 0 : U.reason, params: L });
  }, [U == null ? void 0 : U.can]), U != null && U.can ? import_react80.default.isValidElement(i2) ? import_react80.default.cloneElement(i2, a) : import_react80.default.createElement(import_react80.default.Fragment, null, i2) : (U == null ? void 0 : U.can) === false ? import_react80.default.createElement(import_react80.default.Fragment, null, s ?? null) : null;
}, "CanAccess");
var ln = [`
    .banner {
        display: flex;
        @media (max-width: 1000px) {
            display: none;
        }
    }`, `
    .banner::before,
    .banner::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    `, `
    .banner::before {
        background-image: linear-gradient(
            270deg,
            rgba(255, 76, 77, 0.35) 0%,
            rgba(255, 153, 51, 0.35) 12.5%,
            rgba(255, 191, 0, 0.35) 25%,
            rgba(38, 217, 127, 0.35) 37.5%,
            rgba(71, 235, 235, 0.35) 50%,
            rgba(0, 128, 255, 0.35) 62.5%,
            rgba(51, 51, 255, 0.35) 75%,
            rgba(128, 0, 255, 0.35) 87.5%,
            rgba(237, 94, 201, 0.35) 100%
        );
        background-position: 0 0;
        background-size: 200% 100%;
        background-repeat: repeat-x;
        animation: bgpos 4s linear infinite;
      }
    `, `
    .banner::after {
        background: linear-gradient(
          180deg,
          rgba(13, 13, 13, 0.85) 0%,
          rgba(13, 13, 13, 0) 100%
        );
    }
    `, `
    @keyframes bgpos {
        0% {
            background-position: 0 0;
        }

        100% {
            background-position: -200% 0;
        }
    }
    `, `
    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {
        text-decoration: none;
        z-index: 9;
    }
    `];
var Pu = o(() => ((0, import_react81.useEffect)(() => {
  let e = document.createElement("style");
  document.head.appendChild(e), ln.forEach((t) => {
    var r;
    return (r = e.sheet) == null ? void 0 : r.insertRule(t, e.sheet.cssRules.length);
  });
}, []), import_react81.default.createElement("div", { className: "banner", style: { flexDirection: "row", justifyContent: "center", alignItems: "center", position: "relative", padding: "8px 16px", backgroundColor: "#0d0d0d", borderBottom: "1px solid rgba(255, 255, 255, 0.15)" } }, import_react81.default.createElement("div", { style: { width: "200px" } }), import_react81.default.createElement("a", { className: "gh-link", href: "https://s.refine.dev/github-support", target: "_blank", rel: "noreferrer" }, import_react81.default.createElement("div", { className: "content", style: { position: "relative", zIndex: 2, color: "#fff", display: "flex", flexDirection: "row", gap: "8px" } }, import_react81.default.createElement("span", { className: "wizard", style: { display: "flex", flexDirection: "row", justifyContent: "center", alignItems: "center", width: "32px", height: "32px", fontSize: "32px", lineHeight: "32px" } }, "🧙‍♂️"), import_react81.default.createElement("span", { className: "text", style: { padding: "4px 0", fontSize: "16px", lineHeight: "24px", textShadow: "0px 0px 4px rgba(255, 255, 255, 0.5)" } }, "refine grants your wishes! Please give us a ⭐️ on GitHub to keep the magic going."))))), "GitHubBanner");

export {
  isArray_default,
  root_default,
  Symbol_default,
  baseGetTag_default,
  isObjectLike_default,
  isSymbol_default,
  isObject_default,
  isFunction_default,
  coreJsData_default,
  baseIsNative_default,
  eq_default,
  memoize_default,
  stringToPath_default,
  arrayMap_default,
  baseToString_default,
  toString_default,
  castPath_default,
  toKey_default,
  baseGet_default,
  get_default,
  isArguments_default,
  isIndex_default,
  isLength_default,
  hasPath_default,
  useQueryClient,
  require_lib,
  arrayPush_default,
  baseFlatten_default,
  identity_default,
  apply_default,
  overRest_default,
  constant_default,
  defineProperty_default,
  shortOut_default,
  setToString_default,
  baseRest_default,
  SetCache_default,
  baseFindIndex_default,
  baseIsNaN_default,
  baseIndexOf_default,
  arrayIncludes_default,
  arrayIncludesWith_default,
  cacheHas_default,
  noop_default,
  setToArray_default,
  baseUniq_default,
  isArrayLike_default,
  isArrayLikeObject_default,
  last_default,
  unionWith_default,
  baseUnary_default,
  baseDifference_default,
  differenceWith_default,
  arrayFilter_default,
  baseProperty_default,
  baseTimes_default,
  unzip_default,
  zip_default,
  fromPairs_default,
  require_pluralize,
  Stack_default,
  arraySome_default,
  Uint8Array_default,
  mapToArray_default,
  baseGetAllKeys_default,
  stubArray_default,
  getSymbols_default,
  stubFalse_default,
  isBuffer_default,
  nodeUtil_default,
  isTypedArray_default,
  arrayLikeKeys_default,
  isPrototype_default,
  overArg_default,
  baseKeys_default,
  keys_default,
  getAllKeys_default,
  WeakMap_default,
  getTag_default,
  baseIsEqual_default,
  isEqual_default,
  now_default,
  trimmedEndIndex_default,
  baseTrim_default,
  toNumber_default,
  debounce_default,
  baseSlice_default,
  isIterateeCall_default,
  toFinite_default,
  toInteger_default,
  chunk_default,
  baseIsMatch_default,
  getMatchData_default,
  baseMatches_default,
  hasIn_default,
  baseMatchesProperty_default,
  property_default,
  baseIteratee_default,
  uniqBy_default,
  qt,
  er,
  xo,
  w,
  xt,
  Ge,
  Co,
  Lo,
  dr,
  Eo,
  O2 as O,
  lr,
  mr,
  fr,
  Z,
  Vo,
  $e,
  Kt,
  Hr,
  Dn,
  oe,
  bt,
  Tr,
  Go,
  Rr,
  Mn,
  Pr,
  vt,
  xr,
  Cr,
  hr,
  In,
  wn,
  Sn,
  An,
  $r,
  br,
  Ht,
  _r,
  Xr,
  Yr,
  vr,
  Nn,
  ae,
  Kn,
  Jr,
  ee,
  Gt,
  $t,
  qr,
  Lr,
  Wt,
  na,
  oo,
  pa,
  ya,
  ga,
  Pa,
  ha,
  te,
  Ua,
  nt,
  q,
  so,
  fe,
  N,
  Ds,
  Ce,
  st,
  Es,
  qR,
  Fe,
  _e,
  Me,
  ie,
  Be,
  ei,
  _,
  ni,
  zP,
  ax,
  ws,
  pt,
  le,
  ao,
  pe,
  Xx,
  sC,
  uC,
  Di,
  lt,
  ne,
  at,
  Vs,
  YC,
  dh,
  Dh,
  Ve,
  Jh,
  lb,
  Wi,
  Y,
  _i,
  Vr,
  Xi,
  lo,
  Ji,
  iu,
  ls,
  pu,
  fu,
  mo,
  Tu,
  Pu,
  esm_exports
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.4.1
  https://github.com/mholt/PapaParse
  License: MIT
  *)
*/
//# sourceMappingURL=chunk-IEDKFOA5.js.map
